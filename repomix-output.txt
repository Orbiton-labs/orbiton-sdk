This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  @types/
    index.ts
  constants/
    addresses.ts
    contracts.ts
    index.ts
    numbers.ts
  contracts/
    core/
      BatchTick.ts
      index.ts
      JettonMinter.ts
      JettonWallet.ts
      Pool.ts
      Position.ts
      Router.ts
      WalletContract.ts
    index.ts
  entities/
    abtractJetton.ts
    fraction.ts
    index.ts
    jetton.ts
    jettonAmount.ts
    percent.ts
    pool.test.ts
    pool.ts
    position.test.ts
    position.ts
    price.ts
    tick.test.ts
    tick.ts
    tickDataProvider.test.ts
    tickDataProvider.ts
    tickListDataProvider.test.ts
    tickListDataProvider.ts
  enums/
    index.ts
    rounding.ts
  functions/
    computePoolAddress.test.ts
    computePoolAddress.ts
    computePositionAddress.ts
    index.ts
  messages/
    index.ts
    poolMessageBuilder.ts
  tlbs/
    jetton/
      index.ts
    pool/
      index.ts
    position/
      index.ts
    router/
      index.ts
    index.ts
  utils/
    address.ts
    crc32.ts
    encodeSqrtRatioX96.test.ts
    encodeSqrtRatioX96.ts
    fullMath.ts
    index.ts
    isSorted.ts
    liquidityMath.test.ts
    liquidityMath.ts
    maxLiquidityForAmounts.test.ts
    maxLiquidityForAmounts.ts
    mostSignificantBit.test.ts
    mostSignificantBit.ts
    nearestUsableTick.test.ts
    nearestUsableTick.ts
    position.ts
    positionMath.ts
    priceParser.ts
    priceTickConversions.ts
    sqrtPriceMath.ts
    swapMath.ts
    tickLibrary.ts
    tickList.ts
    tickMath.test.ts
    tickMath.ts
  index.ts
  script.ts
.dockerignore
.eslintrc.json
.gitignore
.prettierrc
bun.lock
jest.config.js
lerna.json
LICENSE
nx.json
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/@types/index.ts
================
export type BigintIsh = bigint | number | string;

/**
 * The default factory enabled fee amounts, denominated in hundredths of bips.
 */
export enum FeeAmount {
  LOWEST = 100,
  LOW = 500,
  LOWER_MEDIUM = 2500,
  MEDIUM = 3000,
  HIGH = 10000,
}

/**
 * The default factory tick spacings by fee amount.
 */
export const TICK_SPACINGS: { [amount in FeeAmount]: number } = {
  [FeeAmount.LOWEST]: 1,
  [FeeAmount.LOW]: 10,
  [FeeAmount.LOWER_MEDIUM]: 50,
  [FeeAmount.MEDIUM]: 60,
  [FeeAmount.HIGH]: 200,
};

export enum Rounding {
  ROUND_DOWN,
  ROUND_HALF_UP,
  ROUND_UP,
}

export enum WalletVersion {
  V3R1 = 0,
  V3R2 = 1,
  V4R1 = 2,
  V4R2 = 3,
  V5_BETA = 4,
  V5R1 = 5,
}

================
File: src/constants/addresses.ts
================
import { Address } from '@ton/core';

export const ADDRESS_ZERO = Address.parse('EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c');

================
File: src/constants/contracts.ts
================
export const JETTON_MINTER_BOC =
  'b5ee9c7241020d010002a0000114ff00f4a413f4bcf2c80b01020162020a0202cc030902f1d906380492f81f000e8698180b8d8492f81f07d207d2018fd0018b8eb90fd0018fd001801698fe99ff6a2687d007d206a6a18400aa9385d47199a9a9b1b289a6382f97024817d207d006a18106840306b90fd001812881a282178068a502819e428027d012c678b666664f6aa7041083deecbef29385d71814040601c236373701fa00fa40f82854120670546004131503c8cb0358fa0201cf1601cf16c921c8cb0113f40012f400cb00c9f9007074c8cb02ca07cbffc9d05006c705f2e04aa1034545c85004fa0258cf16ccccc9ed5401fa403020d70b01c300915be30d05003e8210d53276db708010c8cb055003cf1622fa0212cb6acb1fcb3fc98042fb0001a682102c76b9735270bae30235373723c0038e1a335035c705f2e04903fa403059c85004fa0258cf16ccccc9ed54e03502c0048e185124c705f2e049d4304300c85004fa0258cf16ccccc9ed54e05f05840ff2f00701fc365f03820898968015a015bcf2e04b02fa40d3003095c821cf16c9916de28210d1735400708018c8cb055005cf1624fa0214cb6a13cb1f14cb3f23fa443070ba8e34f828440370546004131503c8cb0358fa0201cf1601cf16c921c8cb0113f40012f400cb00c9f9007074c8cb02ca07cbffc9d0cf16966c227001cb01e208000ef400c98040fb000095bbf0508806e0a8c008262a07919606b1f404039e2c039e2d924391960227e80025e80196019241f200e0e9919605940f97ff93a0ef003191960ab19e2ca009f4042796d625999992e3f60102037a600b0c007fadbcf6a2687d007d206a6a183618fc1400b82a3002098a81e46581ac7d0100e78b00e78b6490e4658089fa00097a00658064fc80383a6465816503e5ffe4e840001faf16f6a2687d007d206a6a183faa9040acb7ee9b';
export const JETTON_WALLET_BOC =
  'b5ee9c7241021301000376000114ff00f4a413f4bcf2c80b0102016202120202cc03060201d4040500c30831c02497c138007434c0c05c6c2544d7c0fc03f83e903e900c7e800c5c75c87e800c7e800c1cea6d0000b4c7e08403e29fa954882ea54c4d167c0338208405e3514654882ea58c511100fc03780d60841657c1ef2ea4d67c03b817c12103fcbc2000113e910c1c2ebcb85360020158070e020120080a01f700f4cffe803e90087c007b513434c0cc7e803e903e900c3e0a944da8548ab1c17cb8b04a30bffcb8b0950d109c15180104c540f232c0d63e808073c58073c5b2487232c044fd0004bd0032c032483e401c1d3232c0b281f2fff274013e903d010c7e800835d270803cb8b11de0063232c1540233c59c3e8085f2dae00900be13cc8210178d4519c8cb1f19cb3f5007fa0222cf165006cf1625fa025003cf16c95005cc2391729171e25008a813a08209c9c380a014bcf2e2c504c98040fb001023f900f82af900bdf2d19470552003c8cb0358fa0201cf1601cf16c9ed5403f73b513434c0cc7e803e903e900c3e0a8234cffe80145468017e903e9014d6f1c1551cdb5c15180104c540f232c0d63e808073c58073c5b2487232c044fd0004bd0032c0327e401c1d3232c0b281f2fff274140371c1472c7cb8b0c2be80146a2860822625a019ad822860822625a028062849f8c3c975c2c070c008e00b0c0d00705279a018a182107362d09cc8cb1f5230cb3f58fa025007cf165007cf16c9718010c8cb0524cf165006fa0215cb6a14ccc971fb0010241023000e10491038375f040092c200b08e218210d53276db708010c8cb055008cf165004fa0216cb6a12cb1f12cb3fc972fb0093356c21e203f900f82af900bdf2d19470552003c8cb0358fa0201cf1601cf16c9ed540201200f1101c13b513434c0cc7e803e903e900c3e0a81f4cffe803e900c145468549271c17cb8b049f0bffcb8b08160824c4b402805af3cb8b0e0841ef765f7b232c7c572cfd400fe8088b3c58073c5b25c60063232c14933c59c3e80b2dab33260103ec01004e010003af900f82af900bdf2d19470552003c8cb0358fa0201cf1601cf16c9ed5400a7200835c87b513434c0cc7e803e903e900c3e0a8134c7e08405e3514654882ea0841ef765f784ee84ac7cb8b174cfcc7e800c04e81408fe403e0abe402f7cb4651c154800f232c0d63e808073c58073c5b27b55200023a0f605da89a1a60663f401f481f48061f0556ff754a3';
export const ROUTER_BOC =
  'b5ee9c7241022501000614000114ff00f4a413f4bcf2c80b0102016202190202cc031604ddd99916380492f81f068698180b8d8492f81f078057d201801698fe99fc10839b1684e29185d4799b6117d007d206a186811610079722c698ffd2011410876568ae25d7180114108651331e25d718108132f8341085d73fdd0dd187011410831912a35dd71811990c10856c2f359dd40407080b04fed217d217d317d217d27f546b10544865f84470c8cb01f40024f90124f901b98e91f845f8461056104610361026db3c01f4008e8ff845f846104610361026db3c01f400e27001cb00c97021f90074c8cb0212cb07cbffc9d0318210ecad15c4c8cb1f52b0cb3fc804f90128f901b9970370fa022afa02e30d16ca1714ca171323230506000e513afa0270fa020122ca7f26cf16c958cc7001c941308040db3c0a03ee6c12d317d217d201d39f3010384484f84470c8cb01f40024f90124f901b98e91f845f8461056104610361026db3c01f4008e8ff845f846104610361026db3c01f400e27001cb00c97021f90074c8cb0212cb07cbffc9d0318210ca2663c4c8cb1f15cb3f13caff14ca01cb9f58cf167001c9128040db3c23230a03f66c12fa40d31f31d430d0fa40fa00fa40fa00d317d2173025544430f84470c8cb01f40024f90124f901b98e91f845f8461056104610361026db3c01f4008e8ff845f846104610361026db3c01f400e27001cb00c97021f90074c8cb0212cb07cbffc9d03118f009f2e3e821c20027c200b09305ab009105e221c20023230902c48eac7054451325702082100f8a7ea5c8cb1f16cb3f5003fa0221cf1601cf1613cb0001fa02cb00c954413372db3c926c21e224c2008ea7705052702082100f8a7ea5c8cb1f16cb3f5003fa0221cf1601cf1613cb0001fa02cb00c972db3c925f05e20a0a002c718018c8cb055004cf165004fa0212cb6accc901fb000464e3022182102953cb97bae30230208210c7c6a031ba8e9230f84312f009c3fff2d3e8fa4030f863db3ce020821038e27fa0ba0c0f151304f43101fa40fa40d317d217d39fd4305531f84470c8cb01f40024f90124f901b98e91f845f8461056104610361026db3c01f4008e8ff845f846104610361026db3c01f400e27001cb00c97021f90074c8cb0212cb07cbffc9d08210be5a7595c8cb1f15cb3f13cb9f5004cf1613cc7001c9138040db3cf842a4f86223230d0e002e778018c8cb055005cf165005fa0213cb6bccccc901fb000104db3c1504ea3101d401d0fa40fa40fa40d43004d430d0d317d217d217d39f3054765325f84470c8cb01f40024f90124f901b98e91f845f8461056104610361026db3c01f4008e8ff845f846104610361026db3c01f400e27001cb00c97021f90074c8cb0212cb07cbffc9d0311af0099410385f08e30d700180422323101101a0f842a4f86202c8cb17ca17ca1716cb9fc9c826cf165003cf1601cf1612ccc9c8ccccc982107784aceb02830771800cc8cb03cb01cb0813cbff216e967032cb61cb3f96327158cb61cce2c970fb00db3c150104db3c120028708018c8cb055003cf165003fa02cb6ac901fb0004a88e9230f84312f009c3fff2d3e8d20730f861db3ce0208210f22b30f1ba8e9130f84312f009c3fff2d3e8d430f864db3ce0208210d1ccd42cba8e9130f84312f009c3fff2d3e8d430f865db3ce082104bfe4a35ba1515151401388e946dfe2030f84312f009c3fff2d3e8d430f866db3ce05b840ff2f0150038f846f845f844c8ccccccc9f842f841c8ca07cb3ff843cf16ccc9ed5402014817180013501fa443101fa4431ba800454ed44d0d20701f861d33f01f862fa4001f863d401d0d401f864d401f865d430f866d180201201a210201201b1e0201581c1d000db0543c02be1060000db1b0bc02be11200201201f20000db6f47e015f08b0000db605fe015f08700201202224029bb8d9df00af84470c8cb01f40024f90124f901b98e91f845f8461056104610361026db3c01f4008e8ff845f846104610361026db3c01f400e27001cb00c97021f90074c8cb0212cb07cbffc9d03182323008c6d70c8cb7ff40012ccccc970547000546007c8ca1717ca1716cbff15cbff14cb7f13cb7f12cb7fc97020c8f828cf165007cf165005cf1613cb1714cb0712cb9fc9c8ccccccc9000db94edf00af8468ab886b92';
export const POOL_BOC =
  '';
export const POSITION_BOC =
  'b5ee9c7241021301000391000114ff00f4a413f4bcf2c80b0102016202120202cb03110201ce041004851b088831c02456f8007434c0c05c6c2456f83c007e900c0074c7f4cfc8a0843f99a9726eb8c088a084111925eb2eb8c088a0840cc54e92eeb8c080a0843226bbbe6ea00506080d02ea32f8495003f013f2e3e8d27fd3ffd3ffd430f843f844f845f846f84710465513544888db3c04f86302f864f865f866f867f842f841c8f848cf16f848cf16ca17ca1712ca7fcc8210e672c96901c958830771800cc8cb03cb01cb0813cbff216e967032cb61cb3f96327158cb61cce2c970fb00db3c090f01fe32f8485003f013f2e3e8d37f30f847f846f845f844f843c8cb7fcbffcbffcb7fcb7fc9f842f8418210bae7fba1c8cb1f15cb3f14ca1713ca175210cb7ff848cf1612cc8d045bdc0e8e989d5c9b97dc1bdcda5d1a5bdba0fe143001fe2030f843fe2030f844fe2030f845fe2030f846fe2030f847fe203070f84902c9128040070208db3cdb3c0e0f02da32f8495003f013f2e3e8d3ffd3ffd37fd430d0d2ffd2ff30f843f844f845f846f847104655135447a9db3c04f86302f864f865f866f86702a301a321c20021c200b19cf84622a0f866f84721a0f867def842f841c8f848cf16ca17ca1713cb7fcbffcbff8210b537c46501c958090c038222c00098830c28c200f2f4278e845372db3ce25228a128837fdb3c5217a128837fdb3c03c300933710569136e224c20002c20012b1965123a003a0129133e210230a0b0b005e20c1009d81100201a35220a15203b9f2f49b2181100302a05203bef2f4e281100221c2fff2f481100321847fbbf2f40006a98c30014c830771800cc8cb03cb01cb0813cbff216e967032cb61cb3f96327158cb61cce2c970fb00db3c0f02f08f6ff8485003f013f2e3e8fa40d37fd37f30f8465220bc9331f8469101e2f8475220bc9331f8479101e221c20096f84622a1f866de20c20096f84721a1f867de01c8ca7fca7fc9f842f841821078f4b9d0c8cb1f15cb3f14ca1713ca17f848cf1601cf16cc70f84902c9128040db3cdb3ce05f03840ff2f00e0f002c718018c8cb055004cf165004fa0212cb6accc901fb00005cf847f846c8cb7fcb7ff848cf16f849cf16c9f845f844f843f842f841c8ca17ca17cb7fcbffcbffc9c8ccccc9ed5400693b51343500743485c07e187485c07e18b4dfc07e18f4ffc07e1934ffcc3e1975007434dfc07e19b4dfc07e19fe90007e1a3e1a74600015a180fd221880fd2218dd400011a19a99e003f089f08b704c302e';
export const LP_ACCOUNT_BOC =
  'b5ee9c724102090100010b000114ff00f4a413f4bcf2c80b010202d0020602a1d361110638048adf000e8698180b8d848adf07803fd201800e98f98e99ffc2109f8037971f400fd007d00693f987c22a801d07c32fc2300d07c337c22c081f45e7c234081f45e5829085848adf186ed9e40305016af844f843c8f845fa02f846fa02ca17ca17ca7ff841cf16c98210f45a4f21c8cb1f12cb3fcc70f84202c9128040db3c70f86570f86604002c718018c8cb055004cf165004fa0212cb6accc901fb000038f844f843c8f841cf16f842cf16ca17ca17f845fa02f846fa02c9ed5402015807080013007e910c407e910c6ea000453b51343e90007e187e90007e18b485c07e18f485c07e193e80007e197e80007e19b460876a9acc';

================
File: src/constants/index.ts
================
export * from './contracts';
export * from './numbers';
export * from './addresses';

================
File: src/constants/numbers.ts
================
import { Percent } from '../entities/percent';

export const MINIMUM_LIQUIDITY = 1000n;
// exports for internal consumption
export const NEGATIVE_ONE = -1n;
export const ZERO = 0n;
export const ONE = 1n;
export const TWO = 2n;
export const THREE = 3n;
export const FIVE = 5n;
export const TEN = 10n;
export const MaxUint256 = BigInt(
  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
);
export const MaxUint160 = BigInt('0xffffffffffffffffffffffffffffffffffffffff');

// used in liquidity amount math
export const Q96 = 2n ** 96n;
export const Q192 = Q96 ** 2n;
// used in fee calculation
export const MAX_FEE = 10n ** 6n;
export const ONE_HUNDRED_PERCENT = new Percent('1');
export const ZERO_PERCENT = new Percent('0');
export const Q128 = 2n ** 128n;

================
File: src/contracts/core/BatchTick.ts
================
import {
  Address,
  beginCell,
  Cell,
  Contract,
  contractAddress,
  ContractProvider,
  Dictionary,
  DictionaryKey,
  DictionaryValue,
  Sender,
  SendMode,
} from '@ton/core';
import { crc32 } from '../../utils/crc32';
import { ValueOps } from '..';

namespace BatchTickWrapper {
  export const Opcodes = {
    UpdateTickLower: crc32('op::update_tick_lower'),
    UpdateTickUpper: crc32('op::update_tick_upper'),
  };

  export interface InstantiateMsg {
    batchIndex: bigint;
    tickSpacing: bigint;
    poolAddress: Address;
    batchTickCode: Cell;
  }

  export interface UpdateTickLowerMsg {
    tickLower: bigint;
    tickUpper: bigint;
    currentTick: bigint;
    liquidity: bigint;
    feeGrowthInside0LastX128: bigint;
    feeGrowthInside1LastX128: bigint;
    maxLiquidity: bigint;
  }

  export interface UpdateTickUpperMsg {
    flippedLower: boolean;
    tickUpper: bigint;
    currentTick: bigint;
    liquidity: bigint;
    feeGrowthInside0LastX128: bigint;
    feeGrowthInside1LastX128: bigint;
    maxLiquidity: bigint;
  }

  export class BatchTick implements Contract {
    static workchain = 0;

    static buildUpdateTickLowerPacket(data: UpdateTickLowerMsg) {
      return beginCell()
        .storeUint(BatchTickWrapper.Opcodes.UpdateTickLower, 32)
        .storeUint(0, 64)
        .storeInt(data.tickLower, 24)
        .storeInt(data.tickUpper, 24)
        .storeInt(data.currentTick, 24)
        .storeUint(data.liquidity, 128)
        .storeUint(data.feeGrowthInside0LastX128, 256)
        .storeUint(data.feeGrowthInside1LastX128, 256)
        .storeInt(0, 2)
        .storeUint(data.maxLiquidity, 128)
        .endCell();
    }

    static buildUpdateTickUpperPacket(data: UpdateTickUpperMsg) {
      return beginCell()
        .storeUint(BatchTickWrapper.Opcodes.UpdateTickUpper, 32)
        .storeUint(0, 64)
        .storeInt(data.flippedLower ? -1 : 0, 2)
        .storeInt(data.tickUpper, 24)
        .storeInt(data.currentTick, 24)
        .storeUint(data.liquidity, 128)
        .storeUint(data.feeGrowthInside0LastX128, 256)
        .storeUint(data.feeGrowthInside1LastX128, 256)
        .storeInt(-1, 2)
        .storeUint(data.maxLiquidity, 128)
        .endCell();
    }

    constructor(
      readonly address: Address,
      readonly init?: { code: Cell; data: Cell },
    ) {}

    static setWorkchain(workchain: number) {
      BatchTick.workchain = workchain;
    }

    static createFromAddress(address: Address) {
      return new BatchTick(address);
    }

    static create(code: Cell, initMsg: InstantiateMsg) {
      const data = beginCell()
        .storeInt(initMsg.batchIndex, 16)
        .storeInt(initMsg.tickSpacing, 24)
        .storeAddress(initMsg.poolAddress)
        .storeDict(Dictionary.empty()) // empty dict
        .storeRef(initMsg.batchTickCode)
        .endCell();
      const init = { code, data };
      return new BatchTick(contractAddress(BatchTick.workchain, init), init);
    }

    async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: beginCell().endCell(),
      });
    }

    async sendUpdateTickLower(
      provider: ContractProvider,
      via: Sender,
      data: UpdateTickLowerMsg,
      opts: ValueOps,
    ) {
      await provider.internal(via, {
        value: opts.value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: BatchTick.buildUpdateTickLowerPacket(data),
      });
    }

    async sendUpdateTickUpper(
      provider: ContractProvider,
      via: Sender,
      data: UpdateTickUpperMsg,
      opts: ValueOps,
    ) {
      await provider.internal(via, {
        value: opts.value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: BatchTick.buildUpdateTickUpperPacket(data),
      });
    }

    async getTick(provider: ContractProvider, tick: bigint) {
      const result = await provider.get('get_tick', [
        {
          type: 'int',
          value: BigInt(tick),
        },
      ]);
      return result.stack.readCell();
    }
  }
}

export default BatchTickWrapper;

================
File: src/contracts/core/index.ts
================
import BatchTickWrapper from './BatchTick';
import JettonMinterWrapper from './JettonMinter';
import JettonWalletWrapper from './JettonWallet';
import RouterWrapper from './Router';
import PoolWrapper from './Pool';
import PositionWrapper from './Position';
import { WalletContract } from './WalletContract';

export {
  BatchTickWrapper,
  JettonMinterWrapper,
  JettonWalletWrapper,
  RouterWrapper,
  PoolWrapper,
  PositionWrapper,
  WalletContract,
};

================
File: src/contracts/core/JettonMinter.ts
================
import {
  Address,
  beginCell,
  Cell,
  Contract,
  contractAddress,
  ContractProvider,
  Sender,
  SendMode,
  toNano,
} from '@ton/core';
import { TupleItemSlice } from '@ton/core';
import { ValueOps } from '..';
import { JETTON_MINTER_BOC, JETTON_WALLET_BOC } from '../../constants';

namespace JettonMinterWrapper {
  export abstract class JettonMinterOpCodes {
    static transfer = 0xf8a7ea5;
    static transfer_notification = 0x7362d09c;
    static internal_transfer = 0x178d4519;
    static excesses = 0xd53276db;
    static burn = 0x595f07bc;
    static burn_notification = 0x7bdd97de;

    static provide_wallet_address = 0x2c76b973;
    static take_wallet_address = 0xd1735400;
    static mint = 0x15;
    static change_admin = 3;
    static change_content = 4;
  }

  export type JettonMinterConfig = {
    adminAddress: Address;
    content: Cell;
  };

  export function jettonMinterConfigToCell(config: JettonMinterConfig): Cell {
    const jettonWalletCode = Cell.fromBoc(Buffer.from(JETTON_WALLET_BOC, 'hex'))[0];
    return beginCell()
      .storeCoins(0)
      .storeAddress(config.adminAddress)
      .storeRef(config.content)
      .storeRef(jettonWalletCode)
      .endCell();
  }

  export interface MintJettonInterface {
    toAddress: Address;
    jettonAmount: bigint;
    amount: bigint;
  }

  export class JettonMinter implements Contract {
    constructor(
      readonly address: Address,
      readonly init?: { code: Cell; data: Cell },
    ) {}

    static createFromAddress(address: Address) {
      return new JettonMinter(address);
    }

    static createFromConfig(config: JettonMinterConfig, workchain = 0) {
      const code = Cell.fromBoc(Buffer.from(JETTON_MINTER_BOC, 'hex'))[0];
      const data = jettonMinterConfigToCell(config);
      const init = { code, data };
      return new JettonMinter(contractAddress(workchain, init), init);
    }

    async sendDeploy(provider: ContractProvider, via: Sender, ops: ValueOps) {
      await provider.internal(via, {
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        ...ops,
        body: beginCell().endCell(),
      });
    }

    async sendMint(
      provider: ContractProvider,
      via: Sender,
      data: MintJettonInterface,
      opts: ValueOps,
    ) {
      await provider.internal(via, {
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        value: opts.value,
        body: beginCell()
          .storeUint(JettonMinterOpCodes.mint, 32)
          .storeUint(opts.queryId || 0, 64)
          .storeAddress(data.toAddress)
          .storeCoins(data.amount)
          .storeRef(
            beginCell()
              .storeUint(JettonMinterOpCodes.internal_transfer, 32)
              .storeUint(opts.queryId || 0, 64)
              .storeCoins(data.jettonAmount)
              .storeAddress(this.address)
              .storeAddress(this.address)
              .storeCoins(0)
              .storeUint(0, 1)
              .endCell(),
          )
          .endCell(),
      });
    }

    static changeAdminMessage(newOwner: Address) {
      return beginCell()
        .storeUint(JettonMinterOpCodes.change_admin, 32)
        .storeUint(0, 64) // op, queryId
        .storeAddress(newOwner)
        .endCell();
    }

    async sendChangeAdmin(provider: ContractProvider, via: Sender, newOwner: Address) {
      await provider.internal(via, {
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: JettonMinter.changeAdminMessage(newOwner),
        value: toNano('0.05'),
      });
    }

    async getWalletAddress(provider: ContractProvider, address: Address): Promise<Address> {
      const result = await provider.get('get_wallet_address', [
        {
          type: 'slice',
          cell: beginCell().storeAddress(address).endCell(),
        } as TupleItemSlice,
      ]);

      return result.stack.readAddress();
    }

    async getTotalsupply(provider: ContractProvider): Promise<bigint> {
      const result = await provider.get('get_jetton_data', []);
      return result.stack.readBigNumber();
    }
  }
}

export default JettonMinterWrapper;

================
File: src/contracts/core/JettonWallet.ts
================
import {
  Address,
  beginCell,
  Cell,
  Contract,
  contractAddress,
  ContractProvider,
  Sender,
  SendMode,
} from '@ton/core';
import { ValueOps } from '..';
import { JETTON_WALLET_BOC } from '../../constants';
import {
  OpJettonTransferMint,
  OpJettonTransferSwap,
  storeOpJettonTransferMint,
  storeOpJettonTransferSwap,
} from '../../tlbs/jetton';

namespace JettonWalletWrapper {
  export enum JettonOpCodes {
    TRANSFER = 0xf8a7ea5,
    TRANSFER_NOTIFICATION = 0x7362d09c,
    INTERNAL_TRANSFER = 0x178d4519,
    EXCESSES = 0xd53276db,
    BURN = 0x595f07bc,
    BURN_NOTIFICATION = 0x7bdd97de,
    MINT = 21,
  }

  export type JettonWalletConfig = {
    ownerAddress: Address;
    minterAddress: Address;
    walletCode: Cell;
  };

  export function jettonWalletConfigToCell(config: JettonWalletConfig): Cell {
    return beginCell()
      .storeCoins(0)
      .storeAddress(config.ownerAddress)
      .storeAddress(config.minterAddress)
      .storeRef(config.walletCode)
      .endCell();
  }

  export class JettonWallet implements Contract {
    constructor(
      readonly address: Address,
      readonly init?: { code: Cell; data: Cell },
    ) {}

    static createFromAddress(address: Address) {
      return new JettonWallet(address);
    }

    static createFromConfig(config: JettonWalletConfig, workchain = 0) {
      const code = Cell.fromBoc(Buffer.from(JETTON_WALLET_BOC, 'hex'))[0];
      const data = jettonWalletConfigToCell(config);
      const init = { code, data };
      return new JettonWallet(contractAddress(workchain, init), init);
    }

    async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: beginCell().endCell(),
      });
    }

    async sendTransferMint(
      provider: ContractProvider,
      via: Sender,
      data: OpJettonTransferMint,
      opts: ValueOps,
    ) {
      const body = beginCell();
      storeOpJettonTransferMint(data)(body);
      await provider.internal(via, {
        value: opts.value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: body.endCell(),
      });
    }

    async sendTransferSwap(
      provider: ContractProvider,
      via: Sender,
      data: OpJettonTransferSwap,
      opts: ValueOps,
    ) {
      const body = beginCell();
      storeOpJettonTransferSwap(data)(body);
      await provider.internal(via, {
        value: opts.value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: body.endCell(),
      });
    }

    async getBalance(provider: ContractProvider) {
      const state = await provider.getState();
      if (state.state.type !== 'active') {
        return { amount: 0n };
      }
      const { stack } = await provider.get('get_wallet_data', []);
      const [amount] = [stack.readBigNumber()];
      return { amount };
    }

    async getWalletData(provider: ContractProvider) {
      const result = await provider.get('get_wallet_data', []);
      const balance = result.stack.readBigNumber();
      const owner = result.stack.readAddress();
      const jettonMasterAddress = result.stack.readAddress();
      return { balance, owner, jettonMasterAddress };
    }
  }
}

export default JettonWalletWrapper;

================
File: src/contracts/core/Pool.ts
================
import {
  Address,
  beginCell,
  Cell,
  Contract,
  contractAddress,
  ContractProvider,
  Dictionary,
  Sender,
  SendMode,
} from '@ton/core';
import { crc32 } from '../../utils/crc32';
import {
  InMsgBody,
  loadPoolStorage,
  loadTickInfo,
  PoolStorage,
  storeInMsgBody,
  TickInfo,
} from '../../tlbs/pool';

namespace PoolWrapper {
  export const Opcodes = {
    Mint: crc32('op::mint'),
    Swap: crc32('op::swap'),
    Burn: crc32('op::burn'),

    CallBackLiquidity: crc32('op::cb_add_liquidity'),
    CallbackCollect: crc32('op::cb_collect'),
  };

  export interface InstantiateMsg {
    routerAddress: Address;
    jetton0Wallet: Address;
    jetton1Wallet: Address;
    fee: bigint;
    protocolFee: bigint;
    sqrtPriceX96: bigint;
    tickSpacing: bigint;
    tick: bigint;
    positionCode: Cell;
    lpAccountCode: Cell;
    maxLiquidity?: bigint;
  }

  export class Pool implements Contract {
    static workchain = 0;

    constructor(
      readonly address: Address,
      readonly init?: { code: Cell; data: Cell },
    ) {}

    static setWorkchain(workchain: number) {
      Pool.workchain = workchain;
    }

    static createFromAddress(address: Address) {
      return new Pool(address);
    }

    static create(code: Cell, initMsg: InstantiateMsg) {
      const data = beginCell()
        .storeRef(
          beginCell()
            .storeAddress(initMsg.routerAddress)
            .storeAddress(initMsg.jetton0Wallet)
            .storeAddress(initMsg.jetton1Wallet)
            .storeUint(initMsg.fee, 24)
            .storeUint(initMsg.protocolFee, 8)
            .storeUint(initMsg.sqrtPriceX96, 160)
            .endCell(),
        )
        .storeRef(
          beginCell()
            .storeInt(initMsg.tickSpacing, 24)
            .storeInt(0n, 24)
            .storeUint(0n, 256)
            .storeUint(0n, 256)
            .storeUint(0n, 128)
            .storeUint(0n, 128)
            .storeUint(0n, 128)
            .endCell(),
        )
        .storeRef(
          beginCell()
            .storeUint(initMsg.maxLiquidity ?? 0, 128)
            .storeDict(Dictionary.empty())
            .storeRef(initMsg.positionCode)
            .storeRef(initMsg.lpAccountCode)
            .endCell(),
        )
        .endCell();
      const init = { code, data };
      return new Pool(contractAddress(Pool.workchain, init), init);
    }

    async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: beginCell().endCell(),
      });
    }

    async sendMint(provider: ContractProvider, via: Sender, value: bigint, inMsgBody: InMsgBody) {
      const body = beginCell();
      storeInMsgBody(inMsgBody)(body);
      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: body.endCell(),
      });
    }

    async getTicks(provider: ContractProvider): Promise<[number, TickInfo][]> {
      const poolState = await this.getPoolState(provider);
      const ticks = poolState.third_ref.ticks;
      const allParsedTicksAndTick: [number, TickInfo][] = [];
      ticks.keys().forEach((key: any) => {
        const tick = ticks.get(key);
        if (tick) {
          allParsedTicksAndTick.push([key, tick]);
        }
      });
      return allParsedTicksAndTick;
    }

    async getPoolState(provider: ContractProvider): Promise<PoolStorage> {
      const storage = await provider.getState();
      if (storage.state.type === 'active') {
        return loadPoolStorage(
          Cell.fromBoc(Buffer.from(storage.state.data ?? Buffer.from([])))[0].beginParse(),
        );
      }
      throw new Error('Position is not active');
    }

    async getJettonsWallet(provider: ContractProvider): Promise<Address[]> {
      const result = await provider.get('get_jettons_wallet', []);
      const tuple = result.stack;
      let data: any[] = [];
      while (tuple.remaining > 0) {
        const item = tuple.pop();
        if (item.type === 'cell') {
          data = [...data, item.cell.beginParse().loadAddress()];
        }
      }
      return data;
    }

    async getCollectedFees(provider: ContractProvider): Promise<bigint[]> {
      const result = await provider.get('get_collected_fees', []);
      const tuple = result.stack;
      let data: any[] = [];
      while (tuple.remaining > 0) {
        const item = tuple.pop();
        if (item.type === 'int') {
          data = [...data, item.value];
        }
      }
      return data;
    }

    async getFeesGrowthGlobal(provider: ContractProvider): Promise<bigint[]> {
      const result = await provider.get('get_fee_growth_global', []);
      const tuple = result.stack;
      const feeGrowth0Global = tuple.readBigNumber();
      const feeGrowth1Global = tuple.readBigNumber();
      return [feeGrowth0Global, feeGrowth1Global];
    }

    async getFeesGrowthOutsideAtTick(
      provider: ContractProvider,
      tickId: bigint,
    ): Promise<[bigint, bigint, boolean]> {
      const result = await provider.get('get_fee_growth_outside_at_tick', [
        {
          type: 'int',
          value: tickId,
        },
      ]);
      const tuple = result.stack;
      const feeGrowth0Global = tuple.readBigNumber();
      const feeGrowth1Global = tuple.readBigNumber();
      const existed = tuple.readBoolean();
      return [feeGrowth0Global, feeGrowth1Global, existed];
    }

    async getLpAccountAddress(
      provider: ContractProvider,
      user: Address,
      tick_lower: bigint,
      tick_upper: bigint,
    ): Promise<Address> {
      const result = await provider.get('get_lp_account_address', [
        {
          type: 'slice',
          cell: beginCell().storeAddress(user).endCell(),
        },
        {
          type: 'int',
          value: tick_lower,
        },
        {
          type: 'int',
          value: tick_upper,
        },
      ]);

      return result.stack.readAddress();
    }

    async getPositionAddress(
      provider: ContractProvider,
      tick_lower: bigint,
      tick_upper: bigint,
      owner: Address,
    ): Promise<Address> {
      const result = await provider.get('get_calculate_position_address', [
        {
          type: 'int',
          value: tick_lower,
        },
        {
          type: 'int',
          value: tick_upper,
        },
        {
          type: 'slice',
          cell: beginCell().storeAddress(owner).endCell(),
        },
      ]);
      return result.stack.readAddress();
    }

    async getPoolInfo(provider: ContractProvider) {
      const result = await provider.get('get_pool_info', []);
      const fee = result.stack.readBigNumber();
      const tickSpacing = result.stack.readBigNumber();
      const tick = result.stack.readBigNumber();
      const sqrtPriceX96 = result.stack.readBigNumber();
      const liquidity = result.stack.readBigNumber();
      return { fee, tickSpacing, tick, sqrtPriceX96, liquidity };
    }

    async getFeeGrowthGlobal(provider: ContractProvider) {
      const result = await provider.get('get_fee_growth_global', []);
      const feeGrowthGlobal0X128 = result.stack.readBigNumber();
      const feeGrowthGlobal1X128 = result.stack.readBigNumber();

      return { feeGrowthGlobal0X128, feeGrowthGlobal1X128 };
    }

    async getTickInfo(provider: ContractProvider, tick: bigint): Promise<TickInfo> {
      const result = await provider.get('get_tick_info_raw', [
        {
          type: 'int',
          value: tick,
        },
      ]);
      const infoRaw = result.stack.readCellOpt();
      if (!infoRaw) {
        return {
          kind: 'TickInfo',
          liquidity_gross: 0n,
          liquidity_net: 0n,
          fee_growth_outside_0_x128: 0n,
          fee_growth_outside_1_x128: 0n,
          initialized: false,
        };
      }
      return loadTickInfo(infoRaw.beginParse());
    }
  }
}

export default PoolWrapper;

================
File: src/contracts/core/Position.ts
================
import { Address, beginCell, Cell, Contract, ContractProvider, Sender, SendMode } from '@ton/core';
import { crc32 } from '../../utils/crc32';
import {
  BurnPositionMessage,
  BurnPositionParams,
  CollectMessage,
  CollectParams,
  storeBurnPositionMessage,
  storeCollectMessage,
  loadPositionStorage,
} from '../../tlbs/position';

namespace PositionWrapper {
  export const Opcodes = {
    MintPosition: crc32('op::mint_position'),
    BurnPosition: crc32('op::burn_position'),
    Collect: crc32('op::collect'),
    CallBackPoolBurn: crc32('op::cb_pool_burn'),
  };

  export class Position implements Contract {
    static workchain = 0;

    constructor(
      readonly address: Address,
      readonly init?: { code: Cell; data: Cell },
    ) {}

    static setWorkchain(workchain: number) {
      Position.workchain = workchain;
    }

    static createFromAddress(address: Address) {
      return new Position(address);
    }

    async getStorage(provider: ContractProvider) {
      const storage = await provider.getState();
      if (storage.state.type === 'active') {
        return loadPositionStorage(
          Cell.fromBoc(Buffer.from(storage.state.data ?? Buffer.from([])))[0].beginParse(),
        );
      }
      throw new Error('Position is not active');
    }

    async getOwnerAddress(provider: ContractProvider) {
      const storage = await this.getStorage(provider);
      return storage.second_ref.owner_address;
    }

    async getTokensOwed(provider: ContractProvider) {
      const storage = await this.getStorage(provider);
      return {
        tokenOwed0: storage.second_ref.token_owed0,
        tokenOwed1: storage.second_ref.token_owed1,
      };
    }

    async sendBurnPosition(
      provider: ContractProvider,
      via: Sender,
      value: bigint,
      liquidityDelta: bigint,
    ) {
      const burnParams: BurnPositionParams = {
        kind: 'BurnPositionParams',
        liquidity_delta: liquidityDelta,
      };

      const message: BurnPositionMessage = {
        kind: 'BurnPositionMessage',
        query_id: 0,
        body: burnParams,
      };

      const body = beginCell();
      storeBurnPositionMessage(message)(body);

      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: body.endCell(),
      });
    }

    async sendCollect(
      provider: ContractProvider,
      via: Sender,
      value: bigint,
      recipient: Address,
      amount0Requested: bigint,
      amount1Requested: bigint,
    ) {
      const collectParams: CollectParams = {
        kind: 'CollectParams',
        recipient: recipient,
        amount_0_requested: amount0Requested,
        amount_1_requested: amount1Requested,
      };

      const message: CollectMessage = {
        kind: 'CollectMessage',
        query_id: 0,
        body: collectParams,
      };

      const body = beginCell();
      storeCollectMessage(message)(body);

      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: body.endCell(),
      });
    }
  }
}

export default PositionWrapper;

================
File: src/contracts/core/Router.ts
================
import {
  Address,
  beginCell,
  Cell,
  Contract,
  contractAddress,
  ContractProvider,
  Sender,
  SendMode,
} from '@ton/core';
import { crc32 } from '../../utils/crc32';
import { OpCreatePool, storeOpCreatePool } from '../../tlbs/router';
import { ValueOps } from '..';

namespace RouterWrapper {
  export const Opcodes = {
    CreatePool: crc32('op::create_pool'),
    SetAdminAddress: crc32('op::set_admin_address'),
    UpdateLockState: crc32('op::update_lock_state'),
    UpdatePoolCode: crc32('op::update_pool_code'),
    UpdateAccountCode: crc32('op::update_account_code'),
    UpdateBatchTickCode: crc32('op::update_batch_tick_code'),
    UpdatePositionCode: crc32('op::update_position_code'),
    CallbackCreatePool: crc32('op::cb_create_pool'),
  };

  export interface InstantiateMsg {
    adminAddress: Address;
    poolCode: Cell;
    positionCode: Cell;
    lpAccountCode: Cell;
  }

  export interface SetAdminAddressMsg {
    address: Address;
  }

  export class Router implements Contract {
    static workchain = 0;

    constructor(
      readonly address: Address,
      readonly init?: { code: Cell; data: Cell },
    ) {}

    static setWorkchain(workchain: number) {
      Router.workchain = workchain;
    }

    static createFromAddress(address: Address) {
      return new Router(address);
    }

    static create(code: Cell, initMsg: InstantiateMsg) {
      const data = beginCell()
        .storeInt(-1, 8)
        .storeUint(0, 64)
        .storeAddress(initMsg.adminAddress)
        .storeRef(
          beginCell()
            .storeRef(initMsg.poolCode)
            .storeRef(initMsg.positionCode)
            .storeRef(initMsg.lpAccountCode),
        )
        .endCell();
      const init = { code, data };
      return new Router(contractAddress(Router.workchain, init), init);
    }

    async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
      await provider.internal(via, {
        value,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: beginCell().endCell(),
      });
    }

    async sendCreatePool(
      provider: ContractProvider,
      via: Sender,
      data: OpCreatePool,
      ops: ValueOps,
    ) {
      let cell = beginCell();
      storeOpCreatePool(data)(cell);
      await provider.internal(via, {
        ...ops,
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        body: cell.endCell(),
      });
    }

    async sendSetAdminAddress(
      provider: ContractProvider,
      via: Sender,
      data: SetAdminAddressMsg,
      ops: ValueOps,
    ) {
      await provider.internal(via, {
        sendMode: SendMode.PAY_GAS_SEPARATELY,
        ...ops,
        body: beginCell()
          .storeUint(Opcodes.SetAdminAddress, 32)
          .storeUint(ops.queryId ?? 0, 64)
          .storeAddress(data.address)
          .endCell(),
      });
    }

    async getAdminAddress(provider: ContractProvider): Promise<Address> {
      const result = await provider.get('get_admin_address', []);
      console.log(result);
      return result.stack.readAddress();
    }

    async getIsLocked(provider: ContractProvider): Promise<boolean> {
      const result = await provider.get('get_is_locked', []);
      return result.stack.readBigNumber() === -1n ? true : false;
    }

    async getPoolCode(provider: ContractProvider): Promise<Cell> {
      const result = await provider.get('get_pool_code', []);
      return result.stack.readCell();
    }

    async getBatchTickCode(provider: ContractProvider): Promise<Cell> {
      const result = await provider.get('get_batch_tick_code', []);
      return result.stack.readCell();
    }

    async getPositionCode(provider: ContractProvider): Promise<Cell> {
      const result = await provider.get('get_position_code', []);
      return result.stack.readCell();
    }

    async getLpAccountCode(provider: ContractProvider): Promise<Cell> {
      const result = await provider.get('get_lp_account_code', []);
      return result.stack.readCell();
    }

    async getPoolAddress(
      provider: ContractProvider,
      token0: Address,
      token1: Address,
      fee: bigint,
      tick_spacing: bigint,
    ): Promise<Address> {
      const result = await provider.get('get_pool_address', [
        {
          type: 'slice',
          cell: beginCell().storeAddress(token0).endCell(),
        },
        {
          type: 'slice',
          cell: beginCell().storeAddress(token1).endCell(),
        },
        {
          type: 'int',
          value: fee,
        },
        {
          type: 'int',
          value: tick_spacing,
        },
      ]);
      return result.stack.readAddress();
    }
  }
}

export default RouterWrapper;

================
File: src/contracts/core/WalletContract.ts
================
import {
  Cell,
  WalletContractV3R1,
  WalletContractV3R2,
  WalletContractV4,
  WalletContractV5R1,
} from '@ton/ton';
import { WalletVersion } from '../../@types';
import {
  WalletV3SendArgsSignable,
  WalletV3SendArgsSigned,
} from '@ton/ton/dist/wallets/WalletContractV3Types';
import {
  Wallet4SendArgsSignable,
  Wallet4SendArgsSigned,
} from '@ton/ton/dist/wallets/WalletContractV4';

// function overloading
interface IWalletContract {
  createTransfer<T extends WalletV3SendArgsSigned | WalletV3SendArgsSignable>(
    args: T,
  ): T extends WalletV3SendArgsSignable ? Promise<Cell> : Cell;

  createTransfer<T extends Wallet4SendArgsSigned | Wallet4SendArgsSignable>(
    args: T,
  ): T extends Wallet4SendArgsSignable ? Promise<Cell> : Cell;
}

export class WalletContract {
  private constructor() {}

  public static create = (
    workchain: number,
    publicKey: Buffer,
    version: WalletVersion,
  ): IWalletContract => {
    switch (version) {
      case WalletVersion.V3R1:
        return WalletContractV3R1.create({ workchain, publicKey });
      case WalletVersion.V3R2:
        return WalletContractV3R2.create({ workchain, publicKey });
      case WalletVersion.V4R1:
        throw new Error('Unsupported wallet contract version - v4R1');
      case WalletVersion.V4R2:
        return WalletContractV4.create({ workchain, publicKey });
      case WalletVersion.V5R1:
        return WalletContractV5R1.create({ workchain, publicKey });
      default:
        throw new Error(`Unsupported wallet contract version - ${version}`);
    }
  };
}

================
File: src/contracts/index.ts
================
import { SendMode } from '@ton/core';
import { Maybe } from '@ton/core/dist/utils/maybe';

export type ValueOps = {
  value: bigint | string;
  queryId?: number;
  bounce?: Maybe<boolean>;
  sendMode?: SendMode;
};
export * from './core';

================
File: src/entities/abtractJetton.ts
================
import invariant from 'tiny-invariant';
import { Jetton } from './jetton';

/**
 * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies
 */
export abstract class AbstractJetton {
  /**
   * The decimals used in representing currency amounts
   */
  public readonly decimals: number;

  /**
   * The symbol of the currency, i.e. a short textual non-unique identifier
   */
  public readonly symbol: string;

  /**
   * The name of the currency, i.e. a descriptive textual non-unique identifier
   */
  public readonly name?: string;

  public readonly image?: string;

  /**
   * Constructs an instance of the base class `BaseCurrency`.
   * @param chainId the chain ID on which this currency resides
   * @param decimals decimals of the currency
   * @param symbol symbol of the currency
   * @param name of the currency
   */
  protected constructor(decimals: number, symbol: string, name?: string, image?: string) {
    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS');

    this.decimals = decimals;
    this.symbol = symbol;
    this.name = name;
    this.image = image;
  }

  /**
   * Returns whether this currency is functionally equivalent to the other currency
   * @param other the other currency
   */
  public abstract equals(other: Jetton): boolean;
}

================
File: src/entities/fraction.ts
================
import invariant from 'tiny-invariant';
import _Decimal from 'decimal.js-light';
import _Big from 'big.js';
// @ts-ignore
import toFormat from 'toformat';

import { BigintIsh, Rounding } from '../@types';

const Decimal = toFormat(_Decimal);
const Big = toFormat(_Big);

const toSignificantRounding = {
  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,
  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,
  [Rounding.ROUND_UP]: Decimal.ROUND_UP,
};

const enum RoundingMode {
  /**
   * Rounds towards zero.
   * I.e. truncate, no rounding.
   */
  RoundDown = 0,
  /**
   * Rounds towards nearest neighbour.
   * If equidistant, rounds away from zero.
   */
  RoundHalfUp = 1,
  /**
   * Rounds towards nearest neighbour.
   * If equidistant, rounds towards even neighbour.
   */
  RoundHalfEven = 2,
  /**
   * Rounds away from zero.
   */
  RoundUp = 3,
}

const toFixedRounding = {
  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,
  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,
  [Rounding.ROUND_UP]: RoundingMode.RoundUp,
};

export class Fraction {
  public readonly numerator: bigint;

  public readonly denominator: bigint;

  public constructor(numerator: BigintIsh, denominator: BigintIsh = 1n) {
    this.numerator = BigInt(numerator);
    this.denominator = BigInt(denominator);
  }

  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {
    if (
      typeof fractionish === 'bigint' ||
      typeof fractionish === 'number' ||
      typeof fractionish === 'string'
    )
      return new Fraction(fractionish);

    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;
    throw new Error('Could not parse fraction');
  }

  // performs floor division
  public get quotient(): bigint {
    return this.numerator / this.denominator;
  }

  // remainder after floor division
  public get remainder(): Fraction {
    return new Fraction(this.numerator % this.denominator, this.denominator);
  }

  public invert(): Fraction {
    return new Fraction(this.denominator, this.numerator);
  }

  public add(other: Fraction | BigintIsh): Fraction {
    const otherParsed = Fraction.tryParseFraction(other);
    if (this.denominator === otherParsed.denominator) {
      return new Fraction(this.numerator + otherParsed.numerator, this.denominator);
    }
    return new Fraction(
      this.numerator * otherParsed.denominator + otherParsed.numerator * this.denominator,
      this.denominator * otherParsed.denominator,
    );
  }

  public subtract(other: Fraction | BigintIsh): Fraction {
    const otherParsed = Fraction.tryParseFraction(other);
    if (this.denominator === otherParsed.denominator) {
      return new Fraction(this.numerator - otherParsed.numerator, this.denominator);
    }
    return new Fraction(
      this.numerator * otherParsed.denominator - otherParsed.numerator * this.denominator,
      this.denominator * otherParsed.denominator,
    );
  }

  public lessThan(other: Fraction | BigintIsh): boolean {
    const otherParsed = Fraction.tryParseFraction(other);
    return this.numerator * otherParsed.denominator < otherParsed.numerator * this.denominator;
  }

  public equalTo(other: Fraction | BigintIsh): boolean {
    const otherParsed = Fraction.tryParseFraction(other);
    return this.numerator * otherParsed.denominator === otherParsed.numerator * this.denominator;
  }

  public greaterThan(other: Fraction | BigintIsh): boolean {
    const otherParsed = Fraction.tryParseFraction(other);
    return this.numerator * otherParsed.denominator > otherParsed.numerator * this.denominator;
  }

  public multiply(other: Fraction | BigintIsh): Fraction {
    const otherParsed = Fraction.tryParseFraction(other);
    return new Fraction(
      this.numerator * otherParsed.numerator,
      this.denominator * otherParsed.denominator,
    );
  }

  public divide(other: Fraction | BigintIsh): Fraction {
    const otherParsed = Fraction.tryParseFraction(other);
    return new Fraction(
      this.numerator * otherParsed.denominator,
      this.denominator * otherParsed.numerator,
    );
  }

  public toSignificant(
    significantDigits: number,
    format: object = { groupSeparator: '' },
    rounding: Rounding = Rounding.ROUND_HALF_UP,
  ): string {
    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);
    invariant(significantDigits > 0, `${significantDigits} is not positive.`);

    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });
    const quotient = new Decimal(this.numerator.toString())
      .div(this.denominator.toString())
      .toSignificantDigits(significantDigits);
    return quotient.toFormat(quotient.decimalPlaces(), format);
  }

  public toFixed(
    decimalPlaces: number,
    format: object = { groupSeparator: '' },
    rounding: Rounding = Rounding.ROUND_HALF_UP,
  ): string {
    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);
    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);

    Big.DP = decimalPlaces;
    Big.RM = toFixedRounding[rounding];
    return new Big(this.numerator.toString())
      .div(this.denominator.toString())
      .toFormat(decimalPlaces, format);
  }

  /**
   * Helper method for converting any super class back to a fraction
   */
  public get asFraction(): Fraction {
    return new Fraction(this.numerator, this.denominator);
  }
}

================
File: src/entities/index.ts
================
export * from './jetton';
export * from './price';
export * from './fraction';
export * from './percent';
export * from './jettonAmount';
export * from './tick';
export * from './tickDataProvider';
// export * from './tickListDataProvider';

================
File: src/entities/jetton.ts
================
import { Address } from '@ton/core';
import { AbstractJetton } from './abtractJetton';
import { parseAddress } from '../utils/address';
import { beginCell } from '@ton/core';
import invariant from 'tiny-invariant';
import { TonClient } from '@ton/ton';
import { JettonMinterWrapper } from '../contracts';

export class Jetton extends AbstractJetton {
  public readonly address: Address;
  public walletAddress?: Address;
  public readonly isToken: true = true;

  public constructor(
    address: string,
    decimals: number,
    symbol: string,
    name?: string,
    image?: string,
  ) {
    super(decimals, symbol, name, image);
    this.address = parseAddress(address);
  }

  public async setWalletAddress(tonClient: TonClient, userAddress: Address) {
    const jettonMinterContract = tonClient.open(
      JettonMinterWrapper.JettonMinter.createFromAddress(this.address),
    );
    const jettonWallet = await jettonMinterContract.getWalletAddress(userAddress);
    this.walletAddress = jettonWallet;
  }

  /**
   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
   * @param other other token to compare
   */
  public equals(other: Jetton): boolean {
    return other.isToken && this.address.equals(other.address);
  }

  /**
   * Returns true if the address of this token sorts before the address of the other token
   * @param other other token to compare
   * @throws if the tokens have the same address
   * @throws if the tokens are on different chains
   */
  public sortsBefore(other: Jetton): boolean {
    invariant(this?.walletAddress, 'X: WALLET_ADDRESS');
    invariant(other?.walletAddress, 'Y: WALLET_ADDRESS');
    invariant(this.walletAddress !== other.walletAddress, 'ADDRESSES');
    return (
      BigInt(`0x${beginCell().storeAddress(this.walletAddress).endCell().hash().toString('hex')}`) <
      BigInt(`0x${beginCell().storeAddress(other.walletAddress).endCell().hash().toString('hex')}`)
    );
  }

  //   /**
  //    * Return this token, which does not need to be wrapped
  //    */
  public get wrapped(): Jetton {
    return this;
  }
}

================
File: src/entities/jettonAmount.ts
================
import _Big from 'big.js';
// @ts-expect-error
import toFormat from 'toformat';
import invariant from 'tiny-invariant';
import { MaxUint256 } from '../constants';
import { Rounding } from '../enums';
import { Jetton } from './jetton';
import { BigintIsh } from '../@types';
import { Fraction } from './fraction';

const Big = toFormat(_Big);

export class JettonAmount<T extends Jetton> extends Fraction {
  public readonly jetton: T;

  public readonly decimalScale: bigint;

  /**
   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount
   * @param currency the currency in the amount
   * @param rawAmount the raw token or ether amount
   */
  public static fromRawAmount<T extends Jetton>(jetton: T, rawAmount: BigintIsh): JettonAmount<T> {
    return new JettonAmount(jetton, rawAmount);
  }

  /**
   * Construct a currency amount with a denominator that is not equal to 1
   * @param currency the currency
   * @param numerator the numerator of the fractional token amount
   * @param denominator the denominator of the fractional token amount
   */
  public static fromFractionalAmount<T extends Jetton>(
    jetton: T,
    numerator: BigintIsh,
    denominator: BigintIsh,
  ): JettonAmount<T> {
    return new JettonAmount(jetton, numerator, denominator);
  }

  protected constructor(jetton: T, numerator: BigintIsh, denominator?: BigintIsh) {
    super(numerator, denominator);
    invariant(this.quotient <= MaxUint256, 'AMOUNT');
    this.jetton = jetton;
    this.decimalScale = 10n ** BigInt(jetton.decimals);
  }

  public add(other: JettonAmount<T>): JettonAmount<T> {
    invariant(this.jetton.equals(other.jetton), 'CURRENCY');
    const added = super.add(other);
    return JettonAmount.fromFractionalAmount(this.jetton, added.numerator, added.denominator);
  }

  public subtract(other: JettonAmount<T>): JettonAmount<T> {
    invariant(this.jetton.equals(other.jetton), 'CURRENCY');
    const subtracted = super.subtract(other);
    return JettonAmount.fromFractionalAmount(
      this.jetton,
      subtracted.numerator,
      subtracted.denominator,
    );
  }

  public multiply(other: Fraction | BigintIsh): JettonAmount<T> {
    const multiplied = super.multiply(other);
    return JettonAmount.fromFractionalAmount(
      this.jetton,
      multiplied.numerator,
      multiplied.denominator,
    );
  }

  public divide(other: Fraction | BigintIsh): JettonAmount<T> {
    const divided = super.divide(other);
    return JettonAmount.fromFractionalAmount(this.jetton, divided.numerator, divided.denominator);
  }

  public toSignificant(
    significantDigits = 6,
    format?: object,
    rounding: Rounding = Rounding.ROUND_DOWN,
  ): string {
    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);
  }

  public toFixed(
    decimalPlaces: number = this.jetton.decimals,
    format?: object,
    rounding: Rounding = Rounding.ROUND_DOWN,
  ): string {
    invariant(decimalPlaces <= this.jetton.decimals, 'DECIMALS');
    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);
  }

  public toExact(format: object = { groupSeparator: '' }): string {
    Big.DP = this.jetton.decimals;
    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);
  }

  public get wrapped(): JettonAmount<Jetton> {
    if (this.jetton.isToken) return this as JettonAmount<Jetton>;
    return JettonAmount.fromFractionalAmount(this.jetton, this.numerator, this.denominator);
  }
}

================
File: src/entities/percent.ts
================
import { BigintIsh } from '../@types';
import { Rounding } from '../enums';
import { Fraction } from './fraction';

const ONE_HUNDRED = new Fraction(100n);

/**
 * Converts a fraction to a percent
 * @param fraction the fraction to convert
 */
function toPercent(fraction: Fraction): Percent {
  return new Percent(fraction.numerator, fraction.denominator);
}

export class Percent extends Fraction {
  /**
   * This boolean prevents a fraction from being interpreted as a Percent
   */
  public readonly isPercent = true as const;

  static toPercent = toPercent;

  add(other: Fraction | BigintIsh): Percent {
    return toPercent(super.add(other));
  }

  subtract(other: Fraction | BigintIsh): Percent {
    return toPercent(super.subtract(other));
  }

  multiply(other: Fraction | BigintIsh): Percent {
    return toPercent(super.multiply(other));
  }

  divide(other: Fraction | BigintIsh): Percent {
    return toPercent(super.divide(other));
  }

  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {
    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
  }

  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {
    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
  }
}

================
File: src/entities/pool.test.ts
================
import { beforeEach, describe, expect, it, beforeAll } from 'bun:test';
import { FeeAmount, TICK_SPACINGS } from '../@types';
import { NEGATIVE_ONE } from '../constants';
import { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96';
import { nearestUsableTick } from '../utils/nearestUsableTick';
import { TickMath } from '../utils/tickMath';
import { Pool } from './pool';
import { Jetton } from './jetton';
import { Address } from '@ton/core';
import { getHttpEndpoint } from '@orbs-network/ton-access';
import { TonClient } from '@ton/ton';
import { JettonAmount } from './jettonAmount';

const ONE_ETHER = 10n ** 18n;

const usdc = new Jetton('EQCF8jfV05w00abPcvsW64XNanQ9vateIhCLSkNAQ7Qfo-WW', 9, 'USDC');
const orb = new Jetton('EQCqaCb9S8wqYjPT1d18Z0f-HemRnEDm4heFyNfPKMESAIjQ', 9, 'Orbiton Swap');
const dedust = new Jetton('EQBXJHKfXkPHxs8Ex9yy8gu6DWm9_FgoPCMJfx-tZlDIm_Dk', 9, 'Dedust');

describe('Pool', () => {
  beforeAll(async () => {
    const tonClient = new TonClient({
      endpoint: await getHttpEndpoint({
        network: 'testnet',
      }),
    });
    await usdc.setWalletAddress(
      tonClient,
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
    );
    await orb.setWalletAddress(
      tonClient,
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
    );
  });

  describe('constructor', () => {
    it('fee must be integer', () => {
      expect(() => {
        return new Pool(usdc, orb, FeeAmount.MEDIUM + 0.5, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      }).toThrow('FEE');
    });

    it('fee cannot be more than 1e6', () => {
      expect(() => {
        // @ts-ignore
        return new Pool(usdc, orb, 1e6, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      }).toThrow('FEE');
    });

    it('cannot be given two of the same token', () => {
      expect(() => {
        return new Pool(usdc, usdc, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      }).toThrow('ADDRESSES');
    });

    it.skip('price must be within tick price bounds', () => {
      expect(() => {
        return new Pool(usdc, orb, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 0, 1, 50, []);
      }).toThrow('PRICE_BOUNDS');
      expect(() => {
        return new Pool(usdc, orb, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1) + 1n, 0, -1, 50, []);
      }).toThrow('PRICE_BOUNDS');
    });

    it('works with valid arguments for empty pool medium fee', () => {
      return new Pool(usdc, orb, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
    });

    it('works with valid arguments for empty pool low fee', () => {
      return new Pool(usdc, orb, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
    });

    it('works with valid arguments for empty pool lowest fee', () => {
      return new Pool(usdc, orb, FeeAmount.LOWEST, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
    });

    it('works with valid arguments for empty pool high fee', () => {
      return new Pool(usdc, orb, FeeAmount.HIGH, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
    });
  });

  describe('#token0', () => {
    it('always is the token that sorts before', () => {
      let pool = new Pool(usdc, orb, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      expect(pool.jetton0).toEqual(usdc);
      pool = new Pool(orb, usdc, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      expect(pool.jetton1).toEqual(orb);
    });
  });
  describe('#token1', () => {
    it('always is the token that sorts after', () => {
      let pool = new Pool(usdc, orb, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      expect(pool.jetton1).toEqual(orb);
      pool = new Pool(orb, usdc, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      expect(pool.jetton0).toEqual(usdc);
    });
  });

  describe('#token0Price', () => {
    it('returns price of token0 in terms of token1', () => {
      expect(
        new Pool(
          usdc,
          orb,
          FeeAmount.LOW,
          encodeSqrtRatioX96(101e9, 100e9),
          0,
          TickMath.getTickAtSqrtRatio(encodeSqrtRatioX96(101e9, 100e9)),
          50,
          [],
        ).jetton0Price.toSignificant(5),
      ).toEqual('1.01');
      expect(
        new Pool(
          orb,
          usdc,
          FeeAmount.LOW,
          encodeSqrtRatioX96(101e9, 100e9),
          0,
          TickMath.getTickAtSqrtRatio(encodeSqrtRatioX96(101e9, 100e9)),
          50,
          [],
        ).jetton0Price.toSignificant(5),
      ).toEqual('1.01');
    });
  });

  describe('#token1Price', () => {
    it('returns price of token1 in terms of token0', () => {
      expect(
        new Pool(
          usdc,
          orb,
          FeeAmount.LOW,
          encodeSqrtRatioX96(101e9, 100e9),
          0,
          TickMath.getTickAtSqrtRatio(encodeSqrtRatioX96(101e9, 100e9)),
          50,
          [],
        ).jetton1Price.toSignificant(5),
      ).toEqual('0.9901');
      expect(
        new Pool(
          orb,
          usdc,
          FeeAmount.LOW,
          encodeSqrtRatioX96(101e9, 100e9),
          0,
          TickMath.getTickAtSqrtRatio(encodeSqrtRatioX96(101e9, 100e9)),
          50,
          [],
        ).jetton1Price.toSignificant(5),
      ).toEqual('0.9901');
    });
  });

  describe('#priceOf', () => {
    const pool = new Pool(usdc, orb, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
    it('returns price of token in terms of other token', () => {
      expect(pool.priceOf(orb)).toEqual(pool.jetton1Price);
      expect(pool.priceOf(usdc)).toEqual(pool.jetton0Price);
    });

    it('throws if invalid token', () => {
      expect(() => pool.priceOf(dedust)).toThrow('TOKEN');
    });
  });

  describe('#involvesToken', () => {
    it('returns involves token', () => {
      const pool = new Pool(usdc, orb, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 0, 0, 50, []);
      expect(pool.involvesToken(usdc)).toEqual(true);
      expect(pool.involvesToken(orb)).toEqual(true);
      expect(pool.involvesToken(dedust)).toEqual(false);
    });
  });

  describe('swaps', () => {
    let pool: Pool;

    console.log(
      {
        index: nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[FeeAmount.LOW]),
        liquidityNet: ONE_ETHER,
        liquidityGross: ONE_ETHER,
      },
      {
        index: nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[FeeAmount.LOW]),
        liquidityNet: ONE_ETHER * NEGATIVE_ONE,
        liquidityGross: ONE_ETHER,
      },
    );
    beforeEach(() => {
      pool = new Pool(usdc, orb, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), ONE_ETHER, 0, 1, [
        {
          index: nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[FeeAmount.LOW]),
          liquidityNet: ONE_ETHER,
          liquidityGross: ONE_ETHER,
        },
        {
          index: nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[FeeAmount.LOW]),
          liquidityNet: ONE_ETHER * NEGATIVE_ONE,
          liquidityGross: ONE_ETHER,
        },
      ]);
    });

    describe('#getOutputAmount', () => {
      it('USDC -> DAI', async () => {
        const inputAmount = JettonAmount.fromRawAmount(orb, 100);
        const [outputAmount] = await pool.getOutputAmount(inputAmount);
        expect(outputAmount.jetton.equals(usdc)).toBe(true);
        expect(outputAmount.quotient).toEqual(98n);
      });

      it('DAI -> USDC', async () => {
        const inputAmount = JettonAmount.fromRawAmount(usdc, 100);
        const [outputAmount] = await pool.getOutputAmount(inputAmount);
        expect(outputAmount.jetton.equals(orb)).toBe(true);
        expect(outputAmount.quotient).toEqual(98n);
      });
    });

    describe('#getInputAmount', () => {
      it('USDC -> DAI', async () => {
        const outputAmount = JettonAmount.fromRawAmount(orb, 98);
        const [inputAmount] = await pool.getInputAmount(outputAmount);
        expect(inputAmount.jetton.equals(usdc)).toBe(true);
        expect(inputAmount.quotient).toEqual(100n);
      });

      it('DAI -> USDC', async () => {
        const outputAmount = JettonAmount.fromRawAmount(usdc, 98);
        const [inputAmount] = await pool.getInputAmount(outputAmount);
        expect(inputAmount.jetton.equals(orb)).toBe(true);
        expect(inputAmount.quotient).toEqual(100n);
      });
    });
  });

  describe('#bigNums', () => {
    let pool: Pool;
    const bigNum1 = BigInt(Number.MAX_SAFE_INTEGER) + 1n;
    const bigNum2 = BigInt(Number.MAX_SAFE_INTEGER) + 1n;
    beforeEach(() => {
      pool = new Pool(
        usdc,
        orb,
        FeeAmount.LOW,
        encodeSqrtRatioX96(bigNum1, bigNum2),
        ONE_ETHER,
        0,
        TICK_SPACINGS[FeeAmount.LOW],
        [
          {
            index: nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[FeeAmount.LOW]),
            liquidityNet: ONE_ETHER,
            liquidityGross: ONE_ETHER,
          },
          {
            index: nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[FeeAmount.LOW]),
            liquidityNet: ONE_ETHER * NEGATIVE_ONE,
            liquidityGross: ONE_ETHER,
          },
        ],
      );
    });

    describe('#priceLimit', () => {
      it('correctly compares two BigIntegers', async () => {
        expect(bigNum1).toEqual(bigNum2);
      });
      it('correctly handles two BigIntegers', async () => {
        const inputAmount = JettonAmount.fromRawAmount(usdc, 100);
        const [outputAmount] = await pool.getOutputAmount(inputAmount);
        pool.getInputAmount(outputAmount);
        expect(outputAmount.jetton.equals(orb)).toBe(true);
        // if output is correct, function has succeeded
      });
    });
  });
});

================
File: src/entities/pool.ts
================
/* eslint-disable operator-assignment */
import { JettonAmount, Price, Jetton } from '../entities';
import invariant from 'tiny-invariant';
import { FeeAmount, TICK_SPACINGS, BigintIsh } from '../@types';
import { NEGATIVE_ONE, ONE, Q192, ZERO } from '../constants';
import { LiquidityMath } from '../utils/liquidityMath';
import { SwapMath } from '../utils/swapMath';
import { TickMath } from '../utils/tickMath';
import { Tick, TickConstructorArgs } from './tick';
import { NoTickDataProvider, TickDataProvider } from './tickDataProvider';
import { TickListDataProvider } from './tickListDataProvider';

interface StepComputations {
  sqrtPriceStartX96: bigint;
  tickNext: number;
  initialized: boolean;
  sqrtPriceNextX96: bigint;
  amountIn: bigint;
  amountOut: bigint;
  feeAmount: bigint;
}

/**
 * By default, pools will not allow operations that require ticks.
 */
const NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider();

/**
 * Represents a V3 pool
 */
export class Pool {
  public readonly jetton0: Jetton;

  public readonly jetton1: Jetton;

  public readonly fee: FeeAmount;

  public readonly sqrtRatioX96: bigint;

  public readonly liquidity: bigint;

  public readonly tickCurrent: number;

  public readonly tickDataProvider: TickDataProvider;

  public feeProtocol?: number;

  private _jetton0Price?: Price<Jetton, Jetton>;

  private _jetton1Price?: Price<Jetton, Jetton>;

  /**
   * Construct a pool
   * @param tokenA One of the tokens in the pool
   * @param tokenB The other token in the pool
   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool
   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of jetton1 to jetton0
   * @param liquidity The current value of in range liquidity
   * @param tickCurrent The current tick of the pool
   * @param ticks The current state of the pool ticks or a data provider that can return tick data
   */
  public constructor(
    tokenA: Jetton,
    tokenB: Jetton,
    fee: FeeAmount,
    sqrtRatioX96: BigintIsh,
    liquidity: BigintIsh,
    tickCurrent: number,
    tickSpacing: number,
    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT,
  ) {
    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE');

    // Remove check for now for performance
    // const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)
    // const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)
    // invariant(
    //   bigint.greaterThanOrEqual(bigint.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&
    //     bigint.lessThanOrEqual(bigint.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),
    //   'PRICE_BOUNDS'
    // )

    // always create a copy of the list since we want the pool's tick list to be immutable
    [this.jetton0, this.jetton1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];
    this.fee = fee;
    this.sqrtRatioX96 = BigInt(sqrtRatioX96);
    this.liquidity = BigInt(liquidity);
    this.tickCurrent = tickCurrent;
    this.tickDataProvider = Array.isArray(ticks)
      ? new TickListDataProvider(ticks, tickSpacing)
      : ticks;
  }

  /**
   * Returns true if the token is either jetton0 or jetton1
   * @param token The token to check
   * @returns True if token is either jetton0 or token
   */
  public involvesToken(token: Jetton): boolean {
    return token.equals(this.jetton0) || token.equals(this.jetton1);
  }

  /**
   * Returns the current mid price of the pool in terms of jetton0, i.e. the ratio of jetton1 over jetton0
   */
  public get jetton0Price(): Price<Jetton, Jetton> {
    return (
      this._jetton0Price ??
      (this._jetton0Price = new Price(
        this.jetton0,
        this.jetton1,
        Q192,
        this.sqrtRatioX96 * this.sqrtRatioX96,
      ))
    );
  }

  /**
   * Returns the current mid price of the pool in terms of jetton1, i.e. the ratio of jetton0 over jetton1
   */
  public get jetton1Price(): Price<Jetton, Jetton> {
    return (
      this._jetton1Price ??
      (this._jetton1Price = new Price(
        this.jetton1,
        this.jetton0,
        this.sqrtRatioX96 * this.sqrtRatioX96,
        Q192,
      ))
    );
  }

  /**
   * Return the price of the given token in terms of the other token in the pool.
   * @param token The token to return price of
   * @returns The price of the given token, in terms of the other.
   */
  public priceOf(token: Jetton): Price<Jetton, Jetton> {
    invariant(this.involvesToken(token), 'TOKEN');
    return token.equals(this.jetton0) ? this.jetton0Price : this.jetton1Price;
  }

  /**
   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade
   * @param inputAmount The input amount for which to quote the output amount
   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit
   * @returns The output amount and the pool with updated state
   */
  public async getOutputAmount(
    inputAmount: JettonAmount<Jetton>,
    sqrtPriceLimitX96?: bigint,
  ): Promise<[JettonAmount<Jetton>, Pool]> {
    invariant(this.involvesToken(inputAmount.jetton), 'TOKEN');

    const zeroForOne = inputAmount.jetton.equals(this.jetton0);

    const {
      amountCalculated: outputAmount,
      sqrtRatioX96,
      liquidity,
      tickCurrent,
    } = await this.swap(zeroForOne, inputAmount.quotient, sqrtPriceLimitX96);
    const outputToken = zeroForOne ? this.jetton1 : this.jetton0;
    return [
      JettonAmount.fromRawAmount(outputToken, outputAmount * NEGATIVE_ONE),
      new Pool(
        this.jetton0,
        this.jetton1,
        this.fee as any,
        sqrtRatioX96,
        liquidity,
        tickCurrent,
        this.tickSpacing,
        this.tickDataProvider,
      ),
    ];
  }

  /**
   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade
   * @param outputAmount the output amount for which to quote the input amount
   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap
   * @returns The input amount and the pool with updated state
   */
  public async getInputAmount(
    outputAmount: JettonAmount<Jetton>,
    sqrtPriceLimitX96?: bigint,
  ): Promise<[JettonAmount<Jetton>, Pool]> {
    invariant(outputAmount.jetton.isToken && this.involvesToken(outputAmount.jetton), 'TOKEN');

    const zeroForOne = outputAmount.jetton.equals(this.jetton1);

    const {
      amountCalculated: inputAmount,
      sqrtRatioX96,
      liquidity,
      tickCurrent,
    } = await this.swap(zeroForOne, outputAmount.quotient * NEGATIVE_ONE, sqrtPriceLimitX96);

    const inputToken = zeroForOne ? this.jetton0 : this.jetton1;
    return [
      JettonAmount.fromRawAmount(inputToken, inputAmount),
      new Pool(
        this.jetton0,
        this.jetton1,
        this.fee as any,
        sqrtRatioX96,
        liquidity,
        tickCurrent,
        this.tickSpacing,
        this.tickDataProvider,
      ),
    ];
  }

  /**
   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade
   * @param outputAmount the output amount for which to quote the input amount
   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap
   * @returns The input amount and the pool with updated state
   */
  public async getInputAmountByExactOut(
    outputAmount: JettonAmount<Jetton>,
    sqrtPriceLimitX96?: bigint,
  ): Promise<[JettonAmount<Jetton>, Pool]> {
    invariant(outputAmount.jetton.isToken && this.involvesToken(outputAmount.jetton), 'TOKEN');

    const zeroForOne = outputAmount.jetton.equals(this.jetton1);

    const {
      amountSpecifiedRemaining,
      amountCalculated: inputAmount,
      sqrtRatioX96,
      liquidity,
      tickCurrent,
    } = await this.swap(zeroForOne, outputAmount.quotient * NEGATIVE_ONE, sqrtPriceLimitX96);

    invariant(amountSpecifiedRemaining === 0n, 'INSUFFICIENT_LIQUIDITY');

    const inputToken = zeroForOne ? this.jetton0 : this.jetton1;
    return [
      JettonAmount.fromRawAmount(inputToken, inputAmount),
      new Pool(
        this.jetton0,
        this.jetton1,
        this.fee,
        sqrtRatioX96,
        liquidity,
        tickCurrent,
        this.tickSpacing,
        this.tickDataProvider,
      ),
    ];
  }

  /**
   * Executes a swap
   * @param zeroForOne Whether the amount in is jetton0 or jetton1
   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap
   * @returns amountCalculated
   * @returns sqrtRatioX96
   * @returns liquidity
   * @returns tickCurrent
   */
  private async swap(
    zeroForOne: boolean,
    amountSpecified: bigint,
    sqrtPriceLimitX96?: bigint,
  ): Promise<{
    amountCalculated: bigint;
    sqrtRatioX96: bigint;
    liquidity: bigint;
    tickCurrent: number;
    amountSpecifiedRemaining: bigint;
  }> {
    if (!sqrtPriceLimitX96)
      sqrtPriceLimitX96 = zeroForOne
        ? TickMath.MIN_SQRT_RATIO + ONE
        : TickMath.MAX_SQRT_RATIO - ONE;

    if (zeroForOne) {
      invariant(sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO, 'RATIO_MIN');
      invariant(sqrtPriceLimitX96 < this.sqrtRatioX96, 'RATIO_CURRENT');
    } else {
      invariant(sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO, 'RATIO_MAX');
      invariant(sqrtPriceLimitX96 > this.sqrtRatioX96, 'RATIO_CURRENT');
    }

    const exactInput = amountSpecified >= ZERO;

    // keep track of swap state

    const state = {
      amountSpecifiedRemaining: amountSpecified,
      amountCalculated: ZERO,
      sqrtPriceX96: this.sqrtRatioX96,
      tick: this.tickCurrent,
      liquidity: this.liquidity,
    };

    // start swap while loop
    while (state.amountSpecifiedRemaining !== ZERO && state.sqrtPriceX96 != sqrtPriceLimitX96) {
      const step: Partial<StepComputations> = {};
      step.sqrtPriceStartX96 = state.sqrtPriceX96;

      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)
      // by simply traversing to the next available tick, we instead need to exactly replicate
      // tickBitmap.nextInitializedTickWithinOneWord
      [step.tickNext, step.initialized] =
        await this.tickDataProvider.nextInitializedTickWithinOneWord(
          state.tick,
          zeroForOne,
          this.tickSpacing,
        );

      if (step.tickNext < TickMath.MIN_TICK) {
        step.tickNext = TickMath.MIN_TICK;
      } else if (step.tickNext > TickMath.MAX_TICK) {
        step.tickNext = TickMath.MAX_TICK;
      }

      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);
      [state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] =
        SwapMath.computeSwapStep(
          state.sqrtPriceX96,
          (
            zeroForOne
              ? step.sqrtPriceNextX96 < sqrtPriceLimitX96
              : step.sqrtPriceNextX96 > sqrtPriceLimitX96
          )
            ? sqrtPriceLimitX96
            : step.sqrtPriceNextX96,
          state.liquidity,
          state.amountSpecifiedRemaining,
          this.fee,
        );
      if (exactInput) {
        state.amountSpecifiedRemaining =
          state.amountSpecifiedRemaining - (step.amountIn! + step.feeAmount!);
        state.amountCalculated = state.amountCalculated! - step.amountOut!;
      } else {
        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining! + step.amountOut!;
        state.amountCalculated = state.amountCalculated! + (step.amountIn! + step.feeAmount!);
      }

      // TODO
      if (state.sqrtPriceX96 === step.sqrtPriceNextX96) {
        // if the tick is initialized, run the tick transition
        if (step.initialized) {
          let liquidityNet = BigInt(
            (await this.tickDataProvider.getTick(step.tickNext)).liquidityNet,
          );
          // if we're moving leftward, we interpret liquidityNet as the opposite sign
          // safe because liquidityNet cannot be type(int128).min
          if (zeroForOne) liquidityNet = liquidityNet * NEGATIVE_ONE;

          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);
        }

        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;
      } else if (state.sqrtPriceX96 !== step.sqrtPriceStartX96) {
        // updated comparison function
        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved
        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);
      }
    }

    return {
      amountSpecifiedRemaining: state.amountSpecifiedRemaining,
      amountCalculated: state.amountCalculated,
      sqrtRatioX96: state.sqrtPriceX96,
      liquidity: state.liquidity,
      tickCurrent: state.tick,
    };
  }

  public get tickSpacing(): number {
    return TICK_SPACINGS[this.fee];
  }
}

================
File: src/entities/position.test.ts
================
import { describe, expect, it, beforeAll } from 'bun:test';
import { FeeAmount, TICK_SPACINGS } from '../@types';
import { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96';
import { nearestUsableTick } from '../utils/nearestUsableTick';
import { TickMath } from '../utils/tickMath';
import { Pool } from './pool';
import { Position } from './position';
import { Jetton } from './jetton';
import { Percent } from './percent';
import { Address, TonClient } from '@ton/ton';
import { getHttpEndpoint } from '@orbs-network/ton-access';

const usdc = new Jetton('EQCF8jfV05w00abPcvsW64XNanQ9vateIhCLSkNAQ7Qfo-WW', 6, 'USDC');
const orb = new Jetton('EQCqaCb9S8wqYjPT1d18Z0f-HemRnEDm4heFyNfPKMESAIjQ', 18, 'Orbiton Swap');

describe('Position', () => {
  let POOL_SQRT_RATIO_START: bigint;
  let POOL_TICK_CURRENT: number;
  let TICK_SPACING: number;
  let ORB_USDC_POOL: Pool;

  beforeAll(async () => {
    const tonClient = new TonClient({
      endpoint: await getHttpEndpoint({
        network: 'testnet',
      }),
    });
    await usdc.setWalletAddress(
      tonClient,
      Address.parse('UQAW5Tsp2mMja-syAH_jw9j7a4dFICcaHHcq8xu0k-_YzpIW'),
    );
    await orb.setWalletAddress(
      tonClient,
      Address.parse('UQAW5Tsp2mMja-syAH_jw9j7a4dFICcaHHcq8xu0k-_YzpIW'),
    ); // with this address we will have correct order as test of pancakeswap

    POOL_SQRT_RATIO_START = encodeSqrtRatioX96(100e6, 100e18);
    POOL_TICK_CURRENT = TickMath.getTickAtSqrtRatio(POOL_SQRT_RATIO_START);
    TICK_SPACING = TICK_SPACINGS[FeeAmount.LOW];
    ORB_USDC_POOL = new Pool(
      orb,
      usdc,
      FeeAmount.LOW,
      POOL_SQRT_RATIO_START,
      0,
      POOL_TICK_CURRENT,
      TICK_SPACINGS[FeeAmount.LOW],
    );
  });

  it('can be constructed around 0 tick', () => {
    const position = new Position({
      pool: ORB_USDC_POOL,
      liquidity: 1,
      tickLower: -10,
      tickUpper: 10,
    });
    expect(position.liquidity).toEqual(1n);
  });

  it('can use min and max ticks', () => {
    const position = new Position({
      pool: ORB_USDC_POOL,
      liquidity: 1,
      tickLower: nearestUsableTick(TickMath.MIN_TICK, TICK_SPACING),
      tickUpper: nearestUsableTick(TickMath.MAX_TICK, TICK_SPACING),
    });
    expect(position.liquidity).toEqual(1n);
  });

  it('tick lower must be less than tick upper', () => {
    expect(
      () =>
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 1,
          tickLower: 10,
          tickUpper: -10,
        }),
    ).toThrow('TICK_ORDER');
  });

  it('tick lower cannot equal tick upper', () => {
    expect(
      () =>
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 1,
          tickLower: -10,
          tickUpper: -10,
        }),
    ).toThrow('TICK_ORDER');
  });

  it('tick lower must be multiple of tick spacing', () => {
    expect(
      () =>
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 1,
          tickLower: -5,
          tickUpper: 10,
        }),
    ).toThrow('TICK_LOWER');
  });

  it('tick lower must be greater than MIN_TICK', () => {
    expect(
      () =>
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 1,
          tickLower: nearestUsableTick(TickMath.MIN_TICK, TICK_SPACING) - TICK_SPACING,
          tickUpper: 10,
        }),
    ).toThrow('TICK_LOWER');
  });

  it('tick upper must be multiple of tick spacing', () => {
    expect(
      () =>
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 1,
          tickLower: -10,
          tickUpper: 15,
        }),
    ).toThrow('TICK_UPPER');
  });

  it('tick upper must be less than MAX_TICK', () => {
    expect(
      () =>
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 1,
          tickLower: -10,
          tickUpper: nearestUsableTick(TickMath.MAX_TICK, TICK_SPACING) + TICK_SPACING,
        }),
    ).toThrow('TICK_UPPER');
  });

  describe('#amount0', () => {
    it('is correct for price above', () => {
      expect(
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e12,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        }).amount0.quotient.toString(),
      ).toEqual('49949961958869841');
    });
    it('is correct for price below', () => {
      expect(
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
        }).amount0.quotient.toString(),
      ).toEqual('0');
    });
    it('is correct for in-range position', () => {
      expect(
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        }).amount0.quotient.toString(),
      ).toEqual('120054069145287995769396');
    });
  });

  describe('#amount1', () => {
    it('is correct for price above', () => {
      expect(
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        }).amount1.quotient.toString(),
      ).toEqual('0');
    });
    it('is correct for price below', () => {
      expect(
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
        }).amount1.quotient.toString(),
      ).toEqual('49970077052');
    });
    it('is correct for in-range position', () => {
      expect(
        new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        }).amount1.quotient.toString(),
      ).toEqual('79831926242');
    });
  });

  describe('#mintAmountsWithSlippage', () => {
    describe('0 slippage', () => {
      const slippageTolerance = new Percent(0);

      it('is correct for positions below', () => {
        const position = new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        });

        const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('49949961958869841738198');
        expect(amount1.toString()).toEqual('0');
      });

      it('is correct for positions above', () => {
        const position = new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
        });

        const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('0');
        expect(amount1.toString()).toEqual('49970077053');
      });

      it('is correct for positions within', () => {
        const position = new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        });

        const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('120054069145287995740584');
        expect(amount1.toString()).toEqual('79831926243');
      });
    });

    describe('.05% slippage', () => {
      const slippageTolerance = new Percent(5, 10000);

      it('is correct for positions below', () => {
        const position = new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        });

        const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('49949961958869841738198');
        expect(amount1.toString()).toEqual('0');
      });

      it('is correct for positions above', () => {
        const position = new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
        });

        const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('0');
        expect(amount1.toString()).toEqual('49970077053');
      });

      it('is correct for positions within', () => {
        const position = new Position({
          pool: ORB_USDC_POOL,
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        });

        const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('95063440240746211432007');
        expect(amount1.toString()).toEqual('54828800461');
      });
    });

    describe('5% slippage tolerance', () => {
      const slippageTolerance = new Percent(5, 100);

      it('is correct for pool at min price', () => {
        const position = new Position({
          pool: new Pool(
            orb,
            usdc,
            FeeAmount.LOW,
            TickMath.MIN_SQRT_RATIO,
            0,
            TickMath.MIN_TICK,
            TICK_SPACINGS[FeeAmount.LOW],
            [],
          ),
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        });

        const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('49949961958869841754181');
        expect(amount1.toString()).toEqual('0');
      });

      it('is correct for pool at max price', () => {
        const position = new Position({
          pool: new Pool(
            orb,
            usdc,
            FeeAmount.LOW,
            TickMath.MAX_SQRT_RATIO - 1n,
            0,
            TickMath.MAX_TICK - 1,
            TICK_SPACINGS[FeeAmount.LOW],
          ),
          liquidity: 100e18,
          tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
          tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
        });

        const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
        expect(amount0.toString()).toEqual('0');
        expect(amount1.toString()).toEqual('50045084659');
      });
    });
  });

  // describe('#burnAmountsWithSlippage', () => {
  //   describe('0 slippage', () => {
  //     const slippageTolerance = new Percent(0);

  //     it('is correct for positions below', () => {
  //       const position = new Position({
  //         pool: ORB_USDC_POOL,
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //       });

  //       const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('49949961958869841754181');
  //       expect(amount1.toString()).toEqual('0');
  //     });

  //     it('is correct for positions above', () => {
  //       const position = new Position({
  //         pool: ORB_USDC_POOL,
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
  //       });

  //       const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('0');
  //       expect(amount1.toString()).toEqual('49970077052');
  //     });

  //     it('is correct for positions within', () => {
  //       const position = new Position({
  //         pool: ORB_USDC_POOL,
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //       });

  //       const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('120054069145287995769396');
  //       expect(amount1.toString()).toEqual('79831926242');
  //     });
  //   });

  //   describe('.05% slippage', () => {
  //     const slippageTolerance = new Percent(5, 10000);

  //     it('is correct for positions below', () => {
  //       const position = new Position({
  //         pool: ORB_USDC_POOL,
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //       });
  //       const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('49949961958869841754181');
  //       expect(amount1.toString()).toEqual('0');
  //     });

  //     it('is correct for positions above', () => {
  //       const position = new Position({
  //         pool: ORB_USDC_POOL,
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
  //       });
  //       const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('0');
  //       expect(amount1.toString()).toEqual('49970077052');
  //     });

  //     it('is correct for positions within', () => {
  //       const position = new Position({
  //         pool: ORB_USDC_POOL,
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //       });
  //       const { amount0, amount1 } = position.burnAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('95063440240746211454822');
  //       expect(amount1.toString()).toEqual('54828800460');
  //     });
  //   });

  //   describe('5% slippage tolerance', () => {
  //     const slippageTolerance = new Percent(5, 100);

  //     it('is correct for pool at min price', () => {
  //       const position = new Position({
  //         pool: new Pool(
  //           orb,
  //           usdc,
  //           FeeAmount.LOW,
  //           TickMath.MIN_SQRT_RATIO,
  //           0,
  //           TickMath.MIN_TICK,
  //           TICK_SPACINGS[FeeAmount.LOW],
  //         ),
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //       });

  //       const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('49949961958869841738198');
  //       expect(amount1.toString()).toEqual('0');
  //     });

  //     it('is correct for pool at max price', () => {
  //       const position = new Position({
  //         pool: new Pool(
  //           orb,
  //           usdc,
  //           FeeAmount.LOW,
  //           TickMath.MAX_SQRT_RATIO - 1n,
  //           0,
  //           TickMath.MAX_TICK - 1,
  //           TICK_SPACINGS[FeeAmount.LOW],
  //         ),
  //         liquidity: 100e18,
  //         tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
  //         tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //       });

  //       const { amount0, amount1 } = position.mintAmountsWithSlippage(slippageTolerance);
  //       expect(amount0.toString()).toEqual('0');
  //       expect(amount1.toString()).toEqual('50045084660');
  //     });
  //   });
  // });

  // describe('#mintAmounts', () => {
  //   it('is correct for price above', () => {
  //     const { amount0, amount1 } = new Position({
  //       pool: ORB_USDC_POOL,
  //       liquidity: 100e18,
  //       tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING,
  //       tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //     }).mintAmounts;
  //     expect(amount0.toString()).toEqual('49949961958869841754182');
  //     expect(amount1.toString()).toEqual('0');
  //   });
  //   it('is correct for price below', () => {
  //     const { amount0, amount1 } = new Position({
  //       pool: ORB_USDC_POOL,
  //       liquidity: 100e18,
  //       tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
  //       tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING,
  //     }).mintAmounts;
  //     expect(amount0.toString()).toEqual('0');
  //     expect(amount1.toString()).toEqual('49970077053');
  //   });
  //   it('is correct for in-range position', () => {
  //     const { amount0, amount1 } = new Position({
  //       pool: ORB_USDC_POOL,
  //       liquidity: 100e18,
  //       tickLower: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) - TICK_SPACING * 2,
  //       tickUpper: nearestUsableTick(POOL_TICK_CURRENT, TICK_SPACING) + TICK_SPACING * 2,
  //     }).mintAmounts;
  //     // note these are rounded up
  //     expect(amount0.toString()).toEqual('120054069145287995769397');
  //     expect(amount1.toString()).toEqual('79831926243');
  //   });
  // });
});

================
File: src/entities/position.ts
================
import invariant from 'tiny-invariant';
import { ZERO, MaxUint256 } from '../constants';
import { BigintIsh } from '../@types';
import { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96';
import { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts';
import { PositionMath } from '../utils/positionMath';
import { tickToPrice } from '../utils/priceTickConversions';
import { SqrtPriceMath } from '../utils/sqrtPriceMath';
import { TickMath } from '../utils/tickMath';
import { Pool } from './pool';
import { JettonAmount } from './jettonAmount';
import { Jetton } from './jetton';
import { Price } from './price';
import { Percent } from './percent';

interface PositionConstructorArgs {
  pool: Pool;
  tickLower: number;
  tickUpper: number;
  liquidity: BigintIsh;
}

/**
 * Represents a position on a Pancake V3 Pool
 */
export class Position {
  public readonly pool: Pool;

  public readonly tickLower: number;

  public readonly tickUpper: number;

  public readonly liquidity: bigint;

  // cached resuts for the getters
  private _token0Amount: JettonAmount<Jetton> | null = null;

  private _token1Amount: JettonAmount<Jetton> | null = null;

  private _mintAmounts: Readonly<{ amount0: bigint; amount1: bigint }> | null = null;

  /**
   * Constructs a position for a given pool with the given liquidity
   * @param pool For which pool the liquidity is assigned
   * @param liquidity The amount of liquidity that is in the position
   * @param tickLower The lower tick of the position
   * @param tickUpper The upper tick of the position
   */
  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {
    invariant(tickLower < tickUpper, 'TICK_ORDER');
    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER');
    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER');

    this.pool = pool;
    this.tickLower = tickLower;
    this.tickUpper = tickUpper;
    this.liquidity = BigInt(liquidity);
  }

  /**
   * Returns the price of token0 at the lower tick
   */
  public get jetton0PriceLower(): Price<Jetton, Jetton> {
    return tickToPrice(this.pool.jetton0, this.pool.jetton1, this.tickLower);
  }

  /**
   * Returns the price of token0 at the upper tick
   */
  public get jetton0PriceUpper(): Price<Jetton, Jetton> {
    return tickToPrice(this.pool.jetton0, this.pool.jetton1, this.tickUpper);
  }

  /**
   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price
   */
  public get amount0(): JettonAmount<Jetton> {
    if (this._token0Amount === null) {
      this._token0Amount = JettonAmount.fromRawAmount(
        this.pool.jetton0,
        PositionMath.getToken0Amount(
          this.pool.tickCurrent,
          this.tickLower,
          this.tickUpper,
          this.pool.sqrtRatioX96,
          this.liquidity,
        ),
      );
    }
    return this._token0Amount;
  }

  /**
   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price
   */
  public get amount1(): JettonAmount<Jetton> {
    if (this._token1Amount === null) {
      this._token1Amount = JettonAmount.fromRawAmount(
        this.pool.jetton1,
        PositionMath.getToken1Amount(
          this.pool.tickCurrent,
          this.tickLower,
          this.tickUpper,
          this.pool.sqrtRatioX96,
          this.liquidity,
        ),
      );
    }
    return this._token1Amount;
  }

  /**
   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage
   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert
   * @returns The sqrt ratios after slippage
   */
  private ratiosAfterSlippage(slippageTolerance: Percent): {
    sqrtRatioX96Lower: bigint;
    sqrtRatioX96Upper: bigint;
  } {
    const priceLower = this.pool.jetton0Price.asFraction.multiply(
      new Percent(1).subtract(slippageTolerance),
    );
    const priceUpper = this.pool.jetton0Price.asFraction.multiply(slippageTolerance.add(1));
    let sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator);
    if (sqrtRatioX96Lower <= TickMath.MIN_SQRT_RATIO) {
      sqrtRatioX96Lower = TickMath.MIN_SQRT_RATIO + 1n;
    }
    let sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator);
    if (sqrtRatioX96Upper >= TickMath.MAX_SQRT_RATIO) {
      sqrtRatioX96Upper = TickMath.MAX_SQRT_RATIO - 1n;
    }
    return {
      sqrtRatioX96Lower,
      sqrtRatioX96Upper,
    };
  }

  /**
   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position
   * with the given slippage tolerance
   * @param slippageTolerance Tolerance of unfavorable slippage from the current price
   * @returns The amounts, with slippage
   */
  public mintAmountsWithSlippage(
    slippageTolerance: Percent,
  ): Readonly<{ amount0: bigint; amount1: bigint }> {
    // get lower/upper prices
    let { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance);

    // construct counterfactual pools
    const poolLower = new Pool(
      this.pool.jetton0,
      this.pool.jetton1,
      this.pool.fee,
      sqrtRatioX96Lower,
      0 /* liquidity doesn't matter */,
      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower),
      this.pool.tickSpacing,
    );
    const poolUpper = new Pool(
      this.pool.jetton0,
      this.pool.jetton1,
      this.pool.fee,
      sqrtRatioX96Upper,
      0 /* liquidity doesn't matter */,
      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper),
      this.pool.tickSpacing,
    );

    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)
    const positionThatWillBeCreated = Position.fromAmounts({
      pool: this.pool,
      tickLower: this.tickLower,
      tickUpper: this.tickUpper,
      ...this.mintAmounts, // the mint amounts are what will be passed as calldata
      useFullPrecision: false,
    });

    // we want the smaller amounts...
    // ...which occurs at the upper price for amount0...
    const { amount0 } = new Position({
      pool: poolUpper,
      liquidity: positionThatWillBeCreated.liquidity,
      tickLower: this.tickLower,
      tickUpper: this.tickUpper,
    }).mintAmounts;
    // ...and the lower for amount1
    const { amount1 } = new Position({
      pool: poolLower,
      liquidity: positionThatWillBeCreated.liquidity,
      tickLower: this.tickLower,
      tickUpper: this.tickUpper,
    }).mintAmounts;

    return { amount0, amount1 };
  }

  /**
   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the
   * position with the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the current price
   * @returns The amounts, with slippage
   */
  public burnAmountsWithSlippage(
    slippageTolerance: Percent,
  ): Readonly<{ amount0: bigint; amount1: bigint }> {
    // get lower/upper prices
    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance);

    // construct counterfactual pools
    const poolLower = new Pool(
      this.pool.jetton0,
      this.pool.jetton1,
      this.pool.fee,
      sqrtRatioX96Lower,
      0 /* liquidity doesn't matter */,
      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower),
      this.pool.tickSpacing,
    );
    const poolUpper = new Pool(
      this.pool.jetton0,
      this.pool.jetton1,
      this.pool.fee,
      sqrtRatioX96Upper,
      0 /* liquidity doesn't matter */,
      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper),
      this.pool.tickSpacing,
    );

    // we want the smaller amounts...
    // ...which occurs at the upper price for amount0...
    const { amount0 } = new Position({
      pool: poolUpper,
      liquidity: this.liquidity,
      tickLower: this.tickLower,
      tickUpper: this.tickUpper,
    });
    // ...and the lower for amount1
    const { amount1 } = new Position({
      pool: poolLower,
      liquidity: this.liquidity,
      tickLower: this.tickLower,
      tickUpper: this.tickUpper,
    });

    return { amount0: amount0.quotient, amount1: amount1.quotient };
  }

  /**
   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at
   * the current price for the pool
   */
  public get mintAmounts(): Readonly<{ amount0: bigint; amount1: bigint }> {
    if (this._mintAmounts === null) {
      if (this.pool.tickCurrent < this.tickLower) {
        return {
          amount0: SqrtPriceMath.getAmount0Delta(
            TickMath.getSqrtRatioAtTick(this.tickLower),
            TickMath.getSqrtRatioAtTick(this.tickUpper),
            this.liquidity,
            true,
          ),
          amount1: ZERO,
        };
      }
      if (this.pool.tickCurrent < this.tickUpper) {
        return {
          amount0: SqrtPriceMath.getAmount0Delta(
            this.pool.sqrtRatioX96,
            TickMath.getSqrtRatioAtTick(this.tickUpper),
            this.liquidity,
            true,
          ),
          amount1: SqrtPriceMath.getAmount1Delta(
            TickMath.getSqrtRatioAtTick(this.tickLower),
            this.pool.sqrtRatioX96,
            this.liquidity,
            true,
          ),
        };
      }
      return {
        amount0: ZERO,
        amount1: SqrtPriceMath.getAmount1Delta(
          TickMath.getSqrtRatioAtTick(this.tickLower),
          TickMath.getSqrtRatioAtTick(this.tickUpper),
          this.liquidity,
          true,
        ),
      };
    }
    return this._mintAmounts;
  }

  /**
   * Computes the maximum amount of liquidity received for a given amount of token0, token1,
   * and the prices at the tick boundaries.
   * @param pool The pool for which the position should be created
   * @param tickLower The lower tick of the position
   * @param tickUpper The upper tick of the position
   * @param amount0 token0 amount
   * @param amount1 token1 amount
   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,
   * not what core can theoretically support
   * @returns The amount of liquidity for the position
   */
  public static fromAmounts({
    pool,
    tickLower,
    tickUpper,
    amount0,
    amount1,
    useFullPrecision,
  }: {
    pool: Pool;
    tickLower: number;
    tickUpper: number;
    amount0: BigintIsh;
    amount1: BigintIsh;
    useFullPrecision: boolean;
  }) {
    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);
    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);
    return new Position({
      pool,
      tickLower,
      tickUpper,
      liquidity: maxLiquidityForAmounts(
        pool.sqrtRatioX96,
        sqrtRatioAX96,
        sqrtRatioBX96,
        amount0,
        amount1,
        useFullPrecision,
      ),
    });
  }

  /**
   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1
   * @param pool The pool for which the position is created
   * @param tickLower The lower tick
   * @param tickUpper The upper tick
   * @param amount0 The desired amount of token0
   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,
   * not what core can theoretically support
   * @returns The position
   */
  public static fromAmount0({
    pool,
    tickLower,
    tickUpper,
    amount0,
    useFullPrecision,
  }: {
    pool: Pool;
    tickLower: number;
    tickUpper: number;
    amount0: BigintIsh;
    useFullPrecision: boolean;
  }) {
    return Position.fromAmounts({
      pool,
      tickLower,
      tickUpper,
      amount0,
      amount1: MaxUint256,
      useFullPrecision,
    });
  }

  /**
   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0
   * @param pool The pool for which the position is created
   * @param tickLower The lower tick
   * @param tickUpper The upper tick
   * @param amount1 The desired amount of token1
   * @returns The position
   */
  public static fromAmount1({
    pool,
    tickLower,
    tickUpper,
    amount1,
  }: {
    pool: Pool;
    tickLower: number;
    tickUpper: number;
    amount1: BigintIsh;
  }) {
    // this function always uses full precision,
    return Position.fromAmounts({
      pool,
      tickLower,
      tickUpper,
      amount0: MaxUint256,
      amount1,
      useFullPrecision: true,
    });
  }
}

================
File: src/entities/price.ts
================
import invariant from 'tiny-invariant';

import { BigintIsh, Rounding } from '../@types';
import { Jetton } from './jetton';
import { Fraction } from './fraction';
import { JettonAmount } from './jettonAmount';

export class Price<TBase extends Jetton, TQuote extends Jetton> extends Fraction {
  public readonly baseJetton: TBase; // input i.e. denominator

  public readonly quoteJetton: TQuote; // output i.e. numerator

  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token

  /**
   * Construct a price, either with the base and quote currency amount, or the
   * @param args
   */
  public constructor(
    ...args:
      | [TBase, TQuote, BigintIsh, BigintIsh]
      | [{ baseAmount: JettonAmount<TBase>; quoteAmount: JettonAmount<TQuote> }]
  ) {
    let baseJetton: TBase;
    let quoteJetton: TQuote;
    let denominator: BigintIsh;
    let numerator: BigintIsh;

    if (args.length === 4) {
      // eslint-disable-next-line @typescript-eslint/no-extra-semi
      [baseJetton, quoteJetton, denominator, numerator] = args;
    } else {
      const result = args[0].quoteAmount.divide(args[0].baseAmount);
      [baseJetton, quoteJetton, denominator, numerator] = [
        args[0].baseAmount.jetton,
        args[0].quoteAmount.jetton,
        result.denominator,
        result.numerator,
      ];
    }
    super(numerator, denominator);

    this.baseJetton = baseJetton;
    this.quoteJetton = quoteJetton;
    this.scalar = new Fraction(
      10n ** BigInt(baseJetton.decimals),
      10n ** BigInt(quoteJetton.decimals),
    );
  }

  /**
   * Flip the price, switching the base and quote currency
   */
  public invert(): Price<TQuote, TBase> {
    return new Price(this.quoteJetton, this.baseJetton, this.numerator, this.denominator);
  }

  /**
   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency
   * @param other the other price
   */
  public multiply<TOtherQuote extends Jetton>(
    other: Price<TQuote, TOtherQuote>,
  ): Price<TBase, TOtherQuote> {
    invariant(this.quoteJetton.equals(other.baseJetton), 'TOKEN');
    const fraction = super.multiply(other);
    return new Price(this.baseJetton, other.quoteJetton, fraction.denominator, fraction.numerator);
  }

  /**
   * Return the amount of quote currency corresponding to a given amount of the base currency
   * @param currencyAmount the amount of base currency to quote against the price
   */
  public quote(currencyAmount: JettonAmount<TBase>): JettonAmount<TQuote> {
    invariant(currencyAmount.jetton.equals(this.baseJetton), 'TOKEN');
    const result = super.multiply(currencyAmount);
    return JettonAmount.fromFractionalAmount(
      this.quoteJetton,
      result.numerator,
      result.denominator,
    );
  }

  /**
   * Get the value scaled by decimals for formatting
   * @private
   */
  private get adjustedForDecimals(): Fraction {
    return super.multiply(this.scalar);
  }

  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {
    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);
  }

  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {
    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);
  }

  public get wrapped(): Price<Jetton, Jetton> {
    return new Price(
      this.baseJetton.wrapped,
      this.quoteJetton.wrapped,
      this.denominator,
      this.numerator,
    );
  }
}

================
File: src/entities/tick.test.ts
================
import { describe, expect, it } from 'bun:test';
import { TickMath } from '../utils/tickMath';
import { Tick } from './tick';

describe('Tick', () => {
  describe('constructor', () => {
    it('throws if tick is below min tick', () => {
      expect(
        () => new Tick({ index: TickMath.MIN_TICK - 1, liquidityGross: 0, liquidityNet: 0 }),
      ).toThrow('TICK');
    });

    it('throws if tick is above max tick', () => {
      expect(
        () => new Tick({ index: TickMath.MAX_TICK + 1, liquidityGross: 0, liquidityNet: 0 }),
      ).toThrow('TICK');
    });
  });
});

================
File: src/entities/tick.ts
================
import invariant from 'tiny-invariant';
import { BigintIsh } from '../@types';
import { TickMath } from '../utils/tickMath';

export interface TickConstructorArgs {
  index: number;
  liquidityGross: BigintIsh;
  liquidityNet: BigintIsh;
}

export class Tick {
  public readonly index: number;
  public readonly liquidityGross: bigint;
  public readonly liquidityNet: bigint;

  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {
    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK');
    this.index = index;
    this.liquidityGross = BigInt(liquidityGross);
    this.liquidityNet = BigInt(liquidityNet);
  }
}

================
File: src/entities/tickDataProvider.test.ts
================
import { describe, expect, it } from 'bun:test';
import { NoTickDataProvider } from './tickDataProvider';

describe('TickDataProvider', () => {
  describe('NoTickDataProvider', () => {
    const provider = new NoTickDataProvider();
    it('throws on getTick', () => {
      expect(provider.getTick(0)).rejects.toThrow('No tick data provider was given');
    });
    it('throws on nextInitializedTickWithinOneWord', () => {
      expect(provider.nextInitializedTickWithinOneWord(0, false, 1)).rejects.toThrow(
        'No tick data provider was given',
      );
    });
  });
});

================
File: src/entities/tickDataProvider.ts
================
import { BigintIsh } from '../@types';

/**
 * Provides information about ticks
 */
export interface TickDataProvider {
  /**
   * Return information corresponding to a specific tick
   * @param tick the tick to load
   */
  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>;

  /**
   * Return the next tick that is initialized within a single word
   * @param tick The current tick
   * @param lte Whether the next tick should be lte the current tick
   * @param tickSpacing The tick spacing of the pool
   */
  nextInitializedTickWithinOneWord(
    tick: number,
    lte: boolean,
    tickSpacing: number,
  ): Promise<[number, boolean]>;
}

/**
 * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you
 * do not need to load tick data for your use case.
 */
export class NoTickDataProvider implements TickDataProvider {
  private static ERROR_MESSAGE = 'No tick data provider was given';

  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {
    throw new Error(NoTickDataProvider.ERROR_MESSAGE);
  }

  async nextInitializedTickWithinOneWord(
    _tick: number,
    _lte: boolean,
    _tickSpacing: number,
  ): Promise<[number, boolean]> {
    throw new Error(NoTickDataProvider.ERROR_MESSAGE);
  }
}

================
File: src/entities/tickListDataProvider.test.ts
================
import { TickListDataProvider } from './tickListDataProvider';
import { describe, it, expect } from 'bun:test';

describe('TickListDataProvider', () => {
  describe('constructor', () => {
    it('can take an empty list of ticks', () => {
      new TickListDataProvider([], 1);
    });
    it('throws for 0 tick spacing', () => {
      expect(() => new TickListDataProvider([], 0)).toThrow('TICK_SPACING_NONZERO');
    });
    it('throws for uneven tick list', async () => {
      await expect(
        () =>
          new TickListDataProvider(
            [
              { index: -1, liquidityNet: -1, liquidityGross: 1 },
              { index: 1, liquidityNet: 2, liquidityGross: 1 },
            ],
            1,
          ),
      ).toThrow('ZERO_NET');
    });
  });
  describe('#getTick', () => {
    it('throws if tick not in list', async () => {
      const provider = new TickListDataProvider(
        [
          { index: -1, liquidityNet: -1, liquidityGross: 1 },
          { index: 1, liquidityNet: 1, liquidityGross: 1 },
        ],
        1,
      );
      await expect(provider.getTick(0)).rejects.toThrow('NOT_CONTAINED');
    });
    it('gets the smallest tick from the list', async () => {
      const provider = new TickListDataProvider(
        [
          { index: -1, liquidityNet: -1, liquidityGross: 1 },
          { index: 1, liquidityNet: 1, liquidityGross: 1 },
        ],
        1,
      );
      const { liquidityNet, liquidityGross } = await provider.getTick(-1);
      expect(liquidityNet).toEqual(BigInt(-1));
      expect(liquidityGross).toEqual(BigInt(1));
    });
    it('gets the largest tick from the list', async () => {
      const provider = new TickListDataProvider(
        [
          { index: -1, liquidityNet: -1, liquidityGross: 1 },
          { index: 1, liquidityNet: 1, liquidityGross: 1 },
        ],
        1,
      );
      const { liquidityNet, liquidityGross } = await provider.getTick(1);
      expect(liquidityNet).toEqual(BigInt(1));
      expect(liquidityGross).toEqual(BigInt(1));
    });
  });
});

================
File: src/entities/tickListDataProvider.ts
================
import { BigintIsh } from '../@types';
import { TickList } from '../utils/tickList';
import { Tick, TickConstructorArgs } from './tick';
import { TickDataProvider } from './tickDataProvider';

/**
 * A data provider for ticks that is backed by an in-memory array of ticks.
 */
export class TickListDataProvider implements TickDataProvider {
  private ticks: readonly Tick[];

  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {
    const ticksMapped: Tick[] = ticks.map((t) => (t instanceof Tick ? t : new Tick(t)));
    TickList.validateList(ticksMapped, tickSpacing);
    this.ticks = ticksMapped;
  }

  async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {
    return TickList.getTick(this.ticks, tick);
  }

  async nextInitializedTickWithinOneWord(
    tick: number,
    lte: boolean,
    tickSpacing: number,
  ): Promise<[number, boolean]> {
    return TickList.nextInitializedTickWithinOneWord(this.ticks, tick, lte, tickSpacing);
  }
}

================
File: src/enums/index.ts
================
export * from './rounding';

================
File: src/enums/rounding.ts
================
export enum Rounding {
  ROUND_DOWN,
  ROUND_HALF_UP,
  ROUND_UP,
}

================
File: src/functions/computePoolAddress.test.ts
================
import { Address } from '@ton/core';
import { computePoolAddress } from './computePoolAddress';
import { TonClient } from '@ton/ton';
import { getHttpEndpoint } from '@orbs-network/ton-access';
import { JettonMinterWrapper, RouterWrapper } from '../contracts';

describe('#computePoolAddress', () => {
  it('should compute the correct pool address', async () => {
    const tonClient = new TonClient({
      endpoint: await getHttpEndpoint({
        network: 'testnet',
      }),
    });
    const routerContract = tonClient.open(
      RouterWrapper.Router.createFromAddress(
        Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
      ),
    );
    const jetton0MasterContract = tonClient.open(
      JettonMinterWrapper.JettonMinter.createFromAddress(
        Address.parse('kQCF8jfV05w00abPcvsW64XNanQ9vateIhCLSkNAQ7Qfo14c'),
      ),
    );
    const jetton1MasterContract = tonClient.open(
      JettonMinterWrapper.JettonMinter.createFromAddress(
        Address.parse('kQCqaCb9S8wqYjPT1d18Z0f-HemRnEDm4heFyNfPKMESADNa'),
      ),
    );
    const jetton0Wallet = await jetton0MasterContract.getWalletAddress(
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
    );
    const jetton1Wallet = await jetton1MasterContract.getWalletAddress(
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
    );
    const fetchedPoolAddress = await routerContract.getPoolAddress(
      jetton0Wallet,
      jetton1Wallet,
      3000n,
      60n,
    );
    const poolAddress = computePoolAddress(
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
      jetton0Wallet,
      jetton1Wallet,
      3000n,
      60n,
    );
    expect(poolAddress.toString()).toEqual(fetchedPoolAddress.toString());
  });
});

================
File: src/functions/computePoolAddress.ts
================
import { Address, beginCell, Cell, Dictionary } from '@ton/core';
import { LP_ACCOUNT_BOC, POOL_BOC, POSITION_BOC } from '../constants';

const packPoolData = (
  routerAddress: Address,
  jetton0Wallet: Address,
  jetton1Wallet: Address,
  fee: bigint,
  tickSpacing: bigint,
) => {
  return beginCell()
    .storeRef(
      beginCell()
        .storeSlice(beginCell().storeAddress(routerAddress).endCell().asSlice())
        .storeSlice(beginCell().storeAddress(jetton0Wallet).endCell().asSlice())
        .storeSlice(beginCell().storeAddress(jetton1Wallet).endCell().asSlice())
        .storeUint(fee, 24)
        .storeUint(0n, 8)
        .storeUint(0n, 160)
        .endCell(),
    )
    .storeRef(
      beginCell()
        .storeInt(tickSpacing, 24)
        .storeInt(0n, 24)
        .storeUint(0n, 256)
        .storeUint(0n, 256)
        .storeUint(0n, 128)
        .storeUint(0n, 128)
        .storeUint(0n, 128)
        .endCell(),
    )
    .storeRef(
      beginCell()
        .storeUint(0n, 128)
        .storeDict(Dictionary.empty())
        .storeRef(Cell.fromBoc(Buffer.from(POSITION_BOC, 'hex'))[0])
        .storeRef(Cell.fromBoc(Buffer.from(LP_ACCOUNT_BOC, 'hex'))[0])
        .endCell(),
    )
    .endCell();
};

export const computePoolAddress = (
  routerAddress: Address,
  jetton0Wallet: Address,
  jetton1Wallet: Address,
  fee: bigint,
  tickSpacing: bigint,
  workchain = 0,
) => {
  const stateInitBuilder = beginCell()
    .storeUint(0, 2)
    .storeMaybeRef(Cell.fromBoc(Buffer.from(POOL_BOC, 'hex'))[0])
    .storeMaybeRef(packPoolData(routerAddress, jetton0Wallet, jetton1Wallet, fee, tickSpacing))
    .storeUint(0, 1)
    .endCell();
  return beginCell()
    .storeUint(4, 3)
    .storeUint(workchain, 8)
    .storeUint(BigInt('0x' + stateInitBuilder.hash().toString('hex')), 256)
    .endCell()
    .beginParse()
    .loadAddress();
};

================
File: src/functions/computePositionAddress.ts
================
import { Address, beginCell, Cell, Dictionary } from '@ton/core';
import { storePositionStorage } from '../tlbs/position';
import { POSITION_BOC } from '../constants';

const packPositionData = (
  poolAddress: Address,
  owner: Address,
  tickLower: bigint,
  tickUpper: bigint,
) => {
  const builder = beginCell();
  storePositionStorage({
    kind: 'PositionStorage',
    first_ref: {
      kind: 'PositionFirst',
      fee_growth_inside0_last_x128: 0n,
      fee_growth_inside1_last_x128: 0n,
      liquidity: 0n,
      tick_lower: Number(tickLower),
      tick_upper: Number(tickUpper),
    },
    second_ref: {
      kind: 'PositionSecond',
      owner_address: owner,
      pool_address: poolAddress,
      token_owed0: 0n,
      token_owed1: 0n,
    },
  })(builder);
  return builder.endCell();
};

export const computePositionAddress = (
  poolAddress: Address,
  owner: Address,
  tickLower: bigint,
  tickUpper: bigint,
  workchain: number = 0,
) => {
  const positionData = packPositionData(poolAddress, owner, tickLower, tickUpper);
  const stateInitBuilder = beginCell()
    .storeUint(0, 2)
    .storeMaybeRef(Cell.fromBoc(Buffer.from(POSITION_BOC, 'hex'))[0])
    .storeMaybeRef(positionData)
    .storeUint(0, 1)
    .endCell();
  return beginCell()
    .storeUint(4, 3)
    .storeUint(workchain, 8)
    .storeUint(BigInt('0x' + stateInitBuilder.hash().toString('hex')), 256)
    .endCell()
    .beginParse()
    .loadAddress();
};

================
File: src/functions/index.ts
================
import { computePoolAddress } from './computePoolAddress';
import { computePositionAddress } from './computePositionAddress';

export const Functions = {
  computePoolAddress,
  computePositionAddress,
};

================
File: src/messages/index.ts
================
export * from './poolMessageBuilder';

================
File: src/messages/poolMessageBuilder.ts
================
import { TonApiClient } from '@ton-api/client';
import {
  Address,
  beginCell,
  Dictionary,
  external,
  internal,
  SenderArguments,
  SendMode,
  storeMessage,
  toNano,
} from '@ton/core';
import { mnemonicNew, mnemonicToPrivateKey } from '@ton/crypto';
import { Jetton, JettonAmount } from '../entities';
import { PoolWrapper, WalletContract } from '../contracts';
import { storeOpJettonTransferMint } from '../tlbs/jetton';
import { WalletVersion } from '../@types';
export class PoolMessageBuilder {
  public static gasUsage = {
    MINT_GAS: toNano(0.5),
  };

  public static createMintMessage(
    routerAddress: Address,
    jetton0Amount: JettonAmount<Jetton>,
    jetton1Amount: JettonAmount<Jetton>,
    tickSpacing: number,
    fee: number,
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint,
    responseAddress: Address,
  ): SenderArguments[] {
    if (!jetton1Amount.jetton.walletAddress || !jetton0Amount.jetton.walletAddress) {
      throw new Error('Router wallet address is not set on jetton1 or jetton0');
    }

    const jetton0PayloadBuilder = beginCell();
    storeOpJettonTransferMint({
      kind: 'OpJettonTransferMint',
      query_id: 0,
      jetton_amount: jetton0Amount.quotient,
      to_address: routerAddress,
      response_address: responseAddress,
      custom_payload: beginCell().storeDict(Dictionary.empty()).endCell(),
      forward_ton_amount: toNano(0.1),
      either_payload: true,
      mint: {
        kind: 'MintParams',
        forward_opcode: PoolWrapper.Opcodes.Mint,
        jetton1_wallet: jetton1Amount.jetton.walletAddress,
        tick_lower: Number(tickLower),
        tick_upper: Number(tickUpper),
        fee,
        tick_spacing: tickSpacing,
        liquidity_delta: liquidity,
      },
    })(jetton0PayloadBuilder);
    const jetton0Message = {
      to: jetton0Amount.jetton.walletAddress,
      value: toNano(0.15),
      body: jetton0PayloadBuilder.endCell(),
    };

    const jetton1PayloadBuilder = beginCell();
    storeOpJettonTransferMint({
      kind: 'OpJettonTransferMint',
      query_id: 0,
      jetton_amount: jetton1Amount.quotient,
      to_address: routerAddress,
      response_address: responseAddress,
      custom_payload: beginCell().storeDict(Dictionary.empty()).endCell(),
      forward_ton_amount: toNano(0.35),
      either_payload: true,
      mint: {
        kind: 'MintParams',
        forward_opcode: PoolWrapper.Opcodes.Mint,
        jetton1_wallet: jetton0Amount.jetton.walletAddress,
        tick_lower: Number(tickLower),
        tick_upper: Number(tickUpper),
        fee,
        tick_spacing: tickSpacing,
        liquidity_delta: liquidity,
      },
    })(jetton1PayloadBuilder);

    const jetton1Message = {
      to: jetton1Amount.jetton.walletAddress,
      value: this.gasUsage.MINT_GAS - toNano(0.15),
      body: jetton1PayloadBuilder.endCell(),
    };
    return [jetton0Message, jetton1Message];
  }

  public static async createEmulatedMintMessage(
    tonApiClient: TonApiClient,
    walletVersion: WalletVersion,
    senderAddress: Address,
    routerAddress: Address,
    jetton0Amount: JettonAmount<Jetton>,
    jetton1Amount: JettonAmount<Jetton>,
    tickSpacing: number,
    fee: number,
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint,
    responseAddress: Address,
    workchain: number = 0,
  ) {
    const messages = this.createMintMessage(
      routerAddress,
      jetton0Amount,
      jetton1Amount,
      tickSpacing,
      fee,
      tickLower,
      tickUpper,
      liquidity,
      responseAddress,
    );
    const { seqno } = await tonApiClient.wallet.getAccountSeqno(senderAddress);
    const { publicKey: publicKeyHex } =
      await tonApiClient.accounts.getAccountPublicKey(senderAddress);
    const wallet = WalletContract.create(
      workchain,
      Buffer.from(publicKeyHex, 'hex'),
      walletVersion,
    );
    const dummyKey = (await mnemonicToPrivateKey(await mnemonicNew())).secretKey;
    const tr = wallet.createTransfer({
      seqno,
      secretKey: dummyKey,
      sendMode: SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS,
      messages: messages.map((m) => internal(m)),
    });

    // Create external message for emulation
    const bocExternalMessage = beginCell()
      .store(
        storeMessage(
          external({
            to: senderAddress,
            body: tr,
          }),
        ),
      )
      .endCell();

    // Emulate transaction
    const emulateTrace = await tonApiClient.emulation.emulateMessageToTrace(
      { boc: bocExternalMessage },
      { ignore_signature_check: true }, // Ignore signature for execute message from other account
    );
    return {
      messages,
      result: emulateTrace,
    };
  }
}

================
File: src/tlbs/jetton/index.ts
================
import { Builder } from '@ton/core';
import { Slice } from '@ton/core';
import { beginCell } from '@ton/core';
import { Cell } from '@ton/core';
import { Address } from '@ton/core';
import { ExternalAddress } from '@ton/core';
export function bitLen(n: number) {
  return n.toString(2).length;
}

/*
mint#_  forward_opcode: uint32
        jetton1_wallet: MsgAddress
        tick_lower: int24
        tick_upper: int24
        fee: uint24
        tick_spacing: int24
        liquidity_delta: int128 = MintParams;
*/

export interface MintParams {
  readonly kind: 'MintParams';
  readonly forward_opcode: number;
  readonly jetton1_wallet: Address | ExternalAddress | null;
  readonly tick_lower: number;
  readonly tick_upper: number;
  readonly fee: number;
  readonly tick_spacing: number;
  readonly liquidity_delta: bigint;
}

/*
op_jetton_transfer_mint#0f8a7ea5
        query_id: uint64
        jetton_amount: Grams
        to_address: MsgAddress
        response_address: MsgAddress
        custom_payload: Cell
        forward_ton_amount: Grams
        either_payload: Bool
        mint: ^MintParams = OpJettonTransferMint;
*/

export interface OpJettonTransferMint {
  readonly kind: 'OpJettonTransferMint';
  readonly query_id: number;
  readonly jetton_amount: bigint;
  readonly to_address: Address | ExternalAddress | null;
  readonly response_address: Address | ExternalAddress | null;
  readonly custom_payload: Cell;
  readonly forward_ton_amount: bigint;
  readonly either_payload: boolean;
  readonly mint: MintParams;
}

/*
swap#_  forward_opcode: uint32
        jetton1_wallet: MsgAddress
        fee: uint24
        tick_spacing: int24
        zero_for_one: int2
        sqrt_price_limit: uint160 = SwapParams;
*/

export interface SwapParams {
  readonly kind: 'SwapParams';
  readonly forward_opcode: number;
  readonly jetton1_wallet: Address | ExternalAddress | null;
  readonly fee: number;
  readonly tick_spacing: number;
  readonly zero_for_one: number;
  readonly sqrt_price_limit: bigint;
}

/*
op_jetton_transfer_swap#0f8a7ea5
        query_id: uint64
        jetton_amount: Grams
        to_address: MsgAddress
        response_address: MsgAddress
        custom_payload: Cell
        forward_ton_amount: Grams
        either_payload: Bool
        swap: ^SwapParams = OpJettonTransferSwap;
*/

export interface OpJettonTransferSwap {
  readonly kind: 'OpJettonTransferSwap';
  readonly query_id: number;
  readonly jetton_amount: bigint;
  readonly to_address: Address | ExternalAddress | null;
  readonly response_address: Address | ExternalAddress | null;
  readonly custom_payload: Cell;
  readonly forward_ton_amount: bigint;
  readonly either_payload: boolean;
  readonly swap: SwapParams;
}

/*
mint#_  forward_opcode: uint32
        jetton1_wallet: MsgAddress
        tick_lower: int24
        tick_upper: int24
        fee: uint24
        tick_spacing: int24
        liquidity_delta: int128 = MintParams;
*/

export function loadMintParams(slice: Slice): MintParams {
  let forward_opcode: number = slice.loadUint(32);
  let jetton1_wallet: Address | ExternalAddress | null = slice.loadAddressAny();
  let tick_lower: number = slice.loadInt(24);
  let tick_upper: number = slice.loadInt(24);
  let fee: number = slice.loadUint(24);
  let tick_spacing: number = slice.loadInt(24);
  let liquidity_delta: bigint = slice.loadIntBig(128);
  return {
    kind: 'MintParams',
    forward_opcode: forward_opcode,
    jetton1_wallet: jetton1_wallet,
    tick_lower: tick_lower,
    tick_upper: tick_upper,
    fee: fee,
    tick_spacing: tick_spacing,
    liquidity_delta: liquidity_delta,
  };
}

export function storeMintParams(mintParams: MintParams): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(mintParams.forward_opcode, 32);
    builder.storeAddress(mintParams.jetton1_wallet);
    builder.storeInt(mintParams.tick_lower, 24);
    builder.storeInt(mintParams.tick_upper, 24);
    builder.storeUint(mintParams.fee, 24);
    builder.storeInt(mintParams.tick_spacing, 24);
    builder.storeInt(mintParams.liquidity_delta, 128);
  };
}

/*
op_jetton_transfer_mint#0f8a7ea5
        query_id: uint64
        jetton_amount: Grams
        to_address: MsgAddress
        response_address: MsgAddress
        custom_payload: Cell
        forward_ton_amount: Grams
        either_payload: Bool
        mint: ^MintParams = OpJettonTransferMint;
*/

export function loadOpJettonTransferMint(slice: Slice): OpJettonTransferMint {
  if (slice.remainingBits >= 32 && slice.preloadUint(32) == 0x0f8a7ea5) {
    slice.loadUint(32);
    let query_id: number = slice.loadUint(64);
    let jetton_amount: bigint = slice.loadCoins();
    let to_address: Address | ExternalAddress | null = slice.loadAddressAny();
    let response_address: Address | ExternalAddress | null = slice.loadAddressAny();
    let custom_payload: Cell = slice.asCell();
    let forward_ton_amount: bigint = slice.loadCoins();
    let either_payload: boolean = slice.loadBoolean();
    let slice1 = slice.loadRef().beginParse(true);
    let mint: MintParams = loadMintParams(slice1);
    return {
      kind: 'OpJettonTransferMint',
      query_id: query_id,
      jetton_amount: jetton_amount,
      to_address: to_address,
      response_address: response_address,
      custom_payload: custom_payload,
      forward_ton_amount: forward_ton_amount,
      either_payload: either_payload,
      mint: mint,
    };
  }
  throw new Error(
    'Expected one of "OpJettonTransferMint" in loading "OpJettonTransferMint", but data does not satisfy any constructor',
  );
}

export function storeOpJettonTransferMint(
  opJettonTransferMint: OpJettonTransferMint,
): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(0x0f8a7ea5, 32);
    builder.storeUint(opJettonTransferMint.query_id, 64);
    builder.storeCoins(opJettonTransferMint.jetton_amount);
    builder.storeAddress(opJettonTransferMint.to_address);
    builder.storeAddress(opJettonTransferMint.response_address);
    builder.storeSlice(opJettonTransferMint.custom_payload.beginParse(true));
    builder.storeCoins(opJettonTransferMint.forward_ton_amount);
    builder.storeBit(opJettonTransferMint.either_payload);
    let cell1 = beginCell();
    storeMintParams(opJettonTransferMint.mint)(cell1);
    builder.storeRef(cell1);
  };
}

/*
swap#_  forward_opcode: uint32
        jetton1_wallet: MsgAddress
        fee: uint24
        tick_spacing: int24
        zero_for_one: int2
        sqrt_price_limit: uint160 = SwapParams;
*/

export function loadSwapParams(slice: Slice): SwapParams {
  let forward_opcode: number = slice.loadUint(32);
  let jetton1_wallet: Address | ExternalAddress | null = slice.loadAddressAny();
  let fee: number = slice.loadUint(24);
  let tick_spacing: number = slice.loadInt(24);
  let zero_for_one: number = slice.loadInt(2);
  let sqrt_price_limit: bigint = slice.loadUintBig(160);
  return {
    kind: 'SwapParams',
    forward_opcode: forward_opcode,
    jetton1_wallet: jetton1_wallet,
    fee: fee,
    tick_spacing: tick_spacing,
    zero_for_one: zero_for_one,
    sqrt_price_limit: sqrt_price_limit,
  };
}

export function storeSwapParams(swapParams: SwapParams): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(swapParams.forward_opcode, 32);
    builder.storeAddress(swapParams.jetton1_wallet);
    builder.storeUint(swapParams.fee, 24);
    builder.storeInt(swapParams.tick_spacing, 24);
    builder.storeInt(swapParams.zero_for_one, 2);
    builder.storeUint(swapParams.sqrt_price_limit, 160);
  };
}

/*
op_jetton_transfer_swap#0f8a7ea5
        query_id: uint64
        jetton_amount: Grams
        to_address: MsgAddress
        response_address: MsgAddress
        custom_payload: Cell
        forward_ton_amount: Grams
        either_payload: Bool
        swap: ^SwapParams = OpJettonTransferSwap;
*/

export function loadOpJettonTransferSwap(slice: Slice): OpJettonTransferSwap {
  if (slice.remainingBits >= 32 && slice.preloadUint(32) == 0x0f8a7ea5) {
    slice.loadUint(32);
    let query_id: number = slice.loadUint(64);
    let jetton_amount: bigint = slice.loadCoins();
    let to_address: Address | ExternalAddress | null = slice.loadAddressAny();
    let response_address: Address | ExternalAddress | null = slice.loadAddressAny();
    let custom_payload: Cell = slice.asCell();
    let forward_ton_amount: bigint = slice.loadCoins();
    let either_payload: boolean = slice.loadBoolean();
    let slice1 = slice.loadRef().beginParse(true);
    let swap: SwapParams = loadSwapParams(slice1);
    return {
      kind: 'OpJettonTransferSwap',
      query_id: query_id,
      jetton_amount: jetton_amount,
      to_address: to_address,
      response_address: response_address,
      custom_payload: custom_payload,
      forward_ton_amount: forward_ton_amount,
      either_payload: either_payload,
      swap: swap,
    };
  }
  throw new Error(
    'Expected one of "OpJettonTransferSwap" in loading "OpJettonTransferSwap", but data does not satisfy any constructor',
  );
}

export function storeOpJettonTransferSwap(
  opJettonTransferSwap: OpJettonTransferSwap,
): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(0x0f8a7ea5, 32);
    builder.storeUint(opJettonTransferSwap.query_id, 64);
    builder.storeCoins(opJettonTransferSwap.jetton_amount);
    builder.storeAddress(opJettonTransferSwap.to_address);
    builder.storeAddress(opJettonTransferSwap.response_address);
    builder.storeSlice(opJettonTransferSwap.custom_payload.beginParse(true));
    builder.storeCoins(opJettonTransferSwap.forward_ton_amount);
    builder.storeBit(opJettonTransferSwap.either_payload);
    let cell1 = beginCell();
    storeSwapParams(opJettonTransferSwap.swap)(cell1);
    builder.storeRef(cell1);
  };
}

================
File: src/tlbs/pool/index.ts
================
import { Builder } from '@ton/core';
import { Slice } from '@ton/core';
import { beginCell } from '@ton/core';
import { BitString } from '@ton/core';
import { Cell } from '@ton/core';
import { Address } from '@ton/core';
import { ExternalAddress } from '@ton/core';
import { Dictionary } from '@ton/core';
import { DictionaryValue } from '@ton/core';
export function bitLen(n: number) {
  return n.toString(2).length;
}

/*
mint#_  jetton_amount_0:Grams 
        jetton_amount_1:Grams 
        tick_lower:int24 
        tick_upper:int24 
        liquidity_delta:int128 
        recipient:MsgAddress = MintParams;
*/

export interface MintParams {
  readonly kind: 'MintParams';
  readonly jetton_amount_0: bigint;
  readonly jetton_amount_1: bigint;
  readonly tick_lower: number;
  readonly tick_upper: number;
  readonly liquidity_delta: bigint;
  readonly recipient: Address | ExternalAddress | null;
}

/*
op_mint#ecad15c4 
    query_id:uint64
    body: ^MintParams = InMsgBody;
*/

export interface InMsgBody {
  readonly kind: 'InMsgBody';
  readonly query_id: number;
  readonly body: MintParams;
}

/*
mint#_  jetton_amount_0:Grams 
        jetton_amount_1:Grams 
        tick_lower:int24 
        tick_upper:int24 
        liquidity_delta:int128 
        recipient:MsgAddress = MintParams;
*/

export function loadMintParams(slice: Slice): MintParams {
  let jetton_amount_0: bigint = slice.loadCoins();
  let jetton_amount_1: bigint = slice.loadCoins();
  let tick_lower: number = slice.loadInt(24);
  let tick_upper: number = slice.loadInt(24);
  let liquidity_delta: bigint = slice.loadIntBig(128);
  let recipient: Address | ExternalAddress | null = slice.loadAddressAny();
  return {
    kind: 'MintParams',
    jetton_amount_0: jetton_amount_0,
    jetton_amount_1: jetton_amount_1,
    tick_lower: tick_lower,
    tick_upper: tick_upper,
    liquidity_delta: liquidity_delta,
    recipient: recipient,
  };
}

export function storeMintParams(mintParams: MintParams): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeCoins(mintParams.jetton_amount_0);
    builder.storeCoins(mintParams.jetton_amount_1);
    builder.storeInt(mintParams.tick_lower, 24);
    builder.storeInt(mintParams.tick_upper, 24);
    builder.storeInt(mintParams.liquidity_delta, 128);
    builder.storeAddress(mintParams.recipient);
  };
}

/*
op_mint#ecad15c4 
    query_id:uint64
    body: ^MintParams = InMsgBody;
*/

export function loadInMsgBody(slice: Slice): InMsgBody {
  if (slice.remainingBits >= 32 && slice.preloadUint(32) == 0xecad15c4) {
    slice.loadUint(32);
    let query_id: number = slice.loadUint(64);
    let slice1 = slice.loadRef().beginParse(true);
    let body: MintParams = loadMintParams(slice1);
    return {
      kind: 'InMsgBody',
      query_id: query_id,
      body: body,
    };
  }
  throw new Error(
    'Expected one of "InMsgBody" in loading "InMsgBody", but data does not satisfy any constructor',
  );
}

export function storeInMsgBody(inMsgBody: InMsgBody): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(0xecad15c4, 32);
    builder.storeUint(inMsgBody.query_id, 64);
    let cell1 = beginCell();
    storeMintParams(inMsgBody.body)(cell1);
    builder.storeRef(cell1);
  };
}

/*
pool#_
  first_ref:^PoolFirst
  second_ref:^PoolSecond
  third_ref:^PoolThird
  = PoolStorage;
*/

export interface PoolStorage {
  readonly kind: 'PoolStorage';
  readonly first_ref: PoolFirst;
  readonly second_ref: PoolSecond;
  readonly third_ref: PoolThird;
}

/*
pool_first#_
  router_address:MsgAddress
  jetton0_wallet:MsgAddress
  jetton1_wallet:MsgAddress
  fee:uint24
  protocol_fee:uint8
  sqrt_price_x96:uint160
  = PoolFirst;
*/

export interface PoolFirst {
  readonly kind: 'PoolFirst';
  readonly router_address: Address | ExternalAddress | null;
  readonly jetton0_wallet: Address | ExternalAddress | null;
  readonly jetton1_wallet: Address | ExternalAddress | null;
  readonly fee: number;
  readonly protocol_fee: number;
  readonly sqrt_price_x96: bigint;
}

/*
pool_second#_
  tick_spacing:int24
  tick:int24
  fee_growth_global_0x128:uint256
  fee_growth_global_1x128:uint256
  collected_protocol_fee0:uint128
  collected_protocol_fee1:uint128
  liquidity:uint128
  = PoolSecond;
*/

export interface PoolSecond {
  readonly kind: 'PoolSecond';
  readonly tick_spacing: number;
  readonly tick: number;
  readonly fee_growth_global_0x128: bigint;
  readonly fee_growth_global_1x128: bigint;
  readonly collected_protocol_fee0: bigint;
  readonly collected_protocol_fee1: bigint;
  readonly liquidity: bigint;
}

/*
tick#_ 
  liquidity_gross:uint128 
  liquidity_net:int128 
  fee_growth_outside_0_x128:uint256 
  fee_growth_outside_1_x128:uint256  
  initialized:Bool = TickInfo;
*/

export interface TickInfo {
  readonly kind: 'TickInfo';
  readonly liquidity_gross: bigint;
  readonly liquidity_net: bigint;
  readonly fee_growth_outside_0_x128: bigint;
  readonly fee_growth_outside_1_x128: bigint;
  readonly initialized: boolean;
}

/*
pool_third#_
  max_liquidity_per_tick:uint128
  ticks:(HashmapE 24 TickInfo)
  position_code:^Cell
  lp_account_code:^Cell
  = PoolThird;
*/

export interface PoolThird {
  readonly kind: 'PoolThird';
  readonly max_liquidity_per_tick: bigint;
  readonly ticks: Dictionary<number, TickInfo>;
  readonly position_code: Cell;
  readonly lp_account_code: Cell;
}

/*
pool#_
  first_ref:^PoolFirst
  second_ref:^PoolSecond
  third_ref:^PoolThird
  = PoolStorage;
*/

export function loadPoolStorage(slice: Slice): PoolStorage {
  let slice1 = slice.loadRef().beginParse(true);
  let first_ref: PoolFirst = loadPoolFirst(slice1);
  let slice2 = slice.loadRef().beginParse(true);
  let second_ref: PoolSecond = loadPoolSecond(slice2);
  let slice3 = slice.loadRef().beginParse(true);
  let third_ref: PoolThird = loadPoolThird(slice3);
  return {
    kind: 'PoolStorage',
    first_ref: first_ref,
    second_ref: second_ref,
    third_ref: third_ref,
  };
}

export function storePoolStorage(poolStorage: PoolStorage): (builder: Builder) => void {
  return (builder: Builder) => {
    let cell1 = beginCell();
    storePoolFirst(poolStorage.first_ref)(cell1);
    builder.storeRef(cell1);
    let cell2 = beginCell();
    storePoolSecond(poolStorage.second_ref)(cell2);
    builder.storeRef(cell2);
    let cell3 = beginCell();
    storePoolThird(poolStorage.third_ref)(cell3);
    builder.storeRef(cell3);
  };
}

/*
pool_first#_
  router_address:MsgAddress
  jetton0_wallet:MsgAddress
  jetton1_wallet:MsgAddress
  fee:uint24
  protocol_fee:uint8
  sqrt_price_x96:uint160
  = PoolFirst;
*/

export function loadPoolFirst(slice: Slice): PoolFirst {
  let router_address: Address | ExternalAddress | null = slice.loadAddressAny();
  let jetton0_wallet: Address | ExternalAddress | null = slice.loadAddressAny();
  let jetton1_wallet: Address | ExternalAddress | null = slice.loadAddressAny();
  let fee: number = slice.loadUint(24);
  let protocol_fee: number = slice.loadUint(8);
  let sqrt_price_x96: bigint = slice.loadUintBig(160);
  return {
    kind: 'PoolFirst',
    router_address: router_address,
    jetton0_wallet: jetton0_wallet,
    jetton1_wallet: jetton1_wallet,
    fee: fee,
    protocol_fee: protocol_fee,
    sqrt_price_x96: sqrt_price_x96,
  };
}

export function storePoolFirst(poolFirst: PoolFirst): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeAddress(poolFirst.router_address);
    builder.storeAddress(poolFirst.jetton0_wallet);
    builder.storeAddress(poolFirst.jetton1_wallet);
    builder.storeUint(poolFirst.fee, 24);
    builder.storeUint(poolFirst.protocol_fee, 8);
    builder.storeUint(poolFirst.sqrt_price_x96, 160);
  };
}

/*
pool_second#_
  tick_spacing:int24
  tick:int24
  fee_growth_global_0x128:uint256
  fee_growth_global_1x128:uint256
  collected_protocol_fee0:uint128
  collected_protocol_fee1:uint128
  liquidity:uint128
  = PoolSecond;
*/

export function loadPoolSecond(slice: Slice): PoolSecond {
  let tick_spacing: number = slice.loadInt(24);
  let tick: number = slice.loadInt(24);
  let fee_growth_global_0x128: bigint = slice.loadUintBig(256);
  let fee_growth_global_1x128: bigint = slice.loadUintBig(256);
  let collected_protocol_fee0: bigint = slice.loadUintBig(128);
  let collected_protocol_fee1: bigint = slice.loadUintBig(128);
  let liquidity: bigint = slice.loadUintBig(128);
  return {
    kind: 'PoolSecond',
    tick_spacing: tick_spacing,
    tick: tick,
    fee_growth_global_0x128: fee_growth_global_0x128,
    fee_growth_global_1x128: fee_growth_global_1x128,
    collected_protocol_fee0: collected_protocol_fee0,
    collected_protocol_fee1: collected_protocol_fee1,
    liquidity: liquidity,
  };
}

export function storePoolSecond(poolSecond: PoolSecond): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeInt(poolSecond.tick_spacing, 24);
    builder.storeInt(poolSecond.tick, 24);
    builder.storeUint(poolSecond.fee_growth_global_0x128, 256);
    builder.storeUint(poolSecond.fee_growth_global_1x128, 256);
    builder.storeUint(poolSecond.collected_protocol_fee0, 128);
    builder.storeUint(poolSecond.collected_protocol_fee1, 128);
    builder.storeUint(poolSecond.liquidity, 128);
  };
}

/*
tick#_ 
  liquidity_gross:uint128 
  liquidity_net:int128 
  fee_growth_outside_0_x128:uint256 
  fee_growth_outside_1_x128:uint256  
  initialized:Bool = TickInfo;
*/

export function loadTickInfo(slice: Slice): TickInfo {
  let liquidity_gross: bigint = slice.loadUintBig(128);
  let liquidity_net: bigint = slice.loadIntBig(128);
  let fee_growth_outside_0_x128: bigint = slice.loadUintBig(256);
  let fee_growth_outside_1_x128: bigint = slice.loadUintBig(256);
  let initialized: boolean = slice.loadBoolean();
  return {
    kind: 'TickInfo',
    liquidity_gross: liquidity_gross,
    liquidity_net: liquidity_net,
    fee_growth_outside_0_x128: fee_growth_outside_0_x128,
    fee_growth_outside_1_x128: fee_growth_outside_1_x128,
    initialized: initialized,
  };
}

export function storeTickInfo(tickInfo: TickInfo): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(tickInfo.liquidity_gross, 128);
    builder.storeInt(tickInfo.liquidity_net, 128);
    builder.storeUint(tickInfo.fee_growth_outside_0_x128, 256);
    builder.storeUint(tickInfo.fee_growth_outside_1_x128, 256);
    builder.storeBit(tickInfo.initialized);
  };
}

/*
pool_third#_
  max_liquidity_per_tick:uint128
  ticks:(HashmapE 24 TickInfo)
  position_code:^Cell
  lp_account_code:^Cell
  = PoolThird;
*/

export function loadPoolThird(slice: Slice): PoolThird {
  let max_liquidity_per_tick: bigint = slice.loadUintBig(128);
  let ticks: Dictionary<number, TickInfo> = Dictionary.load(
    Dictionary.Keys.Int(24),
    {
      serialize: () => {
        throw new Error('Not implemented');
      },
      parse: loadTickInfo,
    },
    slice,
  );
  let slice1 = slice.loadRef().beginParse(true);
  let position_code: Cell = slice1.asCell();
  let slice2 = slice.loadRef().beginParse(true);
  let lp_account_code: Cell = slice2.asCell();
  return {
    kind: 'PoolThird',
    max_liquidity_per_tick: max_liquidity_per_tick,
    ticks: ticks,
    position_code: position_code,
    lp_account_code: lp_account_code,
  };
}

export function storePoolThird(poolThird: PoolThird): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(poolThird.max_liquidity_per_tick, 128);
    builder.storeDict(poolThird.ticks, Dictionary.Keys.Int(24), {
      serialize: (arg: TickInfo, builder: Builder) => {
        storeTickInfo(arg)(builder);
      },
      parse: () => {
        throw new Error('Not implemented');
      },
    });
    let cell1 = beginCell();
    cell1.storeSlice(poolThird.position_code.beginParse(true));
    builder.storeRef(cell1);
    let cell2 = beginCell();
    cell2.storeSlice(poolThird.lp_account_code.beginParse(true));
    builder.storeRef(cell2);
  };
}

================
File: src/tlbs/position/index.ts
================
import { Builder } from '@ton/core';
import { Slice } from '@ton/core';
import { beginCell } from '@ton/core';
import { Address } from '@ton/core';
import { ExternalAddress } from '@ton/core';
export function bitLen(n: number) {
  return n.toString(2).length;
}

/*
position#_
  first_ref:^PositionFirst
  second_ref:^PositionSecond
  = PositionStorage;
*/
export interface PositionStorage {
  readonly kind: 'PositionStorage';
  readonly first_ref: PositionFirst;
  readonly second_ref: PositionSecond;
}

/*
position_first#_
  tick_lower:int24
  tick_upper:int24
  liquidity:uint128
  fee_growth_inside0_last_x128:uint256
  fee_growth_inside1_last_x128:uint256
  = PositionFirst;
*/
export interface PositionFirst {
  readonly kind: 'PositionFirst';
  readonly tick_lower: number;
  readonly tick_upper: number;
  readonly liquidity: bigint;
  readonly fee_growth_inside0_last_x128: bigint;
  readonly fee_growth_inside1_last_x128: bigint;
}

/*
position_second#_
  token_owed0:uint128
  token_owed1:uint128
  owner_address:MsgAddress
  pool_address:MsgAddress
  = PositionSecond;
*/
export interface PositionSecond {
  readonly kind: 'PositionSecond';
  readonly token_owed0: bigint;
  readonly token_owed1: bigint;
  readonly owner_address: Address | ExternalAddress | null;
  readonly pool_address: Address | ExternalAddress | null;
}

/*
position#_
  first_ref:^PositionFirst
  second_ref:^PositionSecond
  = PositionStorage;
*/
export function loadPositionStorage(slice: Slice): PositionStorage {
  let slice1 = slice.loadRef().beginParse(true);
  let first_ref: PositionFirst = loadPositionFirst(slice1);
  let slice2 = slice.loadRef().beginParse(true);
  let second_ref: PositionSecond = loadPositionSecond(slice2);
  return {
    kind: 'PositionStorage',
    first_ref: first_ref,
    second_ref: second_ref,
  };
}

export function storePositionStorage(positionStorage: PositionStorage): (builder: Builder) => void {
  return (builder: Builder) => {
    let cell1 = beginCell();
    storePositionFirst(positionStorage.first_ref)(cell1);
    builder.storeRef(cell1);
    let cell2 = beginCell();
    storePositionSecond(positionStorage.second_ref)(cell2);
    builder.storeRef(cell2);
  };
}

/*
position_first#_
  tick_lower:int24
  tick_upper:int24
  liquidity:uint128
  fee_growth_inside0_last_x128:uint256
  fee_growth_inside1_last_x128:uint256
  = PositionFirst;
*/
export function loadPositionFirst(slice: Slice): PositionFirst {
  let tick_lower: number = slice.loadInt(24);
  let tick_upper: number = slice.loadInt(24);
  let liquidity: bigint = slice.loadUintBig(128);
  let fee_growth_inside0_last_x128: bigint = slice.loadUintBig(256);
  let fee_growth_inside1_last_x128: bigint = slice.loadUintBig(256);
  return {
    kind: 'PositionFirst',
    tick_lower: tick_lower,
    tick_upper: tick_upper,
    liquidity: liquidity,
    fee_growth_inside0_last_x128: fee_growth_inside0_last_x128,
    fee_growth_inside1_last_x128: fee_growth_inside1_last_x128,
  };
}

export function storePositionFirst(positionFirst: PositionFirst): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeInt(positionFirst.tick_lower, 24);
    builder.storeInt(positionFirst.tick_upper, 24);
    builder.storeUint(positionFirst.liquidity, 128);
    builder.storeUint(positionFirst.fee_growth_inside0_last_x128, 256);
    builder.storeUint(positionFirst.fee_growth_inside1_last_x128, 256);
  };
}

/*
position_second#_
  token_owed0:uint128
  token_owed1:uint128
  owner_address:MsgAddress
  pool_address:MsgAddress
  = PositionSecond;
*/
export function loadPositionSecond(slice: Slice): PositionSecond {
  let token_owed0: bigint = slice.loadUintBig(128);
  let token_owed1: bigint = slice.loadUintBig(128);
  let owner_address: Address | ExternalAddress | null = slice.loadAddressAny();
  let pool_address: Address | ExternalAddress | null = slice.loadAddressAny();
  return {
    kind: 'PositionSecond',
    token_owed0: token_owed0,
    token_owed1: token_owed1,
    owner_address: owner_address,
    pool_address: pool_address,
  };
}

export function storePositionSecond(positionSecond: PositionSecond): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(positionSecond.token_owed0, 128);
    builder.storeUint(positionSecond.token_owed1, 128);
    builder.storeAddress(positionSecond.owner_address);
    builder.storeAddress(positionSecond.pool_address);
  };
}

/*
burn_position#_
  liquidity_delta:uint128
  = BurnPositionParams;
*/
export interface BurnPositionParams {
  readonly kind: 'BurnPositionParams';
  readonly liquidity_delta: bigint;
}

/*
op_burn_position#446497ac
  query_id:uint64
  body: BurnPositionParams
  = BurnPositionMessage;
*/
export interface BurnPositionMessage {
  readonly kind: 'BurnPositionMessage';
  readonly query_id: number;
  readonly body: BurnPositionParams;
}

/*
collect#_
  recipient:MsgAddress
  amount_0_requested:uint128
  amount_1_requested:uint128
  = CollectParams;
*/
export interface CollectParams {
  readonly kind: 'CollectParams';
  readonly recipient: Address | ExternalAddress | null;
  readonly amount_0_requested: bigint;
  readonly amount_1_requested: bigint;
}

/*
op_collect#c89aeef9
  query_id:uint64
  body: CollectParams
  = CollectMessage;
*/
export interface CollectMessage {
  readonly kind: 'CollectMessage';
  readonly query_id: number;
  readonly body: CollectParams;
}

/*
burn_position#_
  liquidity_delta:uint128
  = BurnPositionParams;
*/
export function loadBurnPositionParams(slice: Slice): BurnPositionParams {
  let liquidity_delta: bigint = slice.loadUintBig(128);
  return {
    kind: 'BurnPositionParams',
    liquidity_delta: liquidity_delta,
  };
}

export function storeBurnPositionParams(
  burnPositionParams: BurnPositionParams,
): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(burnPositionParams.liquidity_delta, 128);
  };
}

/*
op_burn_position#446497ac
  query_id:uint64
  body: BurnPositionParams
  = BurnPositionMessage;
*/
export function loadBurnPositionMessage(slice: Slice): BurnPositionMessage {
  if (slice.remainingBits >= 32 && slice.preloadUint(32) == 0x446497ac) {
    slice.loadUint(32);
    let query_id: number = slice.loadUint(64);
    let body: BurnPositionParams = loadBurnPositionParams(slice);
    return {
      kind: 'BurnPositionMessage',
      query_id: query_id,
      body: body,
    };
  }
  throw new Error(
    'Expected one of "BurnPositionMessage" in loading "BurnPositionMessage", but data does not satisfy any constructor',
  );
}

export function storeBurnPositionMessage(
  burnPositionMessage: BurnPositionMessage,
): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(0x446497ac, 32);
    builder.storeUint(burnPositionMessage.query_id, 64);
    storeBurnPositionParams(burnPositionMessage.body)(builder);
  };
}

/*
collect#_
  recipient:MsgAddress
  amount_0_requested:uint128
  amount_1_requested:uint128
  = CollectParams;
*/
export function loadCollectParams(slice: Slice): CollectParams {
  let recipient: Address | ExternalAddress | null = slice.loadAddressAny();
  let amount_0_requested: bigint = slice.loadUintBig(128);
  let amount_1_requested: bigint = slice.loadUintBig(128);
  return {
    kind: 'CollectParams',
    recipient: recipient,
    amount_0_requested: amount_0_requested,
    amount_1_requested: amount_1_requested,
  };
}

export function storeCollectParams(collectParams: CollectParams): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeAddress(collectParams.recipient);
    builder.storeUint(collectParams.amount_0_requested, 128);
    builder.storeUint(collectParams.amount_1_requested, 128);
  };
}

/*
op_collect#c89aeef9
  query_id:uint64
  body: CollectParams
  = CollectMessage;
*/
export function loadCollectMessage(slice: Slice): CollectMessage {
  if (slice.remainingBits >= 32 && slice.preloadUint(32) == 0xc89aeef9) {
    slice.loadUint(32);
    let query_id: number = slice.loadUint(64);
    let body: CollectParams = loadCollectParams(slice);
    return {
      kind: 'CollectMessage',
      query_id: query_id,
      body: body,
    };
  }
  throw new Error(
    'Expected one of "CollectMessage" in loading "CollectMessage", but data does not satisfy any constructor',
  );
}

export function storeCollectMessage(collectMessage: CollectMessage): (builder: Builder) => void {
  return (builder: Builder) => {
    builder.storeUint(0xc89aeef9, 32);
    builder.storeUint(collectMessage.query_id, 64);
    storeCollectParams(collectMessage.body)(builder);
  };
}

================
File: src/tlbs/router/index.ts
================
import { Builder } from '@ton/core'
import { Slice } from '@ton/core'
import { beginCell } from '@ton/core'
import { BitString } from '@ton/core'
import { Cell } from '@ton/core'
import { Address } from '@ton/core'
import { ExternalAddress } from '@ton/core'
import { Dictionary } from '@ton/core'
import { DictionaryValue } from '@ton/core'
export function bitLen(n: number) {
    return n.toString(2).length;
}

/*
op_create_pool#ad85e6b3 
    query_id:uint64
    jetton0_wallet: MsgAddress
    jetton1_wallet: MsgAddress
    fee: uint24
    tick_spacing: int24
    sqrt_price_x96: uint160 = OpCreatePool;
*/

export interface OpCreatePool {
    readonly kind: 'OpCreatePool';
    readonly query_id: number;
    readonly jetton0_wallet: Address | ExternalAddress | null;
    readonly jetton1_wallet: Address | ExternalAddress | null;
    readonly fee: number;
    readonly tick_spacing: number;
    readonly sqrt_price_x96: bigint;
}

/*
op_create_pool#ad85e6b3 
    query_id:uint64
    jetton0_wallet: MsgAddress
    jetton1_wallet: MsgAddress
    fee: uint24
    tick_spacing: int24
    sqrt_price_x96: uint160 = OpCreatePool;
*/

export function loadOpCreatePool(slice: Slice): OpCreatePool {
    if (((slice.remainingBits >= 32) && (slice.preloadUint(32) == 0xad85e6b3))) {
        slice.loadUint(32);
        let query_id: number = slice.loadUint(64);
        let jetton0_wallet: Address | ExternalAddress | null = slice.loadAddressAny();
        let jetton1_wallet: Address | ExternalAddress | null = slice.loadAddressAny();
        let fee: number = slice.loadUint(24);
        let tick_spacing: number = slice.loadInt(24);
        let sqrt_price_x96: bigint = slice.loadUintBig(160);
        return {
            kind: 'OpCreatePool',
            query_id: query_id,
            jetton0_wallet: jetton0_wallet,
            jetton1_wallet: jetton1_wallet,
            fee: fee,
            tick_spacing: tick_spacing,
            sqrt_price_x96: sqrt_price_x96,
        }

    }
    throw new Error('Expected one of "OpCreatePool" in loading "OpCreatePool", but data does not satisfy any constructor');
}

export function storeOpCreatePool(opCreatePool: OpCreatePool): (builder: Builder) => void {
    return ((builder: Builder) => {
        builder.storeUint(0xad85e6b3, 32);
        builder.storeUint(opCreatePool.query_id, 64);
        builder.storeAddress(opCreatePool.jetton0_wallet);
        builder.storeAddress(opCreatePool.jetton1_wallet);
        builder.storeUint(opCreatePool.fee, 24);
        builder.storeInt(opCreatePool.tick_spacing, 24);
        builder.storeUint(opCreatePool.sqrt_price_x96, 160);
    })

}

================
File: src/tlbs/index.ts
================
export * as JettonTlbs from './jetton';
export * as PoolTlbs from './pool';
export * as RouterTlbs from './router';
export * as PositionTlbs from './position';

================
File: src/utils/address.ts
================
import { Address, beginCell } from '@ton/ton';

export function parseAddress(address: string): Address {
  try {
    return Address.parse(address);
  } catch (error) {
    throw new Error(`${address} is not a valid address.`);
  }
}

// @dev compare two addresses lexicographically
// @param x - first address
// @param y - second address
// @return - -1 if x is less than y, 0 if x is equal to y, 1 if x is greater than y
export function compareAddresses(x: Address, y: Address): -1 | 0 | 1 {
  const xHash = BigInt(`0x${beginCell().storeAddress(x).endCell().hash().toString('hex')}`);
  const yHash = BigInt(`0x${beginCell().storeAddress(y).endCell().hash().toString('hex')}`);
  return xHash < yHash ? -1 : xHash === yHash ? 0 : 1;
}

================
File: src/utils/crc32.ts
================
import { SendMode } from '@ton/core';
import { Maybe } from '@ton/core/dist/utils/maybe';

const TABLE = new Int32Array([
  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
  0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
  0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
  0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
  0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
  0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
  0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
  0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
  0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
  0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
  0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
  0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
  0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
  0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
  0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
  0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
  0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
  0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
]);

export const crc32 = (source: Uint8Array | string, previous?: number) => {
  const buffer = typeof source === 'string' ? Buffer.from(source) : source;
  const signed =
    buffer.reduce(
      (crc, item) => TABLE[(crc ^ item) & 0xff] ^ (crc >>> 8),
      previous === 0 ? 0 : ~~previous! ^ -1,
    ) ^ -1;

  return signed >>> 0;
};

================
File: src/utils/encodeSqrtRatioX96.test.ts
================
import { describe, it, expect } from 'bun:test';
import { Q96 } from '../constants';
import { encodeSqrtRatioX96 } from './encodeSqrtRatioX96';

describe('#encodeSqrtRatioX96', () => {
  it('1/1', () => {
    expect(encodeSqrtRatioX96(1, 1)).toEqual(Q96);
  });

  it('100/1', () => {
    expect(encodeSqrtRatioX96(100, 1)).toEqual(792281625142643375935439503360n);
  });

  it('1/100', () => {
    expect(encodeSqrtRatioX96(1, 100)).toEqual(7922816251426433759354395033n);
  });

  it('111/333', () => {
    expect(encodeSqrtRatioX96(111, 333)).toEqual(45742400955009932534161870629n);
  });

  it('333/111', () => {
    expect(encodeSqrtRatioX96(333, 111)).toEqual(137227202865029797602485611888n);
  });
});

================
File: src/utils/encodeSqrtRatioX96.ts
================
import { BigintIsh } from '../@types';
import invariant from 'tiny-invariant';
import { ONE, THREE, TWO, ZERO } from '../constants';

export function sqrt(y: bigint): bigint {
  invariant(y >= ZERO, 'NEGATIVE');

  let z: bigint = ZERO;
  let x: bigint;
  if (y > THREE) {
    z = y;
    x = y / TWO + ONE;
    while (x < z) {
      z = x;
      x = (y / x + x) / TWO;
    }
  } else if (y !== ZERO) {
    z = ONE;
  }
  return z;
}

/**
 * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0
 * @param amount1 The numerator amount i.e., the amount of token1
 * @param amount0 The denominator amount i.e., the amount of token0
 * @returns The sqrt ratio
 */
export function encodeSqrtRatioX96(amount1: BigintIsh, amount0: BigintIsh): bigint {
  const numerator = BigInt(amount1) << 192n;
  const denominator = BigInt(amount0);
  const ratioX192 = numerator / denominator;
  return BigInt(sqrt(ratioX192));
}

================
File: src/utils/fullMath.ts
================
import { ONE, ZERO } from '../constants';

export abstract class FullMath {
  private constructor() {}

  public static mulDivRoundingUp(a: bigint, b: bigint, denominator: bigint): bigint {
    const product = a * b;
    let result = product / denominator;
    // eslint-disable-next-line operator-assignment
    if (product % denominator !== ZERO) result = result + ONE;
    return result;
  }
}

================
File: src/utils/index.ts
================
export * from './crc32';
export * from './tickLibrary';
export * from './tickMath';
export * from './sqrtPriceMath';
export * from './positionMath';
export * from './position';
export * from './fullMath';
export * from './priceTickConversions';
export * from './isSorted';
export * from './tickList';
export * from './swapMath';
export * from './nearestUsableTick';
export * from './priceParser';

================
File: src/utils/isSorted.ts
================
export function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {
  for (let i = 0; i < list.length - 1; i++) {
    if (comparator(list[i], list[i + 1]) > 0) {
      return false;
    }
  }
  return true;
}

================
File: src/utils/liquidityMath.test.ts
================
import { Address, TonClient } from '@ton/ton';
import { Jetton, JettonAmount } from '../entities';
import { encodeSqrtRatioX96 } from './encodeSqrtRatioX96';
import { LiquidityMath } from './liquidityMath';
import { getHttpEndpoint } from '@orbs-network/ton-access';

const usdc = new Jetton('EQCF8jfV05w00abPcvsW64XNanQ9vateIhCLSkNAQ7Qfo-WW', 9, 'USDC');
const orb = new Jetton('EQCqaCb9S8wqYjPT1d18Z0f-HemRnEDm4heFyNfPKMESAIjQ', 9, 'Orbiton Swap');

describe('#getLiquidityBySingleAmount', () => {
  beforeAll(async () => {
    const tonClient = new TonClient({
      endpoint: await getHttpEndpoint({
        network: 'testnet',
      }),
    });
    await usdc.setWalletAddress(
      tonClient,
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
    );
    await orb.setWalletAddress(
      tonClient,
      Address.parse('EQCeuRLbIAm__PPiU-Ej-D6iR_4K1wAdF_ABttWUw086IzZu'),
    );
  });
  it('input with token 0 amount', () => {
    const amount = LiquidityMath.getLiquidityBySingleAmount({
      amount: JettonAmount.fromRawAmount(usdc, '100'),
      currency: orb,
      tickLower: -953,
      tickUpper: 953,
      sqrtRatioX96: encodeSqrtRatioX96(1, 1),
    });
    expect(amount).toEqual(2149n);
  });

  it('input with token 1 amount', () => {
    const amount = LiquidityMath.getLiquidityBySingleAmount({
      amount: JettonAmount.fromRawAmount(orb, '200'),
      currency: usdc,
      tickLower: -953,
      tickUpper: 953,
      sqrtRatioX96: encodeSqrtRatioX96(1, 1),
    });
    expect(amount).toEqual(4298n);
  });
});

================
File: src/utils/liquidityMath.ts
================
import { Address } from '@ton/core';
import { MaxUint256, NEGATIVE_ONE, ZERO } from '../constants';
import { Jetton, JettonAmount } from '../entities';
import { maxLiquidityForAmounts } from './maxLiquidityForAmounts';
import { TickMath } from './tickMath';

export namespace LiquidityMath {
  export interface GetLiquidityOptions extends Omit<GetAmountOptions, 'amount' | 'currency'> {
    amountA: JettonAmount<Jetton>;
    amountB: JettonAmount<Jetton>;
  }

  export interface GetAmountOptions {
    // Amount of token user input
    amount: JettonAmount<Jetton>;
    // Currency of the dependent token in the pool
    currency: Jetton;
    tickLower: number;
    tickUpper: number;
    // The reason of using price sqrt X96 instead of tick current is that
    // tick current may have rounding error since it's a floor rounding
    sqrtRatioX96: bigint;
  }

  export function addDelta(x: bigint, y: bigint): bigint {
    if (y < ZERO) {
      return x - y * NEGATIVE_ONE;
    }
    return x + y;
  }

  export function getLiquidityBySingleAmount({
    amount,
    currency,
    ...rest
  }: GetAmountOptions): bigint | undefined {
    return getLiquidityByAmountsAndPrice({
      amountA: amount,
      amountB: JettonAmount.fromRawAmount(currency, MaxUint256),
      ...rest,
    });
  }

  export function getLiquidityByAmountsAndPrice({
    amountA,
    amountB,
    tickUpper,
    tickLower,
    sqrtRatioX96,
  }: GetLiquidityOptions) {
    const isToken0 = amountA.jetton.sortsBefore(amountB.jetton);
    const [inputAmount0, inputAmount1] = isToken0
      ? [amountA.quotient, amountB.quotient]
      : [amountB.quotient, amountA.quotient];
    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);
    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);
    try {
      return maxLiquidityForAmounts(
        sqrtRatioX96,
        sqrtRatioAX96,
        sqrtRatioBX96,
        inputAmount0,
        inputAmount1,
        true,
      );
    } catch (e) {
      console.error(e);
      return undefined;
    }
  }
}

================
File: src/utils/maxLiquidityForAmounts.test.ts
================
import { describe, it, expect } from 'bun:test';
import { MaxUint256 } from '../constants';
import { encodeSqrtRatioX96 } from './encodeSqrtRatioX96';
import { maxLiquidityForAmounts } from './maxLiquidityForAmounts';

describe('#maxLiquidityForAmounts', () => {
  describe('imprecise', () => {
    describe('price inside', () => {
      it('100 token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(1, 1),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            '200',
            false,
          ),
        ).toEqual(2148n);
      });

      it('100 token0, max token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(1, 1),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            MaxUint256,
            false,
          ),
        ).toEqual(2148n);
      });

      it('max token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(1, 1),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            MaxUint256,
            '200',
            false,
          ),
        ).toEqual(4297n);
      });
    });

    describe('price below', () => {
      it('100 token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(99, 110),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            '200',
            false,
          ),
        ).toEqual(1048n);
      });

      it('100 token0, max token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(99, 110),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            MaxUint256,
            false,
          ),
        ).toEqual(1048n);
      });

      it('max token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(99, 110),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            MaxUint256,
            '200',
            false,
          ),
        ).toEqual(1214437677402050006470401421068302637228917309992228326090730924516431320489727n);
      });
    });

    describe('price above', () => {
      it('100 token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(111, 100),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            '200',
            false,
          ),
        ).toEqual(2097n);
      });

      it('100 token0, max token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(111, 100),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            MaxUint256,
            false,
          ),
        ).toEqual(1214437677402050006470401421098959354205873606971497132040612572422243086574654n);
      });

      it('max token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(111, 100),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            MaxUint256,
            '200',
            false,
          ),
        ).toEqual(2097n);
      });
    });
  });

  describe('precise', () => {
    describe('price inside', () => {
      it('100 token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(1, 1),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            '200',
            true,
          ),
        ).toEqual(2148n);
      });

      it('100 token0, max token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(1, 1),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            MaxUint256,
            true,
          ),
        ).toEqual(2148n);
      });

      it('max token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(1, 1),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            MaxUint256,
            '200',
            true,
          ),
        ).toEqual(4297n);
      });
    });

    describe('price below', () => {
      it('100 token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(99, 110),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            '200',
            true,
          ),
        ).toEqual(1048n);
      });

      it('100 token0, max token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(99, 110),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            MaxUint256,
            true,
          ),
        ).toEqual(1048n);
      });

      it('max token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(99, 110),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            MaxUint256,
            '200',
            true,
          ),
        ).toEqual(1214437677402050006470401421082903520362793114274352355276488318240158678126184n);
      });
    });

    describe('price above', () => {
      it('100 token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(111, 100),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            '200',
            true,
          ),
        ).toEqual(2097n);
      });

      it('100 token0, max token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(111, 100),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            '100',
            MaxUint256,
            true,
          ),
        ).toEqual(1214437677402050006470401421098959354205873606971497132040612572422243086574654n);
      });

      it('max token0, 200 token1', () => {
        expect(
          maxLiquidityForAmounts(
            encodeSqrtRatioX96(111, 100),
            encodeSqrtRatioX96(100, 110),
            encodeSqrtRatioX96(110, 100),
            MaxUint256,
            '200',
            true,
          ),
        ).toEqual(2097n);
      });
    });
  });
});

================
File: src/utils/maxLiquidityForAmounts.ts
================
import { BigintIsh } from '../@types';
import { Q96 } from '../constants';

/**
 * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.
 * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,
 * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,
 * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future
 * v3 router contract.
 * @param sqrtRatioAX96 The price at the lower boundary
 * @param sqrtRatioBX96 The price at the upper boundary
 * @param amount0 The token0 amount
 * @returns liquidity for amount0, imprecise
 */
function maxLiquidityForAmount0Imprecise(
  sqrtRatioAX96: bigint,
  sqrtRatioBX96: bigint,
  amount0: BigintIsh,
): bigint {
  if (sqrtRatioAX96 > sqrtRatioBX96) {
    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];
  }
  const intermediate = (sqrtRatioAX96 * sqrtRatioBX96) / Q96;
  return (BigInt(amount0) * intermediate) / (sqrtRatioBX96 - sqrtRatioAX96);
}

/**
 * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,
 * and shifting the subtracted ratio left by 32 bits.
 * @param sqrtRatioAX96 The price at the lower boundary
 * @param sqrtRatioBX96 The price at the upper boundary
 * @param amount0 The token0 amount
 * @returns liquidity for amount0, precise
 */
function maxLiquidityForAmount0Precise(
  sqrtRatioAX96: bigint,
  sqrtRatioBX96: bigint,
  amount0: BigintIsh,
): bigint {
  if (sqrtRatioAX96 > sqrtRatioBX96) {
    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];
  }

  const numerator = BigInt(amount0) * sqrtRatioAX96 * sqrtRatioBX96;
  const denominator = Q96 * (sqrtRatioBX96 - sqrtRatioAX96);

  return numerator / denominator;
}

/**
 * Computes the maximum amount of liquidity received for a given amount of token1
 * @param sqrtRatioAX96 The price at the lower tick boundary
 * @param sqrtRatioBX96 The price at the upper tick boundary
 * @param amount1 The token1 amount
 * @returns liquidity for amount1
 */
function maxLiquidityForAmount1(
  sqrtRatioAX96: bigint,
  sqrtRatioBX96: bigint,
  amount1: BigintIsh,
): bigint {
  if (sqrtRatioAX96 > sqrtRatioBX96) {
    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];
  }
  return (BigInt(amount1) * Q96) / (sqrtRatioBX96 - sqrtRatioAX96);
}

/**
 * Computes the maximum amount of liquidity received for a given amount of token0, token1,
 * and the prices at the tick boundaries.
 * @param sqrtRatioCurrentX96 the current price
 * @param sqrtRatioAX96 price at lower boundary
 * @param sqrtRatioBX96 price at upper boundary
 * @param amount0 token0 amount
 * @param amount1 token1 amount
 * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,
 * not what core can theoretically support
 */
export function maxLiquidityForAmounts(
  sqrtRatioCurrentX96: bigint,
  sqrtRatioAX96: bigint,
  sqrtRatioBX96: bigint,
  amount0: BigintIsh,
  amount1: BigintIsh,
  useFullPrecision: boolean,
): bigint {
  if (sqrtRatioAX96 > sqrtRatioBX96) {
    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];
  }

  const maxLiquidityForAmount0 = useFullPrecision
    ? maxLiquidityForAmount0Precise
    : maxLiquidityForAmount0Imprecise;

  if (sqrtRatioCurrentX96 <= sqrtRatioAX96) {
    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);
  }
  if (sqrtRatioCurrentX96 < sqrtRatioBX96) {
    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0);
    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1);
    return liquidity0 < liquidity1 ? liquidity0 : liquidity1;
  }
  return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);
}

================
File: src/utils/mostSignificantBit.test.ts
================
import { MaxUint256 } from '../constants';
import { describe, it, expect } from 'bun:test';
import { ONE } from '../constants';
import { mostSignificantBit } from './mostSignificantBit';

describe('mostSignificantBit', () => {
  it('throws for zero', () => {
    expect(() => mostSignificantBit(0n)).toThrow('ZERO');
  });
  it('correct value for every power of 2', () => {
    for (let i = 1; i < 256; i++) {
      const x = 2n ** BigInt(i);
      expect(mostSignificantBit(x)).toEqual(i);
    }
  });
  it('correct value for every power of 2 - 1', () => {
    for (let i = 2; i < 256; i++) {
      const x = 2n ** BigInt(i) - 1n;
      expect(mostSignificantBit(x)).toEqual(i - 1);
    }
  });

  it('succeeds for MaxUint256', () => {
    expect(mostSignificantBit(MaxUint256)).toEqual(255);
  });

  it('throws for MaxUint256 + 1', () => {
    expect(() => mostSignificantBit(MaxUint256 + ONE)).toThrow('MAX');
  });
});

================
File: src/utils/mostSignificantBit.ts
================
import { MaxUint256 } from '../constants';
import invariant from 'tiny-invariant';
import { ZERO } from '../constants';

const TWO = 2n;
const POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, bigint] => [
  pow,
  TWO ** BigInt(pow),
]);

export function mostSignificantBit(x: bigint): number {
  invariant(x > ZERO, 'ZERO');
  invariant(x <= MaxUint256, 'MAX');

  let msb = 0;
  for (const [power, min] of POWERS_OF_2) {
    if (x >= min) {
      // eslint-disable-next-line operator-assignment
      x = x >> BigInt(power);
      msb += power;
    }
  }
  return msb;
}

================
File: src/utils/nearestUsableTick.test.ts
================
import { describe, it, expect } from 'bun:test';
import { nearestUsableTick } from './nearestUsableTick';
import { TickMath } from './tickMath';

describe('#nearestUsableTick', () => {
  it('throws if tickSpacing is 0', () => {
    expect(() => nearestUsableTick(1, 0)).toThrow('TICK_SPACING');
  });

  it('throws if tickSpacing is negative', () => {
    expect(() => nearestUsableTick(1, -5)).toThrow('TICK_SPACING');
  });

  it('throws if either is non-integer', () => {
    expect(() => nearestUsableTick(1.5, 1)).toThrow('INTEGERS');
    expect(() => nearestUsableTick(1, 1.5)).toThrow('INTEGERS');
  });

  it('throws if tick is greater than TickMath.MAX_TICK', () => {
    expect(() => nearestUsableTick(TickMath.MAX_TICK + 1, 1)).toThrow('TICK_BOUND');
    expect(() => nearestUsableTick(TickMath.MIN_TICK - 1, 1)).toThrow('TICK_BOUND');
  });

  it('rounds at positive half', () => {
    expect(nearestUsableTick(5, 10)).toEqual(10);
  });

  it('rounds down below positive half', () => {
    expect(nearestUsableTick(4, 10)).toEqual(0);
  });

  it('rounds up for negative half', () => {
    expect(nearestUsableTick(-5, 10)).toEqual(-0);
  });

  it('rounds up for negative half', () => {
    expect(nearestUsableTick(-6, 10)).toEqual(-10);
  });

  it('cannot round past MIN_TICK', () => {
    expect(nearestUsableTick(TickMath.MIN_TICK, TickMath.MAX_TICK / 2 + 100)).toEqual(
      -(TickMath.MAX_TICK / 2 + 100),
    );
  });

  it('cannot round past MAX_TICK', () => {
    expect(nearestUsableTick(TickMath.MAX_TICK, TickMath.MAX_TICK / 2 + 100)).toEqual(
      TickMath.MAX_TICK / 2 + 100,
    );
  });
});

================
File: src/utils/nearestUsableTick.ts
================
import invariant from 'tiny-invariant';
import { TickMath } from './tickMath';

/**
 * Returns the closest tick that is nearest a given tick and usable for the given tick spacing
 * @param tick the target tick
 * @param tickSpacing the spacing of the pool
 */
export function nearestUsableTick(tick: number, tickSpacing: number) {
  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS');
  invariant(tickSpacing > 0, 'TICK_SPACING');
  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND');
  const rounded = Math.round(tick / tickSpacing) * tickSpacing;
  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing;
  if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing;
  return rounded;
}

================
File: src/utils/position.ts
================
import { subIn256 } from '../utils';
import { Q128 } from '../constants';

export abstract class PositionLibrary {
  /**
   * Cannot be constructed.
   */
  private constructor() {}

  // replicates the portions of Position#update required to compute unaccounted fees
  public static getTokensOwed(
    feeGrowthInside0LastX128: bigint,
    feeGrowthInside1LastX128: bigint,
    liquidity: bigint,
    feeGrowthInside0X128: bigint,
    feeGrowthInside1X128: bigint,
  ) {
    const tokensOwed0 =
      (subIn256(feeGrowthInside0X128, feeGrowthInside0LastX128) * liquidity) / Q128;

    const tokensOwed1 =
      (subIn256(feeGrowthInside1X128, feeGrowthInside1LastX128) * liquidity) / Q128;

    return [tokensOwed0, tokensOwed1];
  }
}

================
File: src/utils/positionMath.ts
================
import { TickMath } from './tickMath';
import { SqrtPriceMath } from './sqrtPriceMath';
import { ZERO } from '../constants';

function getToken0Amount(
  tickCurrent: number,
  tickLower: number,
  tickUpper: number,
  sqrtRatioX96: bigint,
  liquidity: bigint,
): bigint {
  if (tickCurrent < tickLower) {
    return SqrtPriceMath.getAmount0Delta(
      TickMath.getSqrtRatioAtTick(tickLower),
      TickMath.getSqrtRatioAtTick(tickUpper),
      liquidity,
      false,
    );
  }
  if (tickCurrent < tickUpper) {
    return SqrtPriceMath.getAmount0Delta(
      sqrtRatioX96,
      TickMath.getSqrtRatioAtTick(tickUpper),
      liquidity,
      false,
    );
  }
  return ZERO;
}

function getToken1Amount(
  tickCurrent: number,
  tickLower: number,
  tickUpper: number,
  sqrtRatioX96: bigint,
  liquidity: bigint,
): bigint {
  if (tickCurrent < tickLower) {
    return ZERO;
  }
  if (tickCurrent < tickUpper) {
    return SqrtPriceMath.getAmount1Delta(
      TickMath.getSqrtRatioAtTick(tickLower),
      sqrtRatioX96,
      liquidity,
      false,
    );
  }
  return SqrtPriceMath.getAmount1Delta(
    TickMath.getSqrtRatioAtTick(tickLower),
    TickMath.getSqrtRatioAtTick(tickUpper),
    liquidity,
    false,
  );
}

export const PositionMath = {
  getToken0Amount,
  getToken1Amount,
};

================
File: src/utils/priceParser.ts
================
import { FeeAmount, TICK_SPACINGS } from '../@types';
import { Jetton, Price } from '../entities';
import { encodeSqrtRatioX96 } from './encodeSqrtRatioX96';
import { nearestUsableTick } from './nearestUsableTick';
import { priceToClosestTick } from './priceTickConversions';
import { TickMath } from './tickMath';

export function tryParsePrice(baseJetton?: Jetton, quoteJetton?: Jetton, value?: string) {
  if (!baseJetton || !quoteJetton || !value) {
    return undefined;
  }

  if (!value.match(/^\d*\.?\d+$/)) {
    return undefined;
  }

  const [whole, fraction] = value.split('.');

  const decimals = fraction?.length ?? 0;
  const withoutDecimals = BigInt((whole ?? '') + (fraction ?? ''));

  return new Price(
    baseJetton,
    quoteJetton,
    BigInt(10 ** decimals) * BigInt(10 ** baseJetton.decimals),
    withoutDecimals * BigInt(10 ** quoteJetton.decimals),
  );
}

export function tryParseTick(
  feeAmount?: FeeAmount,
  price?: Price<Jetton, Jetton> | boolean,
): number | undefined {
  if (!price || !feeAmount || typeof price === 'boolean') {
    return undefined;
  }

  let tick: number;

  // check price is within min/max bounds, if outside return min/max
  const sqrtRatioX96 = encodeSqrtRatioX96(price.numerator, price.denominator);

  if (sqrtRatioX96 >= TickMath.MAX_SQRT_RATIO) {
    tick = TickMath.MAX_TICK;
  } else if (sqrtRatioX96 <= TickMath.MIN_SQRT_RATIO) {
    tick = TickMath.MIN_TICK;
  } else {
    // this function is agnostic to the base, will always return the correct tick
    tick = priceToClosestTick(price);
  }

  return nearestUsableTick(tick, TICK_SPACINGS[feeAmount]);
}

================
File: src/utils/priceTickConversions.ts
================
import { Price } from '../entities/price';
import { Jetton } from '../entities/jetton';
import { Q192 } from '../constants';
import { encodeSqrtRatioX96 } from './encodeSqrtRatioX96';
import { TickMath } from './tickMath';

/**
 * Returns a price object corresponding to the input tick and the base/quote token
 * Inputs must be tokens because the address order is used to interpret the price represented by the tick
 * @param baseToken the base token of the price
 * @param quoteToken the quote token of the price
 * @param tick the tick for which to return the price
 */
export function tickToPrice(
  baseToken: Jetton,
  quoteToken: Jetton,
  tick: number,
): Price<Jetton, Jetton> {
  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);

  const ratioX192 = sqrtRatioX96 * sqrtRatioX96;

  return baseToken.sortsBefore(quoteToken)
    ? new Price(baseToken, quoteToken, Q192, ratioX192)
    : new Price(baseToken, quoteToken, ratioX192, Q192);
}

/**
 * Returns the first tick for which the given price is greater than or equal to the tick price
 * @param price for which to return the closest tick that represents a price less than or equal to the input price,
 * i.e. the price of the returned tick is less than or equal to the input price
 */
export function priceToClosestTick(price: Price<Jetton, Jetton>): number {
  const sorted = price.baseJetton.sortsBefore(price.quoteJetton);

  const sqrtRatioX96 = sorted
    ? encodeSqrtRatioX96(price.numerator, price.denominator)
    : encodeSqrtRatioX96(price.denominator, price.numerator);

  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96);
  const nextTickPrice = tickToPrice(price.baseJetton, price.quoteJetton, tick + 1);
  if (sorted) {
    if (!price.lessThan(nextTickPrice)) {
      tick++;
    }
  } else if (!price.greaterThan(nextTickPrice)) {
    tick++;
  }
  return tick;
}

================
File: src/utils/sqrtPriceMath.ts
================
import { MaxUint256 } from '../constants';
import invariant from 'tiny-invariant';
import { ONE, ZERO, Q96, MaxUint160 } from '../constants';
import { FullMath } from './fullMath';

function multiplyIn256(x: bigint, y: bigint): bigint {
  const product = x * y;
  return product & MaxUint256;
}

function addIn256(x: bigint, y: bigint): bigint {
  const sum = x + y;
  return sum & MaxUint256;
}

export function mulDivRoundingUp(a: bigint, b: bigint, denominator: bigint): bigint {
  const product = a * b;
  let result = product / denominator;
  if (product % denominator != BigInt(0)) {
    result += BigInt(1);
  }
  return result;
}

export abstract class SqrtPriceMath {
  /**
   * Cannot be constructed.
   */
  private constructor() {}

  public static getAmount0Delta(
    sqrtRatioAX96: bigint,
    sqrtRatioBX96: bigint,
    liquidity: bigint,
    roundUp: boolean,
  ): bigint {
    if (sqrtRatioAX96 > sqrtRatioBX96) {
      [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];
    }

    const numerator1 = liquidity << 96n;
    const numerator2 = sqrtRatioBX96 - sqrtRatioAX96;

    return roundUp
      ? FullMath.mulDivRoundingUp(
          FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),
          ONE,
          sqrtRatioAX96,
        )
      : (numerator1 * numerator2) / sqrtRatioBX96 / sqrtRatioAX96;
  }

  public static getAmount1Delta(
    sqrtRatioAX96: bigint,
    sqrtRatioBX96: bigint,
    liquidity: bigint,
    roundUp: boolean,
  ): bigint {
    if (sqrtRatioAX96 > sqrtRatioBX96) {
      [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];
    }

    return roundUp
      ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96)
      : (liquidity * (sqrtRatioBX96 - sqrtRatioAX96)) / Q96;
  }

  public static getNextSqrtPriceFromInput(
    sqrtPX96: bigint,
    liquidity: bigint,
    amountIn: bigint,
    zeroForOne: boolean,
  ): bigint {
    invariant(sqrtPX96 > ZERO);
    invariant(liquidity > ZERO);

    return zeroForOne
      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)
      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);
  }

  public static getNextSqrtPriceFromOutput(
    sqrtPX96: bigint,
    liquidity: bigint,
    amountOut: bigint,
    zeroForOne: boolean,
  ): bigint {
    invariant(sqrtPX96 > ZERO);
    invariant(liquidity > ZERO);

    return zeroForOne
      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)
      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);
  }

  private static getNextSqrtPriceFromAmount0RoundingUp(
    sqrtPX96: bigint,
    liquidity: bigint,
    amount: bigint,
    add: boolean,
  ): bigint {
    if (amount === ZERO) return sqrtPX96;
    const numerator1 = liquidity << 96n;

    if (add) {
      const product = multiplyIn256(amount, sqrtPX96);
      if (product / amount === sqrtPX96) {
        const denominator = addIn256(numerator1, product);
        if (denominator >= numerator1) {
          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);
        }
      }

      return FullMath.mulDivRoundingUp(numerator1, ONE, numerator1 / sqrtPX96 + amount);
    }
    const product = multiplyIn256(amount, sqrtPX96);

    invariant(product / amount === sqrtPX96);
    invariant(numerator1 > product);
    const denominator = numerator1 - product;
    return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);
  }

  private static getNextSqrtPriceFromAmount1RoundingDown(
    sqrtPX96: bigint,
    liquidity: bigint,
    amount: bigint,
    add: boolean,
  ): bigint {
    if (add) {
      const quotient =
        amount <= MaxUint160 ? (amount << 96n) / liquidity : (amount * Q96) / liquidity;

      return sqrtPX96 + quotient;
    }
    const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity);

    invariant(sqrtPX96 > quotient);
    return sqrtPX96 - quotient;
  }
}

================
File: src/utils/swapMath.ts
================
import { FeeAmount } from '../@types';
import { NEGATIVE_ONE, ZERO, MAX_FEE } from '../constants';
import { FullMath } from './fullMath';
import { SqrtPriceMath } from './sqrtPriceMath';

export abstract class SwapMath {
  /**
   * Cannot be constructed.
   */
  private constructor() {}

  public static computeSwapStep(
    sqrtRatioCurrentX96: bigint,
    sqrtRatioTargetX96: bigint,
    liquidity: bigint,
    amountRemaining: bigint,
    feePips: FeeAmount,
  ): [bigint, bigint, bigint, bigint] {
    const returnValues: Partial<{
      sqrtRatioNextX96: bigint;
      amountIn: bigint;
      amountOut: bigint;
      feeAmount: bigint;
    }> = {};

    const zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;
    const exactIn = amountRemaining >= ZERO;

    if (exactIn) {
      const amountRemainingLessFee = (amountRemaining * (MAX_FEE - BigInt(feePips))) / MAX_FEE;
      returnValues.amountIn = zeroForOne
        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)
        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);
      if (amountRemainingLessFee >= returnValues.amountIn!) {
        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;
      } else {
        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(
          sqrtRatioCurrentX96,
          liquidity,
          amountRemainingLessFee,
          zeroForOne,
        );
      }
    } else {
      returnValues.amountOut = zeroForOne
        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)
        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);
      if (amountRemaining * NEGATIVE_ONE >= returnValues.amountOut) {
        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;
      } else {
        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(
          sqrtRatioCurrentX96,
          liquidity,
          amountRemaining * NEGATIVE_ONE,
          zeroForOne,
        );
      }
    }

    const max = sqrtRatioTargetX96 === returnValues.sqrtRatioNextX96;

    if (zeroForOne) {
      returnValues.amountIn =
        max && exactIn
          ? returnValues.amountIn
          : SqrtPriceMath.getAmount0Delta(
              returnValues.sqrtRatioNextX96,
              sqrtRatioCurrentX96,
              liquidity,
              true,
            );
      returnValues.amountOut =
        max && !exactIn
          ? returnValues.amountOut
          : SqrtPriceMath.getAmount1Delta(
              returnValues.sqrtRatioNextX96,
              sqrtRatioCurrentX96,
              liquidity,
              false,
            );
    } else {
      returnValues.amountIn =
        max && exactIn
          ? returnValues.amountIn
          : SqrtPriceMath.getAmount1Delta(
              sqrtRatioCurrentX96,
              returnValues.sqrtRatioNextX96,
              liquidity,
              true,
            );
      returnValues.amountOut =
        max && !exactIn
          ? returnValues.amountOut
          : SqrtPriceMath.getAmount0Delta(
              sqrtRatioCurrentX96,
              returnValues.sqrtRatioNextX96,
              liquidity,
              false,
            );
    }

    if (!exactIn && returnValues.amountOut! > amountRemaining * NEGATIVE_ONE) {
      returnValues.amountOut = amountRemaining * NEGATIVE_ONE;
    }

    if (exactIn && returnValues.sqrtRatioNextX96 !== sqrtRatioTargetX96) {
      // we didn't reach the target, so take the remainder of the maximum input as fee
      returnValues.feeAmount = amountRemaining - returnValues.amountIn!;
    } else {
      returnValues.feeAmount = FullMath.mulDivRoundingUp(
        returnValues.amountIn!,
        BigInt(feePips),
        MAX_FEE - BigInt(feePips),
      );
    }

    return [
      returnValues.sqrtRatioNextX96!,
      returnValues.amountIn!,
      returnValues.amountOut!,
      returnValues.feeAmount!,
    ];
  }
}

================
File: src/utils/tickLibrary.ts
================
import { ZERO } from '../constants';

interface FeeGrowthOutside {
  feeGrowthOutside0X128: bigint;
  feeGrowthOutside1X128: bigint;
}

const Q256 = 2n ** 256n;

export function subIn256(x: bigint, y: bigint): bigint {
  const difference = x - y;

  if (difference < ZERO) {
    return Q256 + difference;
  }
  return difference;
}

export abstract class TickLibrary {
  /**
   * Cannot be constructed.
   */
  private constructor() {}

  public static getFeeGrowthInside(
    feeGrowthOutsideLower: FeeGrowthOutside,
    feeGrowthOutsideUpper: FeeGrowthOutside,
    tickLower: number,
    tickUpper: number,
    tickCurrent: number,
    feeGrowthGlobal0X128: bigint,
    feeGrowthGlobal1X128: bigint,
  ) {
    let feeGrowthBelow0X128: bigint;
    let feeGrowthBelow1X128: bigint;
    if (tickCurrent >= tickLower) {
      feeGrowthBelow0X128 = feeGrowthOutsideLower.feeGrowthOutside0X128;
      feeGrowthBelow1X128 = feeGrowthOutsideLower.feeGrowthOutside1X128;
    } else {
      feeGrowthBelow0X128 = subIn256(
        feeGrowthGlobal0X128,
        feeGrowthOutsideLower.feeGrowthOutside0X128,
      );
      feeGrowthBelow1X128 = subIn256(
        feeGrowthGlobal1X128,
        feeGrowthOutsideLower.feeGrowthOutside1X128,
      );
    }

    let feeGrowthAbove0X128: bigint;
    let feeGrowthAbove1X128: bigint;
    if (tickCurrent < tickUpper) {
      feeGrowthAbove0X128 = feeGrowthOutsideUpper.feeGrowthOutside0X128;
      feeGrowthAbove1X128 = feeGrowthOutsideUpper.feeGrowthOutside1X128;
    } else {
      feeGrowthAbove0X128 = subIn256(
        feeGrowthGlobal0X128,
        feeGrowthOutsideUpper.feeGrowthOutside0X128,
      );
      feeGrowthAbove1X128 = subIn256(
        feeGrowthGlobal1X128,
        feeGrowthOutsideUpper.feeGrowthOutside1X128,
      );
    }

    return [
      subIn256(subIn256(feeGrowthGlobal0X128, feeGrowthBelow0X128), feeGrowthAbove0X128),
      subIn256(subIn256(feeGrowthGlobal1X128, feeGrowthBelow1X128), feeGrowthAbove1X128),
    ];
  }
}

================
File: src/utils/tickList.ts
================
import invariant from 'tiny-invariant';
import { Tick } from '../entities/tick';
import { ZERO } from '../constants';
import { isSorted } from './isSorted';

function tickComparator(a: Tick, b: Tick) {
  return a.index - b.index;
}

/**
 * Utility methods for interacting with sorted lists of ticks
 */
export abstract class TickList {
  /**
   * Cannot be constructed
   */
  private constructor() {}

  public static validateList(ticks: Tick[], tickSpacing: number) {
    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO');
    // ensure ticks are spaced appropriately
    invariant(
      ticks.every(({ index }) => index % tickSpacing === 0),
      'TICK_SPACING',
    );

    // ensure tick liquidity deltas sum to 0
    invariant(
      ticks.reduce((accumulator, { liquidityNet }) => accumulator + liquidityNet, ZERO) === ZERO,
      'ZERO_NET',
    );

    invariant(isSorted(ticks, tickComparator), 'SORTED');
  }

  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {
    invariant(ticks.length > 0, 'LENGTH');
    return tick < ticks[0].index;
  }

  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {
    invariant(ticks.length > 0, 'LENGTH');
    return tick >= ticks[ticks.length - 1].index;
  }

  public static getTick(ticks: readonly Tick[], index: number): Tick {
    const tick = ticks[this.binarySearch(ticks, index)];
    invariant(tick.index === index, 'NOT_CONTAINED');
    return tick;
  }

  /**
   * Finds the largest tick in the list of ticks that is less than or equal to tick
   * @param ticks list of ticks
   * @param tick tick to find the largest tick that is less than or equal to tick
   * @private
   */
  private static binarySearch(ticks: readonly Tick[], tick: number): number {
    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');

    let l = 0;
    let r = ticks.length - 1;
    let i;
    while (true) {
      i = Math.floor((l + r) / 2);

      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {
        return i;
      }

      if (ticks[i].index < tick) {
        l = i + 1;
      } else {
        r = i - 1;
      }
    }
  }

  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {
    if (lte) {
      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');
      if (TickList.isAtOrAboveLargest(ticks, tick)) {
        return ticks[ticks.length - 1];
      }
      const index = this.binarySearch(ticks, tick);
      return ticks[index];
    }
    invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST');
    if (this.isBelowSmallest(ticks, tick)) {
      return ticks[0];
    }
    const index = this.binarySearch(ticks, tick);
    return ticks[index + 1];
  }

  public static nextInitializedTickWithinOneWord(
    ticks: readonly Tick[],
    tick: number,
    lte: boolean,
    tickSpacing: number,
  ): [number, boolean] {
    const compressed = Math.floor(tick / tickSpacing); // matches rounding in the code

    if (lte) {
      const wordPos = compressed >> 8;
      const minimum = (wordPos << 8) * tickSpacing;

      if (TickList.isBelowSmallest(ticks, tick)) {
        return [minimum, false];
      }

      const { index } = TickList.nextInitializedTick(ticks, tick, lte);
      const nextInitializedTick = Math.max(minimum, index);
      return [nextInitializedTick, nextInitializedTick === index];
    }
    const wordPos = (compressed + 1) >> 8;
    const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing;

    if (this.isAtOrAboveLargest(ticks, tick)) {
      return [maximum, false];
    }

    const { index } = this.nextInitializedTick(ticks, tick, lte);
    const nextInitializedTick = Math.min(maximum, index);
    return [nextInitializedTick, nextInitializedTick === index];
  }

  public static countInitializedTicksCrossed(
    ticks: readonly Tick[],
    tickBefore: number,
    tickAfter: number,
  ) {
    if (tickBefore === tickAfter) {
      return 0;
    }
    const beforeIndex = this.binarySearch(ticks, tickBefore);
    const afterIndex = this.binarySearch(ticks, tickAfter);
    return Math.abs(beforeIndex - afterIndex);
  }
}

================
File: src/utils/tickMath.test.ts
================
import { describe, it, expect } from 'bun:test';
import { ONE } from '../constants';
import { TickMath } from './tickMath';

describe('TickMath', () => {
  describe('#MIN_TICK', () => {
    it('equals correct value', () => {
      expect(TickMath.MIN_TICK).toEqual(-887272);
    });
  });

  describe('#MAX_TICK', () => {
    it('equals correct value', () => {
      expect(TickMath.MAX_TICK).toEqual(887272);
    });
  });

  describe('#getSqrtRatioAtTick', () => {
    it('throws for non integer', () => {
      expect(() => TickMath.getSqrtRatioAtTick(1.5)).toThrow('TICK');
    });

    it('throws for tick too small', () => {
      expect(() => TickMath.getSqrtRatioAtTick(TickMath.MIN_TICK - 1)).toThrow('TICK');
    });

    it('throws for tick too large', () => {
      expect(() => TickMath.getSqrtRatioAtTick(TickMath.MAX_TICK + 1)).toThrow('TICK');
    });

    it('returns the correct value for min tick', () => {
      expect(TickMath.getSqrtRatioAtTick(TickMath.MIN_TICK)).toEqual(TickMath.MIN_SQRT_RATIO);
    });

    it('returns the correct value for tick 0', () => {
      expect(TickMath.getSqrtRatioAtTick(0)).toEqual(1n << 96n);
    });

    it('returns the correct value for max tick', () => {
      expect(TickMath.getSqrtRatioAtTick(TickMath.MAX_TICK)).toEqual(TickMath.MAX_SQRT_RATIO);
    });
  });

  describe('#getTickAtSqrtRatio', () => {
    it('returns the correct value for sqrt ratio at min tick', () => {
      expect(TickMath.getTickAtSqrtRatio(TickMath.MIN_SQRT_RATIO)).toEqual(TickMath.MIN_TICK);
    });
    it('returns the correct value for sqrt ratio at max tick', () => {
      expect(TickMath.getTickAtSqrtRatio(TickMath.MAX_SQRT_RATIO - ONE)).toEqual(
        TickMath.MAX_TICK - 1,
      );
    });
  });
});

================
File: src/utils/tickMath.ts
================
import { MaxUint256 } from '../constants';
import invariant from 'tiny-invariant';
import { ONE, ZERO } from '../constants';
import { mostSignificantBit } from './mostSignificantBit';

function mulShift(val: bigint, mulBy: string): bigint {
  return (val * BigInt(mulBy)) >> 128n;
}

const Q32 = 2n ** 32n;

export abstract class TickMath {
  /**
   * Cannot be constructed.
   */
  private constructor() {}

  /**
   * The minimum tick that can be used on any pool.
   */
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  public static MIN_TICK: number = -887272;

  /**
   * The maximum tick that can be used on any pool.
   */
  public static MAX_TICK: number = -TickMath.MIN_TICK;

  /**
   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.
   */
  public static MIN_SQRT_RATIO = 4295128739n;

  /**
   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.
   */
  public static MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342n;

  /**
   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick
   * @param tick the tick for which to compute the sqrt ratio
   */
  public static getSqrtRatioAtTick(tick: number): bigint {
    invariant(
      tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick),
      'TICK',
    );
    const absTick: number = tick < 0 ? tick * -1 : tick;

    let ratio: bigint =
      (absTick & 0x1) != 0
        ? BigInt('0xfffcb933bd6fad37aa2d162d1a594001')
        : BigInt('0x100000000000000000000000000000000');
    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a');
    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc');
    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0');
    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644');
    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0');
    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861');
    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053');
    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4');
    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54');
    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3');
    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9');
    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825');
    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5');
    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7');
    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6');
    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9');
    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604');
    if ((absTick & 0x40000) != 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98');
    if ((absTick & 0x80000) != 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2');

    if (tick > 0) ratio = MaxUint256 / ratio;

    // back to Q96
    return ratio % Q32 > ZERO ? ratio / Q32 + ONE : ratio / Q32;
  }

  /**
   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96
   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96
   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick
   */
  public static getTickAtSqrtRatio(sqrtRatioX96: bigint): number {
    invariant(
      sqrtRatioX96 >= TickMath.MIN_SQRT_RATIO && sqrtRatioX96 < TickMath.MAX_SQRT_RATIO,
      'SQRT_RATIO',
    );

    const sqrtRatioX128 = sqrtRatioX96 << 32n;

    const msb = mostSignificantBit(sqrtRatioX128);

    let r: bigint;
    if (BigInt(msb) >= 128n) {
      r = sqrtRatioX128 >> BigInt(msb - 127);
    } else {
      r = sqrtRatioX128 << BigInt(127 - msb);
    }

    let log_2: bigint = (BigInt(msb) - 128n) << 64n;

    for (let i = 0; i < 14; i++) {
      r = (r * r) >> 127n;
      const f = r >> 128n;
      // eslint-disable-next-line operator-assignment
      log_2 = log_2 | (f << BigInt(63 - i));
      // eslint-disable-next-line operator-assignment
      r = r >> f;
    }

    const log_sqrt10001 = log_2 * 255738958999603826347141n;

    const tickLow = Number((log_sqrt10001 - 3402992956809132418596140100660247210n) >> 128n);
    const tickHigh = Number((log_sqrt10001 + 291339464771989622907027621153398088495n) >> 128n);

    return tickLow === tickHigh
      ? tickLow
      : TickMath.getSqrtRatioAtTick(tickHigh) <= sqrtRatioX96
        ? tickHigh
        : tickLow;
  }
}

================
File: src/index.ts
================
export * from './contracts';
export * from './tlbs';
export * from './utils';
export * from './functions';
export * from './entities';
export * from './messages';

================
File: src/script.ts
================
import { getHttpEndpoint } from '@orbs-network/ton-access';
import { Address, OpenedContract } from '@ton/core';
import { TonClient } from '@ton/ton';
import { PoolWrapper } from './contracts';
import { Jetton, JettonAmount } from './entities';
import { PoolMessageBuilder } from './messages';
import { TonApiClient } from '@ton-api/client';
import { WalletVersion } from './@types';

const poolAddr = 'EQCtpowhg8efNm364J51zDiKNT_CNnApUU-bor5Jpd7HzhR3';

const main = async () => {
  const tc = new TonClient({
    endpoint: await getHttpEndpoint({
      network: 'testnet',
    }),
  });
  // const poolContract = new PoolWrapper.Pool(Address.parse(poolAddr));
  // const pool = client.open(poolContract) as OpenedContract<PoolWrapper.Pool>;
  // const ticksInfo = await pool.getTicks().catch((err) => {
  //   console.log(err);
  //   return null;
  // });
  // console.log(ticksInfo);

  // const usdc = new Jetton('EQCF8jfV05w00abPcvsW64XNanQ9vateIhCLSkNAQ7Qfo-WW', 9, 'USDC');
  // const usdcAmount = JettonAmount.fromRawAmount(usdc, 1000000000000000000n);
  // console.log(usdcAmount.toSignificant());

  const ta = new TonApiClient({
    baseUrl: `https://testnet.tonapi.io`,
    apiKey: 'AGSNOVUCGDJF32AAAAANN2LHR6HNAGLSAAHD4X3MNJGOJNJ45MAK4JNTWOT3V5RHGNJC5QY',
  });
  const usdc = new Jetton('EQCF8jfV05w00abPcvsW64XNanQ9vateIhCLSkNAQ7Qfo-WW', 9, 'USDC');
  const orb = new Jetton('EQCqaCb9S8wqYjPT1d18Z0f-HemRnEDm4heFyNfPKMESAIjQ', 9, 'Orbiton Swap');
  await Promise.all([
    usdc.setWalletAddress(tc, Address.parse('0QBkxNmedeIS12e9bD0PO6nPaRMpU3dnijh90OH5Dtjqpbjb')),
    orb.setWalletAddress(tc, Address.parse('0QBkxNmedeIS12e9bD0PO6nPaRMpU3dnijh90OH5Dtjqpbjb')),
  ]);
  const { messages, result } = await PoolMessageBuilder.createEmulatedMintMessage(
    ta,
    WalletVersion.V4R2,
    Address.parse('0QBkxNmedeIS12e9bD0PO6nPaRMpU3dnijh90OH5Dtjqpbjb'),
    Address.parse('EQCqaCb9S8wqYjPT1d18Z0f-HemRnEDm4heFyNfPKMESAIjQ'),
    JettonAmount.fromRawAmount(usdc, 1000000000000n),
    JettonAmount.fromRawAmount(orb, 1000000000000n),
    3000,
    60,
    -240000n,
    120000n,
    316475945059n,
    Address.parse('0QBkxNmedeIS12e9bD0PO6nPaRMpU3dnijh90OH5Dtjqpbjb'),
  );
  console.log(result);
};

main().catch((er) => console.log(er));

================
File: .dockerignore
================
**/node_modules/
**/dist
.git
npm-debug.log
.coverage
.coverage.*
.aws
.husky
**/target
**/pkg
**/tests
*.md
# env variables
.env
.env**
# config
config*.{yaml,yml}

================
File: .eslintrc.json
================
{
  "root": true,
  "env": {
    "node": true,
    "commonjs": true,
    "es2021": true
  },
  "extends": ["plugin:@typescript-eslint/recommended", "prettier"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest"
  },
  "settings": {
    "import/resolver": {
      "node": true,
      "typescript": true
    }
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    "no-console": "off",
    "semi": "error"
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-explicit-any": ["warn"],
        "@typescript-eslint/ban-types": ["off"],
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_",
            "caughtErrorsIgnorePattern": "^_"
          }
        ],
        "security/detect-object-injection": "off"
      }
    },
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "warn"
      }
    }
  ]
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist
build

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

.nx
**/packages/*/build/

# data
*.duckdb
*.duckdb.*
# Yarn 3 files
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# DuckDB
*.duckdb
*.*.wal

# Drizzle
data/*
drizzle/*

================
File: .prettierrc
================
{
  "printWidth": 100,
  "tabWidth": 2,
  "singleQuote": true,
  "bracketSpacing": true,
  "semi": true
}

================
File: bun.lock
================
{
  "lockfileVersion": 1,
  "workspaces": {
    "": {
      "name": "root",
      "dependencies": {
        "@ton-api/client": "^0.3.1",
        "big.js": "^6.2.2",
        "bignumber.js": "^9.1.2",
        "decimal.js": "^10.4.3",
        "decimal.js-light": "^2.5.1",
        "tiny-invariant": "^1.3.3",
        "toformat": "^2.0.0",
      },
      "devDependencies": {
        "@orbs-network/ton-access": "^2.3.3",
        "@ton-community/tlb-codegen": "^1.1.0",
        "@ton/blueprint": "^0.24.0",
        "@ton/core": "~0",
        "@ton/crypto": "^3.3.0",
        "@ton/sandbox": "^0.22.0",
        "@ton/test-utils": "^0.4.2",
        "@ton/ton": "^15.0.0",
        "@types/big.js": "^6.2.2",
        "@types/bun": "^1.2.5",
        "@types/jest": "^29.5.13",
        "@types/node": "^22.5.5",
        "jest": "^29.7.0",
        "prettier": "^3.3.3",
        "ts-jest": "^29.2.5",
        "ts-node": "^10.9.2",
        "typescript": "^5.6.2",
      },
    },
  },
  "packages": {
    "@ampproject/remapping": ["@ampproject/remapping@2.3.0", "", { "dependencies": { "@jridgewell/gen-mapping": "^0.3.5", "@jridgewell/trace-mapping": "^0.3.24" } }, "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw=="],

    "@assemblyscript/loader": ["@assemblyscript/loader@0.9.4", "", {}, "sha512-HazVq9zwTVwGmqdwYzu7WyQ6FQVZ7SwET0KKQuKm55jD0IfUpZgN0OPIiZG3zV1iSrVYcN0bdwLRXI/VNCYsUA=="],

    "@babel/code-frame": ["@babel/code-frame@7.26.2", "", { "dependencies": { "@babel/helper-validator-identifier": "^7.25.9", "js-tokens": "^4.0.0", "picocolors": "^1.0.0" } }, "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ=="],

    "@babel/compat-data": ["@babel/compat-data@7.26.8", "", {}, "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ=="],

    "@babel/core": ["@babel/core@7.26.9", "", { "dependencies": { "@ampproject/remapping": "^2.2.0", "@babel/code-frame": "^7.26.2", "@babel/generator": "^7.26.9", "@babel/helper-compilation-targets": "^7.26.5", "@babel/helper-module-transforms": "^7.26.0", "@babel/helpers": "^7.26.9", "@babel/parser": "^7.26.9", "@babel/template": "^7.26.9", "@babel/traverse": "^7.26.9", "@babel/types": "^7.26.9", "convert-source-map": "^2.0.0", "debug": "^4.1.0", "gensync": "^1.0.0-beta.2", "json5": "^2.2.3", "semver": "^6.3.1" } }, "sha512-lWBYIrF7qK5+GjY5Uy+/hEgp8OJWOD/rpy74GplYRhEauvbHDeFB8t5hPOZxCZ0Oxf4Cc36tK51/l3ymJysrKw=="],

    "@babel/generator": ["@babel/generator@7.26.9", "", { "dependencies": { "@babel/parser": "^7.26.9", "@babel/types": "^7.26.9", "@jridgewell/gen-mapping": "^0.3.5", "@jridgewell/trace-mapping": "^0.3.25", "jsesc": "^3.0.2" } }, "sha512-kEWdzjOAUMW4hAyrzJ0ZaTOu9OmpyDIQicIh0zg0EEcEkYXZb2TjtBhnHi2ViX7PKwZqF4xwqfAm299/QMP3lg=="],

    "@babel/helper-compilation-targets": ["@babel/helper-compilation-targets@7.26.5", "", { "dependencies": { "@babel/compat-data": "^7.26.5", "@babel/helper-validator-option": "^7.25.9", "browserslist": "^4.24.0", "lru-cache": "^5.1.1", "semver": "^6.3.1" } }, "sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA=="],

    "@babel/helper-module-imports": ["@babel/helper-module-imports@7.25.9", "", { "dependencies": { "@babel/traverse": "^7.25.9", "@babel/types": "^7.25.9" } }, "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw=="],

    "@babel/helper-module-transforms": ["@babel/helper-module-transforms@7.26.0", "", { "dependencies": { "@babel/helper-module-imports": "^7.25.9", "@babel/helper-validator-identifier": "^7.25.9", "@babel/traverse": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0" } }, "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw=="],

    "@babel/helper-plugin-utils": ["@babel/helper-plugin-utils@7.26.5", "", {}, "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg=="],

    "@babel/helper-string-parser": ["@babel/helper-string-parser@7.25.9", "", {}, "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA=="],

    "@babel/helper-validator-identifier": ["@babel/helper-validator-identifier@7.25.9", "", {}, "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ=="],

    "@babel/helper-validator-option": ["@babel/helper-validator-option@7.25.9", "", {}, "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw=="],

    "@babel/helpers": ["@babel/helpers@7.26.9", "", { "dependencies": { "@babel/template": "^7.26.9", "@babel/types": "^7.26.9" } }, "sha512-Mz/4+y8udxBKdmzt/UjPACs4G3j5SshJJEFFKxlCGPydG4JAHXxjWjAwjd09tf6oINvl1VfMJo+nB7H2YKQ0dA=="],

    "@babel/parser": ["@babel/parser@7.26.9", "", { "dependencies": { "@babel/types": "^7.26.9" }, "bin": "./bin/babel-parser.js" }, "sha512-81NWa1njQblgZbQHxWHpxxCzNsa3ZwvFqpUg7P+NNUU6f3UU2jBEg4OlF/J6rl8+PQGh1q6/zWScd001YwcA5A=="],

    "@babel/plugin-syntax-async-generators": ["@babel/plugin-syntax-async-generators@7.8.4", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw=="],

    "@babel/plugin-syntax-bigint": ["@babel/plugin-syntax-bigint@7.8.3", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg=="],

    "@babel/plugin-syntax-class-properties": ["@babel/plugin-syntax-class-properties@7.12.13", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.12.13" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA=="],

    "@babel/plugin-syntax-class-static-block": ["@babel/plugin-syntax-class-static-block@7.14.5", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.14.5" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw=="],

    "@babel/plugin-syntax-import-attributes": ["@babel/plugin-syntax-import-attributes@7.26.0", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A=="],

    "@babel/plugin-syntax-import-meta": ["@babel/plugin-syntax-import-meta@7.10.4", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.10.4" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g=="],

    "@babel/plugin-syntax-json-strings": ["@babel/plugin-syntax-json-strings@7.8.3", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA=="],

    "@babel/plugin-syntax-jsx": ["@babel/plugin-syntax-jsx@7.25.9", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA=="],

    "@babel/plugin-syntax-logical-assignment-operators": ["@babel/plugin-syntax-logical-assignment-operators@7.10.4", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.10.4" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig=="],

    "@babel/plugin-syntax-nullish-coalescing-operator": ["@babel/plugin-syntax-nullish-coalescing-operator@7.8.3", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ=="],

    "@babel/plugin-syntax-numeric-separator": ["@babel/plugin-syntax-numeric-separator@7.10.4", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.10.4" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug=="],

    "@babel/plugin-syntax-object-rest-spread": ["@babel/plugin-syntax-object-rest-spread@7.8.3", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA=="],

    "@babel/plugin-syntax-optional-catch-binding": ["@babel/plugin-syntax-optional-catch-binding@7.8.3", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q=="],

    "@babel/plugin-syntax-optional-chaining": ["@babel/plugin-syntax-optional-chaining@7.8.3", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.8.0" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg=="],

    "@babel/plugin-syntax-private-property-in-object": ["@babel/plugin-syntax-private-property-in-object@7.14.5", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.14.5" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg=="],

    "@babel/plugin-syntax-top-level-await": ["@babel/plugin-syntax-top-level-await@7.14.5", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.14.5" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw=="],

    "@babel/plugin-syntax-typescript": ["@babel/plugin-syntax-typescript@7.25.9", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.25.9" }, "peerDependencies": { "@babel/core": "^7.0.0-0" } }, "sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ=="],

    "@babel/template": ["@babel/template@7.26.9", "", { "dependencies": { "@babel/code-frame": "^7.26.2", "@babel/parser": "^7.26.9", "@babel/types": "^7.26.9" } }, "sha512-qyRplbeIpNZhmzOysF/wFMuP9sctmh2cFzRAZOn1YapxBsE1i9bJIY586R/WBLfLcmcBlM8ROBiQURnnNy+zfA=="],

    "@babel/traverse": ["@babel/traverse@7.26.9", "", { "dependencies": { "@babel/code-frame": "^7.26.2", "@babel/generator": "^7.26.9", "@babel/parser": "^7.26.9", "@babel/template": "^7.26.9", "@babel/types": "^7.26.9", "debug": "^4.3.1", "globals": "^11.1.0" } }, "sha512-ZYW7L+pL8ahU5fXmNbPF+iZFHCv5scFak7MZ9bwaRPLUhHh7QQEMjZUg0HevihoqCM5iSYHN61EyCoZvqC+bxg=="],

    "@babel/types": ["@babel/types@7.26.9", "", { "dependencies": { "@babel/helper-string-parser": "^7.25.9", "@babel/helper-validator-identifier": "^7.25.9" } }, "sha512-Y3IR1cRnOxOCDvMmNiym7XpXQ93iGDDPHx+Zj+NM+rg0fBaShfQLkg+hKPaZCEvg5N/LeCo4+Rj/i3FuJsIQaw=="],

    "@bcoe/v8-coverage": ["@bcoe/v8-coverage@0.2.3", "", {}, "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw=="],

    "@cspotcode/source-map-support": ["@cspotcode/source-map-support@0.8.1", "", { "dependencies": { "@jridgewell/trace-mapping": "0.3.9" } }, "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw=="],

    "@ipld/dag-pb": ["@ipld/dag-pb@2.1.18", "", { "dependencies": { "multiformats": "^9.5.4" } }, "sha512-ZBnf2fuX9y3KccADURG5vb9FaOeMjFkCrNysB0PtftME/4iCTjxfaLoNq/IAh5fTqUOMXvryN6Jyka4ZGuMLIg=="],

    "@istanbuljs/load-nyc-config": ["@istanbuljs/load-nyc-config@1.1.0", "", { "dependencies": { "camelcase": "^5.3.1", "find-up": "^4.1.0", "get-package-type": "^0.1.0", "js-yaml": "^3.13.1", "resolve-from": "^5.0.0" } }, "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ=="],

    "@istanbuljs/schema": ["@istanbuljs/schema@0.1.3", "", {}, "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA=="],

    "@jest/console": ["@jest/console@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "@types/node": "*", "chalk": "^4.0.0", "jest-message-util": "^29.7.0", "jest-util": "^29.7.0", "slash": "^3.0.0" } }, "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg=="],

    "@jest/core": ["@jest/core@29.7.0", "", { "dependencies": { "@jest/console": "^29.7.0", "@jest/reporters": "^29.7.0", "@jest/test-result": "^29.7.0", "@jest/transform": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "ansi-escapes": "^4.2.1", "chalk": "^4.0.0", "ci-info": "^3.2.0", "exit": "^0.1.2", "graceful-fs": "^4.2.9", "jest-changed-files": "^29.7.0", "jest-config": "^29.7.0", "jest-haste-map": "^29.7.0", "jest-message-util": "^29.7.0", "jest-regex-util": "^29.6.3", "jest-resolve": "^29.7.0", "jest-resolve-dependencies": "^29.7.0", "jest-runner": "^29.7.0", "jest-runtime": "^29.7.0", "jest-snapshot": "^29.7.0", "jest-util": "^29.7.0", "jest-validate": "^29.7.0", "jest-watcher": "^29.7.0", "micromatch": "^4.0.4", "pretty-format": "^29.7.0", "slash": "^3.0.0", "strip-ansi": "^6.0.0" }, "peerDependencies": { "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0" }, "optionalPeers": ["node-notifier"] }, "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg=="],

    "@jest/environment": ["@jest/environment@29.7.0", "", { "dependencies": { "@jest/fake-timers": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "jest-mock": "^29.7.0" } }, "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw=="],

    "@jest/expect": ["@jest/expect@29.7.0", "", { "dependencies": { "expect": "^29.7.0", "jest-snapshot": "^29.7.0" } }, "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ=="],

    "@jest/expect-utils": ["@jest/expect-utils@29.7.0", "", { "dependencies": { "jest-get-type": "^29.6.3" } }, "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA=="],

    "@jest/fake-timers": ["@jest/fake-timers@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "@sinonjs/fake-timers": "^10.0.2", "@types/node": "*", "jest-message-util": "^29.7.0", "jest-mock": "^29.7.0", "jest-util": "^29.7.0" } }, "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ=="],

    "@jest/globals": ["@jest/globals@29.7.0", "", { "dependencies": { "@jest/environment": "^29.7.0", "@jest/expect": "^29.7.0", "@jest/types": "^29.6.3", "jest-mock": "^29.7.0" } }, "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ=="],

    "@jest/reporters": ["@jest/reporters@29.7.0", "", { "dependencies": { "@bcoe/v8-coverage": "^0.2.3", "@jest/console": "^29.7.0", "@jest/test-result": "^29.7.0", "@jest/transform": "^29.7.0", "@jest/types": "^29.6.3", "@jridgewell/trace-mapping": "^0.3.18", "@types/node": "*", "chalk": "^4.0.0", "collect-v8-coverage": "^1.0.0", "exit": "^0.1.2", "glob": "^7.1.3", "graceful-fs": "^4.2.9", "istanbul-lib-coverage": "^3.0.0", "istanbul-lib-instrument": "^6.0.0", "istanbul-lib-report": "^3.0.0", "istanbul-lib-source-maps": "^4.0.0", "istanbul-reports": "^3.1.3", "jest-message-util": "^29.7.0", "jest-util": "^29.7.0", "jest-worker": "^29.7.0", "slash": "^3.0.0", "string-length": "^4.0.1", "strip-ansi": "^6.0.0", "v8-to-istanbul": "^9.0.1" }, "peerDependencies": { "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0" }, "optionalPeers": ["node-notifier"] }, "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg=="],

    "@jest/schemas": ["@jest/schemas@29.6.3", "", { "dependencies": { "@sinclair/typebox": "^0.27.8" } }, "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA=="],

    "@jest/source-map": ["@jest/source-map@29.6.3", "", { "dependencies": { "@jridgewell/trace-mapping": "^0.3.18", "callsites": "^3.0.0", "graceful-fs": "^4.2.9" } }, "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw=="],

    "@jest/test-result": ["@jest/test-result@29.7.0", "", { "dependencies": { "@jest/console": "^29.7.0", "@jest/types": "^29.6.3", "@types/istanbul-lib-coverage": "^2.0.0", "collect-v8-coverage": "^1.0.0" } }, "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA=="],

    "@jest/test-sequencer": ["@jest/test-sequencer@29.7.0", "", { "dependencies": { "@jest/test-result": "^29.7.0", "graceful-fs": "^4.2.9", "jest-haste-map": "^29.7.0", "slash": "^3.0.0" } }, "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw=="],

    "@jest/transform": ["@jest/transform@29.7.0", "", { "dependencies": { "@babel/core": "^7.11.6", "@jest/types": "^29.6.3", "@jridgewell/trace-mapping": "^0.3.18", "babel-plugin-istanbul": "^6.1.1", "chalk": "^4.0.0", "convert-source-map": "^2.0.0", "fast-json-stable-stringify": "^2.1.0", "graceful-fs": "^4.2.9", "jest-haste-map": "^29.7.0", "jest-regex-util": "^29.6.3", "jest-util": "^29.7.0", "micromatch": "^4.0.4", "pirates": "^4.0.4", "slash": "^3.0.0", "write-file-atomic": "^4.0.2" } }, "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw=="],

    "@jest/types": ["@jest/types@29.6.3", "", { "dependencies": { "@jest/schemas": "^29.6.3", "@types/istanbul-lib-coverage": "^2.0.0", "@types/istanbul-reports": "^3.0.0", "@types/node": "*", "@types/yargs": "^17.0.8", "chalk": "^4.0.0" } }, "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw=="],

    "@jridgewell/gen-mapping": ["@jridgewell/gen-mapping@0.3.8", "", { "dependencies": { "@jridgewell/set-array": "^1.2.1", "@jridgewell/sourcemap-codec": "^1.4.10", "@jridgewell/trace-mapping": "^0.3.24" } }, "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA=="],

    "@jridgewell/resolve-uri": ["@jridgewell/resolve-uri@3.1.2", "", {}, "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw=="],

    "@jridgewell/set-array": ["@jridgewell/set-array@1.2.1", "", {}, "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A=="],

    "@jridgewell/sourcemap-codec": ["@jridgewell/sourcemap-codec@1.5.0", "", {}, "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ=="],

    "@jridgewell/trace-mapping": ["@jridgewell/trace-mapping@0.3.25", "", { "dependencies": { "@jridgewell/resolve-uri": "^3.1.0", "@jridgewell/sourcemap-codec": "^1.4.14" } }, "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ=="],

    "@multiformats/murmur3": ["@multiformats/murmur3@1.1.3", "", { "dependencies": { "multiformats": "^9.5.4", "murmurhash3js-revisited": "^3.0.0" } }, "sha512-wAPLUErGR8g6Lt+bAZn6218k9YQPym+sjszsXL6o4zfxbA22P+gxWZuuD9wDbwL55xrKO5idpcuQUX7/E3oHcw=="],

    "@orbs-network/ton-access": ["@orbs-network/ton-access@2.3.3", "", { "dependencies": { "isomorphic-fetch": "^3.0.0" } }, "sha512-b1miCPts7wBG9JKYgzXIRZQm/LMy5Uk1mNK8NzlcXHL3HRHJkkFbuYJGuj3IkWCiIicW3Ipp4sYnn3Fwo4oB0g=="],

    "@protobufjs/aspromise": ["@protobufjs/aspromise@1.1.2", "", {}, "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ=="],

    "@protobufjs/base64": ["@protobufjs/base64@1.1.2", "", {}, "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg=="],

    "@protobufjs/codegen": ["@protobufjs/codegen@2.0.4", "", {}, "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg=="],

    "@protobufjs/eventemitter": ["@protobufjs/eventemitter@1.1.0", "", {}, "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q=="],

    "@protobufjs/fetch": ["@protobufjs/fetch@1.1.0", "", { "dependencies": { "@protobufjs/aspromise": "^1.1.1", "@protobufjs/inquire": "^1.1.0" } }, "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ=="],

    "@protobufjs/float": ["@protobufjs/float@1.0.2", "", {}, "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ=="],

    "@protobufjs/inquire": ["@protobufjs/inquire@1.1.0", "", {}, "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q=="],

    "@protobufjs/path": ["@protobufjs/path@1.1.2", "", {}, "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA=="],

    "@protobufjs/pool": ["@protobufjs/pool@1.1.0", "", {}, "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw=="],

    "@protobufjs/utf8": ["@protobufjs/utf8@1.1.0", "", {}, "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw=="],

    "@sinclair/typebox": ["@sinclair/typebox@0.27.8", "", {}, "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA=="],

    "@sinonjs/commons": ["@sinonjs/commons@3.0.1", "", { "dependencies": { "type-detect": "4.0.8" } }, "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ=="],

    "@sinonjs/fake-timers": ["@sinonjs/fake-timers@10.3.0", "", { "dependencies": { "@sinonjs/commons": "^3.0.0" } }, "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA=="],

    "@swc/core": ["@swc/core@1.11.5", "", { "dependencies": { "@swc/counter": "^0.1.3", "@swc/types": "^0.1.19" }, "optionalDependencies": { "@swc/core-darwin-arm64": "1.11.5", "@swc/core-darwin-x64": "1.11.5", "@swc/core-linux-arm-gnueabihf": "1.11.5", "@swc/core-linux-arm64-gnu": "1.11.5", "@swc/core-linux-arm64-musl": "1.11.5", "@swc/core-linux-x64-gnu": "1.11.5", "@swc/core-linux-x64-musl": "1.11.5", "@swc/core-win32-arm64-msvc": "1.11.5", "@swc/core-win32-ia32-msvc": "1.11.5", "@swc/core-win32-x64-msvc": "1.11.5" }, "peerDependencies": { "@swc/helpers": "*" }, "optionalPeers": ["@swc/helpers"] }, "sha512-EVY7zfpehxhTZXOfy508gb3D78ihoGGmvyiTWtlBPjgIaidP1Xw0naHMD78CWiFlZmeDjKXJufGtsEGOnZdmNA=="],

    "@swc/core-darwin-arm64": ["@swc/core-darwin-arm64@1.11.5", "", { "os": "darwin", "cpu": "arm64" }, "sha512-GEd1hzEx0mSGkJYMFMGLnrGgjL2rOsOsuYWyjyiA3WLmhD7o+n/EWBDo6mzD/9aeF8dzSPC0TnW216gJbvrNzA=="],

    "@swc/core-darwin-x64": ["@swc/core-darwin-x64@1.11.5", "", { "os": "darwin", "cpu": "x64" }, "sha512-toz04z9wAClVvQSEY3xzrgyyeWBAfMWcKG4K0ugNvO56h/wczi2ZHRlnAXZW1tghKBk3z6MXqa/srfXgNhffKw=="],

    "@swc/core-linux-arm-gnueabihf": ["@swc/core-linux-arm-gnueabihf@1.11.5", "", { "os": "linux", "cpu": "arm" }, "sha512-5SjmKxXdwbBpsYGTpgeXOXMIjS563/ntRGn8Zc12H/c4VfPrRLGhgbJ/48z2XVFyBLcw7BCHZyFuVX1+ZI3W0Q=="],

    "@swc/core-linux-arm64-gnu": ["@swc/core-linux-arm64-gnu@1.11.5", "", { "os": "linux", "cpu": "arm64" }, "sha512-pydIlInHRzRIwB0NHblz3Dx58H/bsi0I5F2deLf9iOmwPNuOGcEEZF1Qatc7YIjP5DFbXK+Dcz+pMUZb2cc2MQ=="],

    "@swc/core-linux-arm64-musl": ["@swc/core-linux-arm64-musl@1.11.5", "", { "os": "linux", "cpu": "arm64" }, "sha512-LhBHKjkZq5tJF1Lh0NJFpx7ROnCWLckrlIAIdSt9XfOV+zuEXJQOj+NFcM1eNk17GFfFyUMOZyGZxzYq5dveEQ=="],

    "@swc/core-linux-x64-gnu": ["@swc/core-linux-x64-gnu@1.11.5", "", { "os": "linux", "cpu": "x64" }, "sha512-dCi4xkxXlsk5sQYb3i413Cfh7+wMJeBYTvBZTD5xh+/DgRtIcIJLYJ2tNjWC4/C2i5fj+Ze9bKNSdd8weRWZ3A=="],

    "@swc/core-linux-x64-musl": ["@swc/core-linux-x64-musl@1.11.5", "", { "os": "linux", "cpu": "x64" }, "sha512-K0AC4TreM5Oo/tXNXnE/Gf5+5y/HwUdd7xvUjOpZddcX/RlsbYOKWLgOtA3fdFIuta7XC+vrGKmIhm5l70DSVQ=="],

    "@swc/core-win32-arm64-msvc": ["@swc/core-win32-arm64-msvc@1.11.5", "", { "os": "win32", "cpu": "arm64" }, "sha512-wzum8sYUsvPY7kgUfuqVYTgIPYmBC8KPksoNM1fz5UfhudU0ciQuYvUBD47GIGOevaoxhLkjPH4CB95vh1mJ9w=="],

    "@swc/core-win32-ia32-msvc": ["@swc/core-win32-ia32-msvc@1.11.5", "", { "os": "win32", "cpu": "ia32" }, "sha512-lco7mw0TPRTpVPR6NwggJpjdUkAboGRkLrDHjIsUaR+Y5+0m5FMMkHOMxWXAbrBS5c4ph7QErp4Lma4r9Mn5og=="],

    "@swc/core-win32-x64-msvc": ["@swc/core-win32-x64-msvc@1.11.5", "", { "os": "win32", "cpu": "x64" }, "sha512-E+DApLSC6JRK8VkDa4bNsBdD7Qoomx1HvKVZpOXl9v94hUZI5GMExl4vU5isvb+hPWL7rZ0NeI7ITnVLgLJRbA=="],

    "@swc/counter": ["@swc/counter@0.1.3", "", {}, "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ=="],

    "@swc/types": ["@swc/types@0.1.19", "", { "dependencies": { "@swc/counter": "^0.1.3" } }, "sha512-WkAZaAfj44kh/UFdAQcrMP1I0nwRqpt27u+08LMBYMqmQfwwMofYoMh/48NGkMMRfC4ynpfwRbJuu8ErfNloeA=="],

    "@tact-lang/compiler": ["@tact-lang/compiler@1.6.2", "", { "dependencies": { "@tact-lang/opcode": "^0.3.0", "@ton/core": "0.60.1", "@ton/crypto": "^3.2.0", "@tonstudio/parser-runtime": "^0.0.1", "blockstore-core": "1.0.5", "change-case": "^4.1.2", "ipfs-unixfs-importer": "9.0.10", "json-bigint": "^1.0.0", "ohm-js": "^17.1.0", "path-normalize": "^6.0.13", "zod": "^3.22.4" }, "bin": { "tact": "bin/tact.js", "unboc": "bin/unboc.js" } }, "sha512-Qo8ooKWxLWy6o1ePdiyCo1+hdaX5rm1qoUs+S/L9R+wV7SpODYM1dHtKE3RkvyuItnBsl9WokgnkWzlC4qnMVQ=="],

    "@tact-lang/opcode": ["@tact-lang/opcode@0.3.1", "", { "dependencies": { "@ton/core": "^0.60.0", "@ton/crypto": "^3.3.0" } }, "sha512-DfLGz59yl0PPnqFnFzkwr20NNspe4ocZJlBgyTiikGxpS5932wE7Jb9tcKpLqVKzR0TFiqBK0RbOTHM3e6qCRA=="],

    "@ton-api/client": ["@ton-api/client@0.3.1", "", { "dependencies": { "core-js-pure": "^3.38.0" }, "peerDependencies": { "@ton/core": ">=0.59.0" } }, "sha512-QwKcYcX9vaudJK7E7Gfx87A/TU1LgAUrNGdW6OZVKvKxttoUQUtEtRqLk3xqyuhQK24IYAd6BQ6Ki33X7zSdaw=="],

    "@ton-community/func-js": ["@ton-community/func-js@0.7.0", "", { "dependencies": { "@ton-community/func-js-bin": "0.4.4-newops.1", "arg": "^5.0.2" }, "bin": { "func-js": "dist/cli.js" } }, "sha512-VYJsv6Pqz6+qh3HlZWReBG5W9RXutAdIFYDqmblPSCXfjBhx/QjON/3WoppzUVrqQQdD0BVIh4PR+xRHRCBNhw=="],

    "@ton-community/func-js-bin": ["@ton-community/func-js-bin@0.4.4-newops.1", "", {}, "sha512-TV4t6XhmItq4t+wv4pV30yEwb+YvdmsKo4Ig4B0zp4PLdI0r9iZHz4y5bBHcXmDQDRqulXzK6kTgfHvs2CIsaQ=="],

    "@ton-community/tlb-codegen": ["@ton-community/tlb-codegen@1.1.0", "", { "dependencies": { "@ton-community/tlb-parser": "^0.1.3", "@ton/core": "^0.54.0", "@types/jest": "^29.5.11", "crc-32": "^1.2.2", "meow": "^9.0.0", "ts-jest": "^29.1.1" }, "bin": { "tlb": "build/main.js" } }, "sha512-A6NJKV0pud0LBiYbK4q9I14AvIx75Oin4N5HP4KTnhFKVoT/wFkKOIAb/YtPN1nfIJsqKqKSQA9OH8K5a2Hc7w=="],

    "@ton-community/tlb-parser": ["@ton-community/tlb-parser@0.1.3", "", { "dependencies": { "ohm-js": "^16.6.0" }, "bin": { "tlb-parser": "dist/cli.js" } }, "sha512-1GLlgQTMJzw0l4b0rSuz1PjHxROxfpuJB1/ONxOVvU+At/vZo304pWuYyJHxsXwCLJdaPEVOWSOry8paTsRRJQ=="],

    "@ton/blueprint": ["@ton/blueprint@0.24.0", "", { "dependencies": { "@tact-lang/compiler": "^1.4.0", "@ton-community/func-js": "^0.7.0", "@tonconnect/sdk": "^2.2.0", "arg": "^5.0.2", "chalk": "^4.1.0", "dotenv": "^16.1.4", "inquirer": "^8.2.5", "qrcode-terminal": "^0.12.0", "ts-node": "^10.9.1" }, "peerDependencies": { "@ton/core": ">=0.58.1", "@ton/crypto": ">=3.3.0", "@ton/ton": ">=15.0.0" }, "bin": "./dist/cli/cli.js" }, "sha512-JTYGfkU8ZiSi2XCPJwea2sA7ijGYBHx9OMcyfj01i1F3zpMR3RhTFl1ETgJjBud+2TTNsAUEjteVZhpjnTx32w=="],

    "@ton/core": ["@ton/core@0.56.3", "", { "dependencies": { "symbol.inspect": "1.0.1" }, "peerDependencies": { "@ton/crypto": ">=3.2.0" } }, "sha512-HVkalfqw8zqLLPehtq0CNhu5KjVzc7IrbDwDHPjGoOSXmnqSobiWj8a5F+YuWnZnEbQKtrnMGNOOjVw4LG37rg=="],

    "@ton/crypto": ["@ton/crypto@3.3.0", "", { "dependencies": { "@ton/crypto-primitives": "2.1.0", "jssha": "3.2.0", "tweetnacl": "1.0.3" } }, "sha512-/A6CYGgA/H36OZ9BbTaGerKtzWp50rg67ZCH2oIjV1NcrBaCK9Z343M+CxedvM7Haf3f/Ee9EhxyeTp0GKMUpA=="],

    "@ton/crypto-primitives": ["@ton/crypto-primitives@2.1.0", "", { "dependencies": { "jssha": "3.2.0" } }, "sha512-PQesoyPgqyI6vzYtCXw4/ZzevePc4VGcJtFwf08v10OevVJHVfW238KBdpj1kEDQkxWLeuNHEpTECNFKnP6tow=="],

    "@ton/sandbox": ["@ton/sandbox@0.22.0", "", { "peerDependencies": { "@ton/core": ">=0.58.1", "@ton/crypto": ">=3.3.0" } }, "sha512-ilvKtyAGxJyEbIwITlx1y78oDmJyvT+pkLfVm4952NjxZpANdG2nZ8/mBGJlWph9FZtxxXCjCf/79hNihC6P6A=="],

    "@ton/test-utils": ["@ton/test-utils@0.4.2", "", { "dependencies": { "node-inspect-extracted": "^2.0.0" }, "peerDependencies": { "@jest/globals": "*", "@ton/core": ">=0.49.2", "chai": "*" }, "optionalPeers": ["@jest/globals", "chai"] }, "sha512-fthY8Nrlmy8jnOl/vx6yjeKzzu62ZXMe7ej9Xg7rb4d3511V7dVQK+nw4YLSW5+dD/6WT03dFuNZXnuMYy5fHw=="],

    "@ton/ton": ["@ton/ton@15.2.1", "", { "dependencies": { "axios": "^1.6.7", "dataloader": "^2.0.0", "symbol.inspect": "1.0.1", "teslabot": "^1.3.0", "zod": "^3.21.4" }, "peerDependencies": { "@ton/core": ">=0.60.0", "@ton/crypto": ">=3.2.0" } }, "sha512-ICzozzATRfymkVfFVZrfVpKnCc5PLxAVeaB62mx/HsgllsjnR64UuoLuE6hqWHcA3/Hft9YLGdk2/rOHGZM6qA=="],

    "@tonconnect/isomorphic-eventsource": ["@tonconnect/isomorphic-eventsource@0.0.1", "", { "dependencies": { "eventsource": "^2.0.2" } }, "sha512-ODk48pMlqLSOvu3fM0R1sdlz/Cv2y4hSfwtXmLq9ky9+H7ZQfw/16ElpIJ69B4lUvHycxrueNgrRtF9PJHoGMw=="],

    "@tonconnect/isomorphic-fetch": ["@tonconnect/isomorphic-fetch@0.0.2", "", { "dependencies": { "node-fetch": "^2.6.9" } }, "sha512-DAyA4oL7MqbBo9k8+8E+YiWsGCYi6UMhDTcsZjhgzhESkBNG6b+NBkpb1KH4oi0xDZQoknFtY9XogJLuQtSMQQ=="],

    "@tonconnect/protocol": ["@tonconnect/protocol@2.2.7", "", { "dependencies": { "tweetnacl": "^1.0.3", "tweetnacl-util": "^0.15.1" } }, "sha512-mmuS5ekaRVQtXOug30znXXSnuQfuLa6kDOv17X2ttk8Al9PlTFG/AtPRkWxCp8X5BdhPzGFELTog7kypukjWnQ=="],

    "@tonconnect/sdk": ["@tonconnect/sdk@2.2.0", "", { "dependencies": { "@tonconnect/isomorphic-eventsource": "^0.0.1", "@tonconnect/isomorphic-fetch": "^0.0.2", "@tonconnect/protocol": "^2.2.5" } }, "sha512-8plnAXzaLhapUnt47ZqAOQSIQ8NHSvgTSR74QVJdPWqg8128smgGM4cDYewKdBfTD6Lup0odT1WMMrJu+rE4NQ=="],

    "@tonstudio/parser-runtime": ["@tonstudio/parser-runtime@0.0.1", "", {}, "sha512-5s4fLkXWxa4SAd7QGGvJXe13GakEo0J3VF5dUI/i3A//bGZxMwCp1FcnbErpNs3y0LcAZoXE5FCUnDowDQptqw=="],

    "@tsconfig/node10": ["@tsconfig/node10@1.0.11", "", {}, "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw=="],

    "@tsconfig/node12": ["@tsconfig/node12@1.0.11", "", {}, "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag=="],

    "@tsconfig/node14": ["@tsconfig/node14@1.0.3", "", {}, "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow=="],

    "@tsconfig/node16": ["@tsconfig/node16@1.0.4", "", {}, "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA=="],

    "@types/babel__core": ["@types/babel__core@7.20.5", "", { "dependencies": { "@babel/parser": "^7.20.7", "@babel/types": "^7.20.7", "@types/babel__generator": "*", "@types/babel__template": "*", "@types/babel__traverse": "*" } }, "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA=="],

    "@types/babel__generator": ["@types/babel__generator@7.6.8", "", { "dependencies": { "@babel/types": "^7.0.0" } }, "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw=="],

    "@types/babel__template": ["@types/babel__template@7.4.4", "", { "dependencies": { "@babel/parser": "^7.1.0", "@babel/types": "^7.0.0" } }, "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A=="],

    "@types/babel__traverse": ["@types/babel__traverse@7.20.6", "", { "dependencies": { "@babel/types": "^7.20.7" } }, "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg=="],

    "@types/big.js": ["@types/big.js@6.2.2", "", {}, "sha512-e2cOW9YlVzFY2iScnGBBkplKsrn2CsObHQ2Hiw4V1sSyiGbgWL8IyqE3zFi1Pt5o1pdAtYkDAIsF3KKUPjdzaA=="],

    "@types/bun": ["@types/bun@1.2.5", "", { "dependencies": { "bun-types": "1.2.5" } }, "sha512-w2OZTzrZTVtbnJew1pdFmgV99H0/L+Pvw+z1P67HaR18MHOzYnTYOi6qzErhK8HyT+DB782ADVPPE92Xu2/Opg=="],

    "@types/graceful-fs": ["@types/graceful-fs@4.1.9", "", { "dependencies": { "@types/node": "*" } }, "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ=="],

    "@types/istanbul-lib-coverage": ["@types/istanbul-lib-coverage@2.0.6", "", {}, "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w=="],

    "@types/istanbul-lib-report": ["@types/istanbul-lib-report@3.0.3", "", { "dependencies": { "@types/istanbul-lib-coverage": "*" } }, "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA=="],

    "@types/istanbul-reports": ["@types/istanbul-reports@3.0.4", "", { "dependencies": { "@types/istanbul-lib-report": "*" } }, "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ=="],

    "@types/jest": ["@types/jest@29.5.14", "", { "dependencies": { "expect": "^29.0.0", "pretty-format": "^29.0.0" } }, "sha512-ZN+4sdnLUbo8EVvVc2ao0GFW6oVrQRPn4K2lglySj7APvSrgzxHiNNK99us4WDMi57xxA2yggblIAMNhXOotLQ=="],

    "@types/long": ["@types/long@4.0.2", "", {}, "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA=="],

    "@types/minimist": ["@types/minimist@1.2.5", "", {}, "sha512-hov8bUuiLiyFPGyFPE1lwWhmzYbirOXQNNo40+y3zow8aFVTeyn3VWL0VFFfdNddA8S4Vf0Tc062rzyNr7Paag=="],

    "@types/node": ["@types/node@22.7.5", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-jML7s2NAzMWc//QSJ1a3prpk78cOPchGvXJsC3C6R6PSMoooztvRVQEz89gmBTBY1SPMaqo5teB4uNHPdetShQ=="],

    "@types/normalize-package-data": ["@types/normalize-package-data@2.4.4", "", {}, "sha512-37i+OaWTh9qeK4LSHPsyRC7NahnGotNuZvjLSgcPzblpHB3rrCJxAOgI5gCdKm7coonsaX1Of0ILiTcnZjbfxA=="],

    "@types/stack-utils": ["@types/stack-utils@2.0.3", "", {}, "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw=="],

    "@types/ws": ["@types/ws@8.5.14", "", { "dependencies": { "@types/node": "*" } }, "sha512-bd/YFLW+URhBzMXurx7lWByOu+xzU9+kb3RboOteXYDfW+tr+JZa99OyNmPINEGB/ahzKrEuc8rcv4gnpJmxTw=="],

    "@types/yargs": ["@types/yargs@17.0.33", "", { "dependencies": { "@types/yargs-parser": "*" } }, "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA=="],

    "@types/yargs-parser": ["@types/yargs-parser@21.0.3", "", {}, "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ=="],

    "acorn": ["acorn@8.14.0", "", { "bin": { "acorn": "bin/acorn" } }, "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA=="],

    "acorn-walk": ["acorn-walk@8.3.4", "", { "dependencies": { "acorn": "^8.11.0" } }, "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g=="],

    "ansi-escapes": ["ansi-escapes@4.3.2", "", { "dependencies": { "type-fest": "^0.21.3" } }, "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ=="],

    "ansi-regex": ["ansi-regex@5.0.1", "", {}, "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="],

    "ansi-styles": ["ansi-styles@4.3.0", "", { "dependencies": { "color-convert": "^2.0.1" } }, "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg=="],

    "anymatch": ["anymatch@3.1.3", "", { "dependencies": { "normalize-path": "^3.0.0", "picomatch": "^2.0.4" } }, "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw=="],

    "arg": ["arg@5.0.2", "", {}, "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg=="],

    "argparse": ["argparse@1.0.10", "", { "dependencies": { "sprintf-js": "~1.0.2" } }, "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg=="],

    "arrify": ["arrify@1.0.1", "", {}, "sha512-3CYzex9M9FGQjCGMGyi6/31c8GJbgb0qGyrx5HWxPd0aCwh4cB2YjMb2Xf9UuoogrMrlO9cTqnB5rI5GHZTcUA=="],

    "async": ["async@3.2.6", "", {}, "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA=="],

    "asynckit": ["asynckit@0.4.0", "", {}, "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="],

    "axios": ["axios@1.8.1", "", { "dependencies": { "follow-redirects": "^1.15.6", "form-data": "^4.0.0", "proxy-from-env": "^1.1.0" } }, "sha512-NN+fvwH/kV01dYUQ3PTOZns4LWtWhOFCAhQ/pHb88WQ1hNe5V/dvFwc4VJcDL11LT9xSX0QtsR8sWUuyOuOq7g=="],

    "babel-jest": ["babel-jest@29.7.0", "", { "dependencies": { "@jest/transform": "^29.7.0", "@types/babel__core": "^7.1.14", "babel-plugin-istanbul": "^6.1.1", "babel-preset-jest": "^29.6.3", "chalk": "^4.0.0", "graceful-fs": "^4.2.9", "slash": "^3.0.0" }, "peerDependencies": { "@babel/core": "^7.8.0" } }, "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg=="],

    "babel-plugin-istanbul": ["babel-plugin-istanbul@6.1.1", "", { "dependencies": { "@babel/helper-plugin-utils": "^7.0.0", "@istanbuljs/load-nyc-config": "^1.0.0", "@istanbuljs/schema": "^0.1.2", "istanbul-lib-instrument": "^5.0.4", "test-exclude": "^6.0.0" } }, "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA=="],

    "babel-plugin-jest-hoist": ["babel-plugin-jest-hoist@29.6.3", "", { "dependencies": { "@babel/template": "^7.3.3", "@babel/types": "^7.3.3", "@types/babel__core": "^7.1.14", "@types/babel__traverse": "^7.0.6" } }, "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg=="],

    "babel-preset-current-node-syntax": ["babel-preset-current-node-syntax@1.1.0", "", { "dependencies": { "@babel/plugin-syntax-async-generators": "^7.8.4", "@babel/plugin-syntax-bigint": "^7.8.3", "@babel/plugin-syntax-class-properties": "^7.12.13", "@babel/plugin-syntax-class-static-block": "^7.14.5", "@babel/plugin-syntax-import-attributes": "^7.24.7", "@babel/plugin-syntax-import-meta": "^7.10.4", "@babel/plugin-syntax-json-strings": "^7.8.3", "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4", "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3", "@babel/plugin-syntax-numeric-separator": "^7.10.4", "@babel/plugin-syntax-object-rest-spread": "^7.8.3", "@babel/plugin-syntax-optional-catch-binding": "^7.8.3", "@babel/plugin-syntax-optional-chaining": "^7.8.3", "@babel/plugin-syntax-private-property-in-object": "^7.14.5", "@babel/plugin-syntax-top-level-await": "^7.14.5" }, "peerDependencies": { "@babel/core": "^7.0.0" } }, "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw=="],

    "babel-preset-jest": ["babel-preset-jest@29.6.3", "", { "dependencies": { "babel-plugin-jest-hoist": "^29.6.3", "babel-preset-current-node-syntax": "^1.0.0" }, "peerDependencies": { "@babel/core": "^7.0.0" } }, "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA=="],

    "balanced-match": ["balanced-match@1.0.2", "", {}, "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="],

    "base64-js": ["base64-js@1.5.1", "", {}, "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="],

    "big.js": ["big.js@6.2.2", "", {}, "sha512-y/ie+Faknx7sZA5MfGA2xKlu0GDv8RWrXGsmlteyJQ2lvoKv9GBK/fpRMc2qlSoBAgNxrixICFCBefIq8WCQpQ=="],

    "bignumber.js": ["bignumber.js@9.1.2", "", {}, "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug=="],

    "bl": ["bl@5.1.0", "", { "dependencies": { "buffer": "^6.0.3", "inherits": "^2.0.4", "readable-stream": "^3.4.0" } }, "sha512-tv1ZJHLfTDnXE6tMHv73YgSJaWR2AFuPwMntBe7XL/GBFHnT0CLnsHMogfk5+GzCDC5ZWarSCYaIGATZt9dNsQ=="],

    "blockstore-core": ["blockstore-core@1.0.5", "", { "dependencies": { "err-code": "^3.0.1", "interface-blockstore": "^2.0.2", "interface-store": "^2.0.1", "it-all": "^1.0.4", "it-drain": "^1.0.4", "it-filter": "^1.0.2", "it-take": "^1.0.1", "multiformats": "^9.4.7" } }, "sha512-i/9CUMMvBALVbtSqUIuiWB3tk//a4Q2I2CEWiBuYNnhJvk/DWplXjLt8Sqc5VGkRVXVPSsEuH8fUtqJt5UFYcA=="],

    "brace-expansion": ["brace-expansion@1.1.11", "", { "dependencies": { "balanced-match": "^1.0.0", "concat-map": "0.0.1" } }, "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA=="],

    "braces": ["braces@3.0.3", "", { "dependencies": { "fill-range": "^7.1.1" } }, "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA=="],

    "browserslist": ["browserslist@4.24.4", "", { "dependencies": { "caniuse-lite": "^1.0.30001688", "electron-to-chromium": "^1.5.73", "node-releases": "^2.0.19", "update-browserslist-db": "^1.1.1" }, "bin": { "browserslist": "cli.js" } }, "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A=="],

    "bs-logger": ["bs-logger@0.2.6", "", { "dependencies": { "fast-json-stable-stringify": "2.x" } }, "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog=="],

    "bser": ["bser@2.1.1", "", { "dependencies": { "node-int64": "^0.4.0" } }, "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ=="],

    "buffer": ["buffer@6.0.3", "", { "dependencies": { "base64-js": "^1.3.1", "ieee754": "^1.2.1" } }, "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA=="],

    "buffer-from": ["buffer-from@1.1.2", "", {}, "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="],

    "bun-types": ["bun-types@1.2.5", "", { "dependencies": { "@types/node": "*", "@types/ws": "~8.5.10" } }, "sha512-3oO6LVGGRRKI4kHINx5PIdIgnLRb7l/SprhzqXapmoYkFl5m4j6EvALvbDVuuBFaamB46Ap6HCUxIXNLCGy+tg=="],

    "call-bind-apply-helpers": ["call-bind-apply-helpers@1.0.2", "", { "dependencies": { "es-errors": "^1.3.0", "function-bind": "^1.1.2" } }, "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ=="],

    "callsites": ["callsites@3.1.0", "", {}, "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ=="],

    "camel-case": ["camel-case@4.1.2", "", { "dependencies": { "pascal-case": "^3.1.2", "tslib": "^2.0.3" } }, "sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw=="],

    "camelcase": ["camelcase@5.3.1", "", {}, "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg=="],

    "camelcase-keys": ["camelcase-keys@6.2.2", "", { "dependencies": { "camelcase": "^5.3.1", "map-obj": "^4.0.0", "quick-lru": "^4.0.1" } }, "sha512-YrwaA0vEKazPBkn0ipTiMpSajYDSe+KjQfrjhcBMxJt/znbvlHd8Pw/Vamaz5EB4Wfhs3SUR3Z9mwRu/P3s3Yg=="],

    "caniuse-lite": ["caniuse-lite@1.0.30001701", "", {}, "sha512-faRs/AW3jA9nTwmJBSO1PQ6L/EOgsB5HMQQq4iCu5zhPgVVgO/pZRHlmatwijZKetFw8/Pr4q6dEN8sJuq8qTw=="],

    "capital-case": ["capital-case@1.0.4", "", { "dependencies": { "no-case": "^3.0.4", "tslib": "^2.0.3", "upper-case-first": "^2.0.2" } }, "sha512-ds37W8CytHgwnhGGTi88pcPyR15qoNkOpYwmMMfnWqqWgESapLqvDx6huFjQ5vqWSn2Z06173XNA7LtMOeUh1A=="],

    "chalk": ["chalk@4.1.2", "", { "dependencies": { "ansi-styles": "^4.1.0", "supports-color": "^7.1.0" } }, "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA=="],

    "change-case": ["change-case@4.1.2", "", { "dependencies": { "camel-case": "^4.1.2", "capital-case": "^1.0.4", "constant-case": "^3.0.4", "dot-case": "^3.0.4", "header-case": "^2.0.4", "no-case": "^3.0.4", "param-case": "^3.0.4", "pascal-case": "^3.1.2", "path-case": "^3.0.4", "sentence-case": "^3.0.4", "snake-case": "^3.0.4", "tslib": "^2.0.3" } }, "sha512-bSxY2ws9OtviILG1EiY5K7NNxkqg/JnRnFxLtKQ96JaviiIxi7djMrSd0ECT9AC+lttClmYwKw53BWpOMblo7A=="],

    "char-regex": ["char-regex@1.0.2", "", {}, "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw=="],

    "chardet": ["chardet@0.7.0", "", {}, "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA=="],

    "ci-info": ["ci-info@3.9.0", "", {}, "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ=="],

    "cjs-module-lexer": ["cjs-module-lexer@1.4.3", "", {}, "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q=="],

    "cli-cursor": ["cli-cursor@3.1.0", "", { "dependencies": { "restore-cursor": "^3.1.0" } }, "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw=="],

    "cli-spinners": ["cli-spinners@2.6.1", "", {}, "sha512-x/5fWmGMnbKQAaNwN+UZlV79qBLM9JFnJuJ03gIi5whrob0xV0ofNVHy9DhwGdsMJQc2OKv0oGmLzvaqvAVv+g=="],

    "cli-width": ["cli-width@3.0.0", "", {}, "sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw=="],

    "cliui": ["cliui@8.0.1", "", { "dependencies": { "string-width": "^4.2.0", "strip-ansi": "^6.0.1", "wrap-ansi": "^7.0.0" } }, "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ=="],

    "clone": ["clone@1.0.4", "", {}, "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg=="],

    "co": ["co@4.6.0", "", {}, "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ=="],

    "collect-v8-coverage": ["collect-v8-coverage@1.0.2", "", {}, "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q=="],

    "color-convert": ["color-convert@2.0.1", "", { "dependencies": { "color-name": "~1.1.4" } }, "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ=="],

    "color-name": ["color-name@1.1.4", "", {}, "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="],

    "combined-stream": ["combined-stream@1.0.8", "", { "dependencies": { "delayed-stream": "~1.0.0" } }, "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg=="],

    "concat-map": ["concat-map@0.0.1", "", {}, "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="],

    "constant-case": ["constant-case@3.0.4", "", { "dependencies": { "no-case": "^3.0.4", "tslib": "^2.0.3", "upper-case": "^2.0.2" } }, "sha512-I2hSBi7Vvs7BEuJDr5dDHfzb/Ruj3FyvFyh7KLilAjNQw3Be+xgqUBA2W6scVEcL0hL1dwPRtIqEPVUCKkSsyQ=="],

    "convert-source-map": ["convert-source-map@2.0.0", "", {}, "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg=="],

    "core-js-pure": ["core-js-pure@3.41.0", "", {}, "sha512-71Gzp96T9YPk63aUvE5Q5qP+DryB4ZloUZPSOebGM88VNw8VNfvdA7z6kGA8iGOTEzAomsRidp4jXSmUIJsL+Q=="],

    "crc-32": ["crc-32@1.2.2", "", { "bin": { "crc32": "bin/crc32.njs" } }, "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ=="],

    "create-jest": ["create-jest@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "chalk": "^4.0.0", "exit": "^0.1.2", "graceful-fs": "^4.2.9", "jest-config": "^29.7.0", "jest-util": "^29.7.0", "prompts": "^2.0.1" }, "bin": { "create-jest": "bin/create-jest.js" } }, "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q=="],

    "create-require": ["create-require@1.1.1", "", {}, "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ=="],

    "cross-spawn": ["cross-spawn@7.0.6", "", { "dependencies": { "path-key": "^3.1.0", "shebang-command": "^2.0.0", "which": "^2.0.1" } }, "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA=="],

    "dataloader": ["dataloader@2.2.3", "", {}, "sha512-y2krtASINtPFS1rSDjacrFgn1dcUuoREVabwlOGOe4SdxenREqwjwjElAdwvbGM7kgZz9a3KVicWR7vcz8rnzA=="],

    "debug": ["debug@4.4.0", "", { "dependencies": { "ms": "^2.1.3" } }, "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA=="],

    "decamelize": ["decamelize@1.2.0", "", {}, "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA=="],

    "decamelize-keys": ["decamelize-keys@1.1.1", "", { "dependencies": { "decamelize": "^1.1.0", "map-obj": "^1.0.0" } }, "sha512-WiPxgEirIV0/eIOMcnFBA3/IJZAZqKnwAwWyvvdi4lsr1WCN22nhdf/3db3DoZcUjTV2SqfzIwNyp6y2xs3nmg=="],

    "decimal.js": ["decimal.js@10.5.0", "", {}, "sha512-8vDa8Qxvr/+d94hSh5P3IJwI5t8/c0KsMp+g8bNw9cY2icONa5aPfvKeieW1WlG0WQYwwhJ7mjui2xtiePQSXw=="],

    "decimal.js-light": ["decimal.js-light@2.5.1", "", {}, "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="],

    "dedent": ["dedent@1.5.3", "", { "peerDependencies": { "babel-plugin-macros": "^3.1.0" }, "optionalPeers": ["babel-plugin-macros"] }, "sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ=="],

    "deepmerge": ["deepmerge@4.3.1", "", {}, "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A=="],

    "defaults": ["defaults@1.0.4", "", { "dependencies": { "clone": "^1.0.2" } }, "sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A=="],

    "delayed-stream": ["delayed-stream@1.0.0", "", {}, "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="],

    "detect-newline": ["detect-newline@3.1.0", "", {}, "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA=="],

    "diff": ["diff@4.0.2", "", {}, "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="],

    "diff-sequences": ["diff-sequences@29.6.3", "", {}, "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q=="],

    "dot-case": ["dot-case@3.0.4", "", { "dependencies": { "no-case": "^3.0.4", "tslib": "^2.0.3" } }, "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w=="],

    "dotenv": ["dotenv@16.4.7", "", {}, "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ=="],

    "dunder-proto": ["dunder-proto@1.0.1", "", { "dependencies": { "call-bind-apply-helpers": "^1.0.1", "es-errors": "^1.3.0", "gopd": "^1.2.0" } }, "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A=="],

    "ejs": ["ejs@3.1.10", "", { "dependencies": { "jake": "^10.8.5" }, "bin": { "ejs": "bin/cli.js" } }, "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA=="],

    "electron-to-chromium": ["electron-to-chromium@1.5.109", "", {}, "sha512-AidaH9JETVRr9DIPGfp1kAarm/W6hRJTPuCnkF+2MqhF4KaAgRIcBc8nvjk+YMXZhwfISof/7WG29eS4iGxQLQ=="],

    "emittery": ["emittery@0.13.1", "", {}, "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ=="],

    "emoji-regex": ["emoji-regex@8.0.0", "", {}, "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="],

    "encoding": ["encoding@0.1.13", "", { "dependencies": { "iconv-lite": "^0.6.2" } }, "sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A=="],

    "err-code": ["err-code@3.0.1", "", {}, "sha512-GiaH0KJUewYok+eeY05IIgjtAe4Yltygk9Wqp1V5yVWLdhf0hYZchRjNIT9bb0mSwRcIusT3cx7PJUf3zEIfUA=="],

    "error-ex": ["error-ex@1.3.2", "", { "dependencies": { "is-arrayish": "^0.2.1" } }, "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g=="],

    "es-define-property": ["es-define-property@1.0.1", "", {}, "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g=="],

    "es-errors": ["es-errors@1.3.0", "", {}, "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw=="],

    "es-object-atoms": ["es-object-atoms@1.1.1", "", { "dependencies": { "es-errors": "^1.3.0" } }, "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA=="],

    "es-set-tostringtag": ["es-set-tostringtag@2.1.0", "", { "dependencies": { "es-errors": "^1.3.0", "get-intrinsic": "^1.2.6", "has-tostringtag": "^1.0.2", "hasown": "^2.0.2" } }, "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA=="],

    "escalade": ["escalade@3.2.0", "", {}, "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA=="],

    "escape-string-regexp": ["escape-string-regexp@1.0.5", "", {}, "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg=="],

    "esprima": ["esprima@4.0.1", "", { "bin": { "esparse": "./bin/esparse.js", "esvalidate": "./bin/esvalidate.js" } }, "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A=="],

    "eventsource": ["eventsource@2.0.2", "", {}, "sha512-IzUmBGPR3+oUG9dUeXynyNmf91/3zUSJg1lCktzKw47OXuhco54U3r9B7O4XX+Rb1Itm9OZ2b0RkTs10bICOxA=="],

    "execa": ["execa@5.0.0", "", { "dependencies": { "cross-spawn": "^7.0.3", "get-stream": "^6.0.0", "human-signals": "^2.1.0", "is-stream": "^2.0.0", "merge-stream": "^2.0.0", "npm-run-path": "^4.0.1", "onetime": "^5.1.2", "signal-exit": "^3.0.3", "strip-final-newline": "^2.0.0" } }, "sha512-ov6w/2LCiuyO4RLYGdpFGjkcs0wMTgGE8PrkTHikeUy5iJekXyPIKUjifk5CsE0pt7sMCrMZ3YNqoCj6idQOnQ=="],

    "exit": ["exit@0.1.2", "", {}, "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ=="],

    "expect": ["expect@29.7.0", "", { "dependencies": { "@jest/expect-utils": "^29.7.0", "jest-get-type": "^29.6.3", "jest-matcher-utils": "^29.7.0", "jest-message-util": "^29.7.0", "jest-util": "^29.7.0" } }, "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw=="],

    "external-editor": ["external-editor@3.1.0", "", { "dependencies": { "chardet": "^0.7.0", "iconv-lite": "^0.4.24", "tmp": "^0.0.33" } }, "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew=="],

    "fast-json-stable-stringify": ["fast-json-stable-stringify@2.1.0", "", {}, "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="],

    "fb-watchman": ["fb-watchman@2.0.2", "", { "dependencies": { "bser": "2.1.1" } }, "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA=="],

    "figures": ["figures@3.2.0", "", { "dependencies": { "escape-string-regexp": "^1.0.5" } }, "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg=="],

    "filelist": ["filelist@1.0.4", "", { "dependencies": { "minimatch": "^5.0.1" } }, "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q=="],

    "fill-range": ["fill-range@7.1.1", "", { "dependencies": { "to-regex-range": "^5.0.1" } }, "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg=="],

    "find-up": ["find-up@4.1.0", "", { "dependencies": { "locate-path": "^5.0.0", "path-exists": "^4.0.0" } }, "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw=="],

    "follow-redirects": ["follow-redirects@1.15.9", "", {}, "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ=="],

    "form-data": ["form-data@4.0.2", "", { "dependencies": { "asynckit": "^0.4.0", "combined-stream": "^1.0.8", "es-set-tostringtag": "^2.1.0", "mime-types": "^2.1.12" } }, "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w=="],

    "fs.realpath": ["fs.realpath@1.0.0", "", {}, "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="],

    "fsevents": ["fsevents@2.3.3", "", { "os": "darwin" }, "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw=="],

    "function-bind": ["function-bind@1.1.2", "", {}, "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA=="],

    "gensync": ["gensync@1.0.0-beta.2", "", {}, "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="],

    "get-caller-file": ["get-caller-file@2.0.5", "", {}, "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg=="],

    "get-intrinsic": ["get-intrinsic@1.3.0", "", { "dependencies": { "call-bind-apply-helpers": "^1.0.2", "es-define-property": "^1.0.1", "es-errors": "^1.3.0", "es-object-atoms": "^1.1.1", "function-bind": "^1.1.2", "get-proto": "^1.0.1", "gopd": "^1.2.0", "has-symbols": "^1.1.0", "hasown": "^2.0.2", "math-intrinsics": "^1.1.0" } }, "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ=="],

    "get-package-type": ["get-package-type@0.1.0", "", {}, "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q=="],

    "get-proto": ["get-proto@1.0.1", "", { "dependencies": { "dunder-proto": "^1.0.1", "es-object-atoms": "^1.0.0" } }, "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g=="],

    "get-stream": ["get-stream@6.0.0", "", {}, "sha512-A1B3Bh1UmL0bidM/YX2NsCOTnGJePL9rO/M+Mw3m9f2gUpfokS0hi5Eah0WSUEWZdZhIZtMjkIYS7mDfOqNHbg=="],

    "glob": ["glob@7.2.3", "", { "dependencies": { "fs.realpath": "^1.0.0", "inflight": "^1.0.4", "inherits": "2", "minimatch": "^3.1.1", "once": "^1.3.0", "path-is-absolute": "^1.0.0" } }, "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q=="],

    "globals": ["globals@11.12.0", "", {}, "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA=="],

    "gopd": ["gopd@1.2.0", "", {}, "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg=="],

    "graceful-fs": ["graceful-fs@4.2.11", "", {}, "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="],

    "hamt-sharding": ["hamt-sharding@2.0.1", "", { "dependencies": { "sparse-array": "^1.3.1", "uint8arrays": "^3.0.0" } }, "sha512-vnjrmdXG9dDs1m/H4iJ6z0JFI2NtgsW5keRkTcM85NGak69Mkf5PHUqBz+Xs0T4sg0ppvj9O5EGAJo40FTxmmA=="],

    "hard-rejection": ["hard-rejection@2.1.0", "", {}, "sha512-VIZB+ibDhx7ObhAe7OVtoEbuP4h/MuOTHJ+J8h/eBXotJYl0fBgR72xDFCKgIh22OJZIOVNxBMWuhAr10r8HdA=="],

    "has-flag": ["has-flag@4.0.0", "", {}, "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="],

    "has-symbols": ["has-symbols@1.1.0", "", {}, "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ=="],

    "has-tostringtag": ["has-tostringtag@1.0.2", "", { "dependencies": { "has-symbols": "^1.0.3" } }, "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw=="],

    "hasown": ["hasown@2.0.2", "", { "dependencies": { "function-bind": "^1.1.2" } }, "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ=="],

    "header-case": ["header-case@2.0.4", "", { "dependencies": { "capital-case": "^1.0.4", "tslib": "^2.0.3" } }, "sha512-H/vuk5TEEVZwrR0lp2zed9OCo1uAILMlx0JEMgC26rzyJJ3N1v6XkwHHXJQdR2doSjcGPM6OKPYoJgf0plJ11Q=="],

    "hosted-git-info": ["hosted-git-info@4.1.0", "", { "dependencies": { "lru-cache": "^6.0.0" } }, "sha512-kyCuEOWjJqZuDbRHzL8V93NzQhwIB71oFWSyzVo+KPZI+pnQPPxucdkrOZvkLRnrf5URsQM+IJ09Dw29cRALIA=="],

    "html-escaper": ["html-escaper@2.0.2", "", {}, "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg=="],

    "human-signals": ["human-signals@2.1.0", "", {}, "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw=="],

    "iconv-lite": ["iconv-lite@0.4.24", "", { "dependencies": { "safer-buffer": ">= 2.1.2 < 3" } }, "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA=="],

    "ieee754": ["ieee754@1.2.1", "", {}, "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="],

    "import-local": ["import-local@3.2.0", "", { "dependencies": { "pkg-dir": "^4.2.0", "resolve-cwd": "^3.0.0" }, "bin": { "import-local-fixture": "fixtures/cli.js" } }, "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA=="],

    "imurmurhash": ["imurmurhash@0.1.4", "", {}, "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA=="],

    "indent-string": ["indent-string@4.0.0", "", {}, "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg=="],

    "inflight": ["inflight@1.0.6", "", { "dependencies": { "once": "^1.3.0", "wrappy": "1" } }, "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA=="],

    "inherits": ["inherits@2.0.4", "", {}, "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="],

    "inquirer": ["inquirer@8.2.6", "", { "dependencies": { "ansi-escapes": "^4.2.1", "chalk": "^4.1.1", "cli-cursor": "^3.1.0", "cli-width": "^3.0.0", "external-editor": "^3.0.3", "figures": "^3.0.0", "lodash": "^4.17.21", "mute-stream": "0.0.8", "ora": "^5.4.1", "run-async": "^2.4.0", "rxjs": "^7.5.5", "string-width": "^4.1.0", "strip-ansi": "^6.0.0", "through": "^2.3.6", "wrap-ansi": "^6.0.1" } }, "sha512-M1WuAmb7pn9zdFRtQYk26ZBoY043Sse0wVDdk4Bppr+JOXyQYybdtvK+l9wUibhtjdjvtoiNy8tk+EgsYIUqKg=="],

    "interface-blockstore": ["interface-blockstore@2.0.3", "", { "dependencies": { "interface-store": "^2.0.2", "multiformats": "^9.0.4" } }, "sha512-OwVUnlNcx7H5HloK0Myv6c/C1q9cNG11HX6afdeU6q6kbuNj8jKCwVnmJHhC94LZaJ+9hvVOk4IUstb3Esg81w=="],

    "interface-store": ["interface-store@2.0.2", "", {}, "sha512-rScRlhDcz6k199EkHqT8NpM87ebN89ICOzILoBHgaG36/WX50N32BnU/kpZgCGPLhARRAWUUX5/cyaIjt7Kipg=="],

    "ipfs-unixfs": ["ipfs-unixfs@6.0.9", "", { "dependencies": { "err-code": "^3.0.1", "protobufjs": "^6.10.2" } }, "sha512-0DQ7p0/9dRB6XCb0mVCTli33GzIzSVx5udpJuVM47tGcD+W+Bl4LsnoLswd3ggNnNEakMv1FdoFITiEnchXDqQ=="],

    "ipfs-unixfs-importer": ["ipfs-unixfs-importer@9.0.10", "", { "dependencies": { "@ipld/dag-pb": "^2.0.2", "@multiformats/murmur3": "^1.0.3", "bl": "^5.0.0", "err-code": "^3.0.1", "hamt-sharding": "^2.0.0", "interface-blockstore": "^2.0.3", "ipfs-unixfs": "^6.0.0", "it-all": "^1.0.5", "it-batch": "^1.0.8", "it-first": "^1.0.6", "it-parallel-batch": "^1.0.9", "merge-options": "^3.0.4", "multiformats": "^9.4.2", "rabin-wasm": "^0.1.4", "uint8arrays": "^3.0.0" } }, "sha512-W+tQTVcSmXtFh7FWYWwPBGXJ1xDgREbIyI1E5JzDcimZLIyT5gGMfxR3oKPxxWj+GKMpP5ilvMQrbsPzWcm3Fw=="],

    "is-arrayish": ["is-arrayish@0.2.1", "", {}, "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="],

    "is-core-module": ["is-core-module@2.16.1", "", { "dependencies": { "hasown": "^2.0.2" } }, "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w=="],

    "is-fullwidth-code-point": ["is-fullwidth-code-point@3.0.0", "", {}, "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="],

    "is-generator-fn": ["is-generator-fn@2.1.0", "", {}, "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ=="],

    "is-interactive": ["is-interactive@1.0.0", "", {}, "sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w=="],

    "is-number": ["is-number@7.0.0", "", {}, "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="],

    "is-plain-obj": ["is-plain-obj@1.1.0", "", {}, "sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg=="],

    "is-stream": ["is-stream@2.0.0", "", {}, "sha512-XCoy+WlUr7d1+Z8GgSuXmpuUFC9fOhRXglJMx+dwLKTkL44Cjd4W1Z5P+BQZpr+cR93aGP4S/s7Ftw6Nd/kiEw=="],

    "is-unicode-supported": ["is-unicode-supported@0.1.0", "", {}, "sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw=="],

    "isexe": ["isexe@2.0.0", "", {}, "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="],

    "isomorphic-fetch": ["isomorphic-fetch@3.0.0", "", { "dependencies": { "node-fetch": "^2.6.1", "whatwg-fetch": "^3.4.1" } }, "sha512-qvUtwJ3j6qwsF3jLxkZ72qCgjMysPzDfeV240JHiGZsANBYd+EEuu35v7dfrJ9Up0Ak07D7GGSkGhCHTqg/5wA=="],

    "istanbul-lib-coverage": ["istanbul-lib-coverage@3.2.2", "", {}, "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg=="],

    "istanbul-lib-instrument": ["istanbul-lib-instrument@6.0.3", "", { "dependencies": { "@babel/core": "^7.23.9", "@babel/parser": "^7.23.9", "@istanbuljs/schema": "^0.1.3", "istanbul-lib-coverage": "^3.2.0", "semver": "^7.5.4" } }, "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q=="],

    "istanbul-lib-report": ["istanbul-lib-report@3.0.1", "", { "dependencies": { "istanbul-lib-coverage": "^3.0.0", "make-dir": "^4.0.0", "supports-color": "^7.1.0" } }, "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw=="],

    "istanbul-lib-source-maps": ["istanbul-lib-source-maps@4.0.1", "", { "dependencies": { "debug": "^4.1.1", "istanbul-lib-coverage": "^3.0.0", "source-map": "^0.6.1" } }, "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw=="],

    "istanbul-reports": ["istanbul-reports@3.1.7", "", { "dependencies": { "html-escaper": "^2.0.0", "istanbul-lib-report": "^3.0.0" } }, "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g=="],

    "it-all": ["it-all@1.0.6", "", {}, "sha512-3cmCc6Heqe3uWi3CVM/k51fa/XbMFpQVzFoDsV0IZNHSQDyAXl3c4MjHkFX5kF3922OGj7Myv1nSEUgRtcuM1A=="],

    "it-batch": ["it-batch@1.0.9", "", {}, "sha512-7Q7HXewMhNFltTsAMdSz6luNhyhkhEtGGbYek/8Xb/GiqYMtwUmopE1ocPSiJKKp3rM4Dt045sNFoUu+KZGNyA=="],

    "it-drain": ["it-drain@1.0.5", "", {}, "sha512-r/GjkiW1bZswC04TNmUnLxa6uovme7KKwPhc+cb1hHU65E3AByypHH6Pm91WHuvqfFsm+9ws0kPtDBV3/8vmIg=="],

    "it-filter": ["it-filter@1.0.3", "", {}, "sha512-EI3HpzUrKjTH01miLHWmhNWy3Xpbx4OXMXltgrNprL5lDpF3giVpHIouFpr5l+evXw6aOfxhnt01BIB+4VQA+w=="],

    "it-first": ["it-first@1.0.7", "", {}, "sha512-nvJKZoBpZD/6Rtde6FXqwDqDZGF1sCADmr2Zoc0hZsIvnE449gRFnGctxDf09Bzc/FWnHXAdaHVIetY6lrE0/g=="],

    "it-parallel-batch": ["it-parallel-batch@1.0.11", "", { "dependencies": { "it-batch": "^1.0.9" } }, "sha512-UWsWHv/kqBpMRmyZJzlmZeoAMA0F3SZr08FBdbhtbe+MtoEBgr/ZUAKrnenhXCBrsopy76QjRH2K/V8kNdupbQ=="],

    "it-take": ["it-take@1.0.2", "", {}, "sha512-u7I6qhhxH7pSevcYNaMECtkvZW365ARqAIt9K+xjdK1B2WUDEjQSfETkOCT8bxFq/59LqrN3cMLUtTgmDBaygw=="],

    "jake": ["jake@10.9.2", "", { "dependencies": { "async": "^3.2.3", "chalk": "^4.0.2", "filelist": "^1.0.4", "minimatch": "^3.1.2" }, "bin": { "jake": "bin/cli.js" } }, "sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA=="],

    "jest": ["jest@29.7.0", "", { "dependencies": { "@jest/core": "^29.7.0", "@jest/types": "^29.6.3", "import-local": "^3.0.2", "jest-cli": "^29.7.0" }, "peerDependencies": { "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0" }, "optionalPeers": ["node-notifier"], "bin": { "jest": "bin/jest.js" } }, "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw=="],

    "jest-changed-files": ["jest-changed-files@29.7.0", "", { "dependencies": { "execa": "^5.0.0", "jest-util": "^29.7.0", "p-limit": "^3.1.0" } }, "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w=="],

    "jest-circus": ["jest-circus@29.7.0", "", { "dependencies": { "@jest/environment": "^29.7.0", "@jest/expect": "^29.7.0", "@jest/test-result": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "chalk": "^4.0.0", "co": "^4.6.0", "dedent": "^1.0.0", "is-generator-fn": "^2.0.0", "jest-each": "^29.7.0", "jest-matcher-utils": "^29.7.0", "jest-message-util": "^29.7.0", "jest-runtime": "^29.7.0", "jest-snapshot": "^29.7.0", "jest-util": "^29.7.0", "p-limit": "^3.1.0", "pretty-format": "^29.7.0", "pure-rand": "^6.0.0", "slash": "^3.0.0", "stack-utils": "^2.0.3" } }, "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw=="],

    "jest-cli": ["jest-cli@29.7.0", "", { "dependencies": { "@jest/core": "^29.7.0", "@jest/test-result": "^29.7.0", "@jest/types": "^29.6.3", "chalk": "^4.0.0", "create-jest": "^29.7.0", "exit": "^0.1.2", "import-local": "^3.0.2", "jest-config": "^29.7.0", "jest-util": "^29.7.0", "jest-validate": "^29.7.0", "yargs": "^17.3.1" }, "peerDependencies": { "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0" }, "optionalPeers": ["node-notifier"], "bin": { "jest": "bin/jest.js" } }, "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg=="],

    "jest-config": ["jest-config@29.7.0", "", { "dependencies": { "@babel/core": "^7.11.6", "@jest/test-sequencer": "^29.7.0", "@jest/types": "^29.6.3", "babel-jest": "^29.7.0", "chalk": "^4.0.0", "ci-info": "^3.2.0", "deepmerge": "^4.2.2", "glob": "^7.1.3", "graceful-fs": "^4.2.9", "jest-circus": "^29.7.0", "jest-environment-node": "^29.7.0", "jest-get-type": "^29.6.3", "jest-regex-util": "^29.6.3", "jest-resolve": "^29.7.0", "jest-runner": "^29.7.0", "jest-util": "^29.7.0", "jest-validate": "^29.7.0", "micromatch": "^4.0.4", "parse-json": "^5.2.0", "pretty-format": "^29.7.0", "slash": "^3.0.0", "strip-json-comments": "^3.1.1" }, "peerDependencies": { "@types/node": "*", "ts-node": ">=9.0.0" }, "optionalPeers": ["@types/node", "ts-node"] }, "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ=="],

    "jest-diff": ["jest-diff@29.7.0", "", { "dependencies": { "chalk": "^4.0.0", "diff-sequences": "^29.6.3", "jest-get-type": "^29.6.3", "pretty-format": "^29.7.0" } }, "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw=="],

    "jest-docblock": ["jest-docblock@29.7.0", "", { "dependencies": { "detect-newline": "^3.0.0" } }, "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g=="],

    "jest-each": ["jest-each@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "chalk": "^4.0.0", "jest-get-type": "^29.6.3", "jest-util": "^29.7.0", "pretty-format": "^29.7.0" } }, "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ=="],

    "jest-environment-node": ["jest-environment-node@29.7.0", "", { "dependencies": { "@jest/environment": "^29.7.0", "@jest/fake-timers": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "jest-mock": "^29.7.0", "jest-util": "^29.7.0" } }, "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw=="],

    "jest-get-type": ["jest-get-type@29.6.3", "", {}, "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw=="],

    "jest-haste-map": ["jest-haste-map@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "@types/graceful-fs": "^4.1.3", "@types/node": "*", "anymatch": "^3.0.3", "fb-watchman": "^2.0.0", "graceful-fs": "^4.2.9", "jest-regex-util": "^29.6.3", "jest-util": "^29.7.0", "jest-worker": "^29.7.0", "micromatch": "^4.0.4", "walker": "^1.0.8" }, "optionalDependencies": { "fsevents": "^2.3.2" } }, "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA=="],

    "jest-leak-detector": ["jest-leak-detector@29.7.0", "", { "dependencies": { "jest-get-type": "^29.6.3", "pretty-format": "^29.7.0" } }, "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw=="],

    "jest-matcher-utils": ["jest-matcher-utils@29.7.0", "", { "dependencies": { "chalk": "^4.0.0", "jest-diff": "^29.7.0", "jest-get-type": "^29.6.3", "pretty-format": "^29.7.0" } }, "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g=="],

    "jest-message-util": ["jest-message-util@29.7.0", "", { "dependencies": { "@babel/code-frame": "^7.12.13", "@jest/types": "^29.6.3", "@types/stack-utils": "^2.0.0", "chalk": "^4.0.0", "graceful-fs": "^4.2.9", "micromatch": "^4.0.4", "pretty-format": "^29.7.0", "slash": "^3.0.0", "stack-utils": "^2.0.3" } }, "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w=="],

    "jest-mock": ["jest-mock@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "@types/node": "*", "jest-util": "^29.7.0" } }, "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw=="],

    "jest-pnp-resolver": ["jest-pnp-resolver@1.2.3", "", { "peerDependencies": { "jest-resolve": "*" }, "optionalPeers": ["jest-resolve"] }, "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w=="],

    "jest-regex-util": ["jest-regex-util@29.6.3", "", {}, "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg=="],

    "jest-resolve": ["jest-resolve@29.7.0", "", { "dependencies": { "chalk": "^4.0.0", "graceful-fs": "^4.2.9", "jest-haste-map": "^29.7.0", "jest-pnp-resolver": "^1.2.2", "jest-util": "^29.7.0", "jest-validate": "^29.7.0", "resolve": "^1.20.0", "resolve.exports": "^2.0.0", "slash": "^3.0.0" } }, "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA=="],

    "jest-resolve-dependencies": ["jest-resolve-dependencies@29.7.0", "", { "dependencies": { "jest-regex-util": "^29.6.3", "jest-snapshot": "^29.7.0" } }, "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA=="],

    "jest-runner": ["jest-runner@29.7.0", "", { "dependencies": { "@jest/console": "^29.7.0", "@jest/environment": "^29.7.0", "@jest/test-result": "^29.7.0", "@jest/transform": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "chalk": "^4.0.0", "emittery": "^0.13.1", "graceful-fs": "^4.2.9", "jest-docblock": "^29.7.0", "jest-environment-node": "^29.7.0", "jest-haste-map": "^29.7.0", "jest-leak-detector": "^29.7.0", "jest-message-util": "^29.7.0", "jest-resolve": "^29.7.0", "jest-runtime": "^29.7.0", "jest-util": "^29.7.0", "jest-watcher": "^29.7.0", "jest-worker": "^29.7.0", "p-limit": "^3.1.0", "source-map-support": "0.5.13" } }, "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ=="],

    "jest-runtime": ["jest-runtime@29.7.0", "", { "dependencies": { "@jest/environment": "^29.7.0", "@jest/fake-timers": "^29.7.0", "@jest/globals": "^29.7.0", "@jest/source-map": "^29.6.3", "@jest/test-result": "^29.7.0", "@jest/transform": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "chalk": "^4.0.0", "cjs-module-lexer": "^1.0.0", "collect-v8-coverage": "^1.0.0", "glob": "^7.1.3", "graceful-fs": "^4.2.9", "jest-haste-map": "^29.7.0", "jest-message-util": "^29.7.0", "jest-mock": "^29.7.0", "jest-regex-util": "^29.6.3", "jest-resolve": "^29.7.0", "jest-snapshot": "^29.7.0", "jest-util": "^29.7.0", "slash": "^3.0.0", "strip-bom": "^4.0.0" } }, "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ=="],

    "jest-snapshot": ["jest-snapshot@29.7.0", "", { "dependencies": { "@babel/core": "^7.11.6", "@babel/generator": "^7.7.2", "@babel/plugin-syntax-jsx": "^7.7.2", "@babel/plugin-syntax-typescript": "^7.7.2", "@babel/types": "^7.3.3", "@jest/expect-utils": "^29.7.0", "@jest/transform": "^29.7.0", "@jest/types": "^29.6.3", "babel-preset-current-node-syntax": "^1.0.0", "chalk": "^4.0.0", "expect": "^29.7.0", "graceful-fs": "^4.2.9", "jest-diff": "^29.7.0", "jest-get-type": "^29.6.3", "jest-matcher-utils": "^29.7.0", "jest-message-util": "^29.7.0", "jest-util": "^29.7.0", "natural-compare": "^1.4.0", "pretty-format": "^29.7.0", "semver": "^7.5.3" } }, "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw=="],

    "jest-util": ["jest-util@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "@types/node": "*", "chalk": "^4.0.0", "ci-info": "^3.2.0", "graceful-fs": "^4.2.9", "picomatch": "^2.2.3" } }, "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA=="],

    "jest-validate": ["jest-validate@29.7.0", "", { "dependencies": { "@jest/types": "^29.6.3", "camelcase": "^6.2.0", "chalk": "^4.0.0", "jest-get-type": "^29.6.3", "leven": "^3.1.0", "pretty-format": "^29.7.0" } }, "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw=="],

    "jest-watcher": ["jest-watcher@29.7.0", "", { "dependencies": { "@jest/test-result": "^29.7.0", "@jest/types": "^29.6.3", "@types/node": "*", "ansi-escapes": "^4.2.1", "chalk": "^4.0.0", "emittery": "^0.13.1", "jest-util": "^29.7.0", "string-length": "^4.0.1" } }, "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g=="],

    "jest-worker": ["jest-worker@29.7.0", "", { "dependencies": { "@types/node": "*", "jest-util": "^29.7.0", "merge-stream": "^2.0.0", "supports-color": "^8.0.0" } }, "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw=="],

    "js-tokens": ["js-tokens@4.0.0", "", {}, "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="],

    "js-yaml": ["js-yaml@3.14.1", "", { "dependencies": { "argparse": "^1.0.7", "esprima": "^4.0.0" }, "bin": { "js-yaml": "bin/js-yaml.js" } }, "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g=="],

    "jsesc": ["jsesc@3.1.0", "", { "bin": { "jsesc": "bin/jsesc" } }, "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA=="],

    "json-bigint": ["json-bigint@1.0.0", "", { "dependencies": { "bignumber.js": "^9.0.0" } }, "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ=="],

    "json-parse-even-better-errors": ["json-parse-even-better-errors@2.3.1", "", {}, "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="],

    "json5": ["json5@2.2.3", "", { "bin": { "json5": "lib/cli.js" } }, "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg=="],

    "jssha": ["jssha@3.2.0", "", {}, "sha512-QuruyBENDWdN4tZwJbQq7/eAK85FqrI4oDbXjy5IBhYD+2pTJyBUWZe8ctWaCkrV0gy6AaelgOZZBMeswEa/6Q=="],

    "kind-of": ["kind-of@6.0.3", "", {}, "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="],

    "kleur": ["kleur@3.0.3", "", {}, "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w=="],

    "leven": ["leven@3.1.0", "", {}, "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A=="],

    "lines-and-columns": ["lines-and-columns@1.2.4", "", {}, "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="],

    "locate-path": ["locate-path@5.0.0", "", { "dependencies": { "p-locate": "^4.1.0" } }, "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g=="],

    "lodash": ["lodash@4.17.21", "", {}, "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="],

    "lodash.memoize": ["lodash.memoize@4.1.2", "", {}, "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag=="],

    "log-symbols": ["log-symbols@4.1.0", "", { "dependencies": { "chalk": "^4.1.0", "is-unicode-supported": "^0.1.0" } }, "sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg=="],

    "long": ["long@4.0.0", "", {}, "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="],

    "lower-case": ["lower-case@2.0.2", "", { "dependencies": { "tslib": "^2.0.3" } }, "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg=="],

    "lru-cache": ["lru-cache@5.1.1", "", { "dependencies": { "yallist": "^3.0.2" } }, "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w=="],

    "make-dir": ["make-dir@4.0.0", "", { "dependencies": { "semver": "^7.5.3" } }, "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw=="],

    "make-error": ["make-error@1.3.6", "", {}, "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="],

    "makeerror": ["makeerror@1.0.12", "", { "dependencies": { "tmpl": "1.0.5" } }, "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg=="],

    "map-obj": ["map-obj@4.3.0", "", {}, "sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ=="],

    "math-intrinsics": ["math-intrinsics@1.1.0", "", {}, "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g=="],

    "meow": ["meow@9.0.0", "", { "dependencies": { "@types/minimist": "^1.2.0", "camelcase-keys": "^6.2.2", "decamelize": "^1.2.0", "decamelize-keys": "^1.1.0", "hard-rejection": "^2.1.0", "minimist-options": "4.1.0", "normalize-package-data": "^3.0.0", "read-pkg-up": "^7.0.1", "redent": "^3.0.0", "trim-newlines": "^3.0.0", "type-fest": "^0.18.0", "yargs-parser": "^20.2.3" } }, "sha512-+obSblOQmRhcyBt62furQqRAQpNyWXo8BuQ5bN7dG8wmwQ+vwHKp/rCFD4CrTP8CsDQD1sjoZ94K417XEUk8IQ=="],

    "merge-options": ["merge-options@3.0.4", "", { "dependencies": { "is-plain-obj": "^2.1.0" } }, "sha512-2Sug1+knBjkaMsMgf1ctR1Ujx+Ayku4EdJN4Z+C2+JzoeF7A3OZ9KM2GY0CpQS51NR61LTurMJrRKPhSs3ZRTQ=="],

    "merge-stream": ["merge-stream@2.0.0", "", {}, "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w=="],

    "micromatch": ["micromatch@4.0.8", "", { "dependencies": { "braces": "^3.0.3", "picomatch": "^2.3.1" } }, "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA=="],

    "mime-db": ["mime-db@1.52.0", "", {}, "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="],

    "mime-types": ["mime-types@2.1.35", "", { "dependencies": { "mime-db": "1.52.0" } }, "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw=="],

    "mimic-fn": ["mimic-fn@2.1.0", "", {}, "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg=="],

    "min-indent": ["min-indent@1.0.1", "", {}, "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg=="],

    "minimatch": ["minimatch@3.1.2", "", { "dependencies": { "brace-expansion": "^1.1.7" } }, "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw=="],

    "minimist": ["minimist@1.2.8", "", {}, "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA=="],

    "minimist-options": ["minimist-options@4.1.0", "", { "dependencies": { "arrify": "^1.0.1", "is-plain-obj": "^1.1.0", "kind-of": "^6.0.3" } }, "sha512-Q4r8ghd80yhO/0j1O3B2BjweX3fiHg9cdOwjJd2J76Q135c+NDxGCqdYKQ1SKBuFfgWbAUzBfvYjPUEeNgqN1A=="],

    "ms": ["ms@2.1.3", "", {}, "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="],

    "multiformats": ["multiformats@9.9.0", "", {}, "sha512-HoMUjhH9T8DDBNT+6xzkrd9ga/XiBI4xLr58LJACwK6G3HTOPeMz4nB4KJs33L2BelrIJa7P0VuNaVF3hMYfjg=="],

    "murmurhash3js-revisited": ["murmurhash3js-revisited@3.0.0", "", {}, "sha512-/sF3ee6zvScXMb1XFJ8gDsSnY+X8PbOyjIuBhtgis10W2Jx4ZjIhikUCIF9c4gpJxVnQIsPAFrSwTCuAjicP6g=="],

    "mute-stream": ["mute-stream@0.0.8", "", {}, "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA=="],

    "natural-compare": ["natural-compare@1.4.0", "", {}, "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw=="],

    "no-case": ["no-case@3.0.4", "", { "dependencies": { "lower-case": "^2.0.2", "tslib": "^2.0.3" } }, "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg=="],

    "node-fetch": ["node-fetch@2.6.7", "", { "dependencies": { "whatwg-url": "^5.0.0" }, "peerDependencies": { "encoding": "^0.1.0" }, "optionalPeers": ["encoding"] }, "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ=="],

    "node-inspect-extracted": ["node-inspect-extracted@2.0.2", "", {}, "sha512-8qm9+tu/GmbA/uWQRs6ad8KstyhH94a0pXpRVGHaJ9wHlJbetCYoCwXbKILaaMcE+wgbgpOpzcCnipkL8vTqxA=="],

    "node-int64": ["node-int64@0.4.0", "", {}, "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw=="],

    "node-releases": ["node-releases@2.0.19", "", {}, "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw=="],

    "normalize-package-data": ["normalize-package-data@3.0.3", "", { "dependencies": { "hosted-git-info": "^4.0.1", "is-core-module": "^2.5.0", "semver": "^7.3.4", "validate-npm-package-license": "^3.0.1" } }, "sha512-p2W1sgqij3zMMyRC067Dg16bfzVH+w7hyegmpIvZ4JNjqtGOVAIvLmjBx3yP7YTe9vKJgkoNOPjwQGogDoMXFA=="],

    "normalize-path": ["normalize-path@3.0.0", "", {}, "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="],

    "npm-run-path": ["npm-run-path@4.0.1", "", { "dependencies": { "path-key": "^3.0.0" } }, "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw=="],

    "ohm-js": ["ohm-js@16.6.0", "", {}, "sha512-X9P4koSGa7swgVQ0gt71UCYtkAQGOjciJPJAz74kDxWt8nXbH5HrDOQG6qBDH7SR40ktNv4x61BwpTDE9q4lRA=="],

    "once": ["once@1.4.0", "", { "dependencies": { "wrappy": "1" } }, "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w=="],

    "onetime": ["onetime@5.1.2", "", { "dependencies": { "mimic-fn": "^2.1.0" } }, "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg=="],

    "ora": ["ora@5.4.1", "", { "dependencies": { "bl": "^4.1.0", "chalk": "^4.1.0", "cli-cursor": "^3.1.0", "cli-spinners": "^2.5.0", "is-interactive": "^1.0.0", "is-unicode-supported": "^0.1.0", "log-symbols": "^4.1.0", "strip-ansi": "^6.0.0", "wcwidth": "^1.0.1" } }, "sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ=="],

    "os-tmpdir": ["os-tmpdir@1.0.2", "", {}, "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g=="],

    "p-limit": ["p-limit@3.1.0", "", { "dependencies": { "yocto-queue": "^0.1.0" } }, "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ=="],

    "p-locate": ["p-locate@4.1.0", "", { "dependencies": { "p-limit": "^2.2.0" } }, "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A=="],

    "p-try": ["p-try@2.2.0", "", {}, "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ=="],

    "param-case": ["param-case@3.0.4", "", { "dependencies": { "dot-case": "^3.0.4", "tslib": "^2.0.3" } }, "sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A=="],

    "parse-json": ["parse-json@5.2.0", "", { "dependencies": { "@babel/code-frame": "^7.0.0", "error-ex": "^1.3.1", "json-parse-even-better-errors": "^2.3.0", "lines-and-columns": "^1.1.6" } }, "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg=="],

    "pascal-case": ["pascal-case@3.1.2", "", { "dependencies": { "no-case": "^3.0.4", "tslib": "^2.0.3" } }, "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g=="],

    "path-case": ["path-case@3.0.4", "", { "dependencies": { "dot-case": "^3.0.4", "tslib": "^2.0.3" } }, "sha512-qO4qCFjXqVTrcbPt/hQfhTQ+VhFsqNKOPtytgNKkKxSoEp3XPUQ8ObFuePylOIok5gjn69ry8XiULxCwot3Wfg=="],

    "path-exists": ["path-exists@4.0.0", "", {}, "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w=="],

    "path-is-absolute": ["path-is-absolute@1.0.1", "", {}, "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg=="],

    "path-key": ["path-key@3.1.1", "", {}, "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q=="],

    "path-normalize": ["path-normalize@6.0.13", "", {}, "sha512-PfC1Pc+IEhI77UEN731pj2nMs9gHAV36IA6IW6VdXWjoQesf+jtO9hdMUqTRS6mwR0T5rmyUrQzd5vw0VwL1Lw=="],

    "path-parse": ["path-parse@1.0.7", "", {}, "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="],

    "picocolors": ["picocolors@1.1.1", "", {}, "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA=="],

    "picomatch": ["picomatch@2.3.1", "", {}, "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="],

    "pirates": ["pirates@4.0.6", "", {}, "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg=="],

    "pkg-dir": ["pkg-dir@4.2.0", "", { "dependencies": { "find-up": "^4.0.0" } }, "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ=="],

    "prettier": ["prettier@3.5.3", "", { "bin": { "prettier": "bin/prettier.cjs" } }, "sha512-QQtaxnoDJeAkDvDKWCLiwIXkTgRhwYDEQCghU9Z6q03iyek/rxRh/2lC3HB7P8sWT2xC/y5JDctPLBIGzHKbhw=="],

    "pretty-format": ["pretty-format@29.7.0", "", { "dependencies": { "@jest/schemas": "^29.6.3", "ansi-styles": "^5.0.0", "react-is": "^18.0.0" } }, "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ=="],

    "prompts": ["prompts@2.4.2", "", { "dependencies": { "kleur": "^3.0.3", "sisteransi": "^1.0.5" } }, "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q=="],

    "protobufjs": ["protobufjs@6.11.4", "", { "dependencies": { "@protobufjs/aspromise": "^1.1.2", "@protobufjs/base64": "^1.1.2", "@protobufjs/codegen": "^2.0.4", "@protobufjs/eventemitter": "^1.1.0", "@protobufjs/fetch": "^1.1.0", "@protobufjs/float": "^1.0.2", "@protobufjs/inquire": "^1.1.0", "@protobufjs/path": "^1.1.2", "@protobufjs/pool": "^1.1.0", "@protobufjs/utf8": "^1.1.0", "@types/long": "^4.0.1", "@types/node": ">=13.7.0", "long": "^4.0.0" }, "bin": { "pbjs": "bin/pbjs", "pbts": "bin/pbts" } }, "sha512-5kQWPaJHi1WoCpjTGszzQ32PG2F4+wRY6BmAT4Vfw56Q2FZ4YZzK20xUYQH4YkfehY1e6QSICrJquM6xXZNcrw=="],

    "proxy-from-env": ["proxy-from-env@1.1.0", "", {}, "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="],

    "pure-rand": ["pure-rand@6.1.0", "", {}, "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA=="],

    "qrcode-terminal": ["qrcode-terminal@0.12.0", "", { "bin": { "qrcode-terminal": "./bin/qrcode-terminal.js" } }, "sha512-EXtzRZmC+YGmGlDFbXKxQiMZNwCLEO6BANKXG4iCtSIM0yqc/pappSx3RIKr4r0uh5JsBckOXeKrB3Iz7mdQpQ=="],

    "quick-lru": ["quick-lru@4.0.1", "", {}, "sha512-ARhCpm70fzdcvNQfPoy49IaanKkTlRWF2JMzqhcJbhSFRZv7nPTvZJdcY7301IPmvW+/p0RgIWnQDLJxifsQ7g=="],

    "rabin-wasm": ["rabin-wasm@0.1.5", "", { "dependencies": { "@assemblyscript/loader": "^0.9.4", "bl": "^5.0.0", "debug": "^4.3.1", "minimist": "^1.2.5", "node-fetch": "^2.6.1", "readable-stream": "^3.6.0" }, "bin": { "rabin-wasm": "cli/bin.js" } }, "sha512-uWgQTo7pim1Rnj5TuWcCewRDTf0PEFTSlaUjWP4eY9EbLV9em08v89oCz/WO+wRxpYuO36XEHp4wgYQnAgOHzA=="],

    "react-is": ["react-is@18.3.1", "", {}, "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg=="],

    "read-pkg": ["read-pkg@5.2.0", "", { "dependencies": { "@types/normalize-package-data": "^2.4.0", "normalize-package-data": "^2.5.0", "parse-json": "^5.0.0", "type-fest": "^0.6.0" } }, "sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg=="],

    "read-pkg-up": ["read-pkg-up@7.0.1", "", { "dependencies": { "find-up": "^4.1.0", "read-pkg": "^5.2.0", "type-fest": "^0.8.1" } }, "sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg=="],

    "readable-stream": ["readable-stream@3.6.2", "", { "dependencies": { "inherits": "^2.0.3", "string_decoder": "^1.1.1", "util-deprecate": "^1.0.1" } }, "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA=="],

    "redent": ["redent@3.0.0", "", { "dependencies": { "indent-string": "^4.0.0", "strip-indent": "^3.0.0" } }, "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg=="],

    "require-directory": ["require-directory@2.1.1", "", {}, "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q=="],

    "resolve": ["resolve@1.22.10", "", { "dependencies": { "is-core-module": "^2.16.0", "path-parse": "^1.0.7", "supports-preserve-symlinks-flag": "^1.0.0" }, "bin": { "resolve": "bin/resolve" } }, "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w=="],

    "resolve-cwd": ["resolve-cwd@3.0.0", "", { "dependencies": { "resolve-from": "^5.0.0" } }, "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg=="],

    "resolve-from": ["resolve-from@5.0.0", "", {}, "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw=="],

    "resolve.exports": ["resolve.exports@2.0.3", "", {}, "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A=="],

    "restore-cursor": ["restore-cursor@3.1.0", "", { "dependencies": { "onetime": "^5.1.0", "signal-exit": "^3.0.2" } }, "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA=="],

    "run-async": ["run-async@2.4.1", "", {}, "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ=="],

    "rxjs": ["rxjs@7.8.2", "", { "dependencies": { "tslib": "^2.1.0" } }, "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA=="],

    "safe-buffer": ["safe-buffer@5.2.1", "", {}, "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="],

    "safer-buffer": ["safer-buffer@2.1.2", "", {}, "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="],

    "semver": ["semver@7.7.1", "", { "bin": { "semver": "bin/semver.js" } }, "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA=="],

    "sentence-case": ["sentence-case@3.0.4", "", { "dependencies": { "no-case": "^3.0.4", "tslib": "^2.0.3", "upper-case-first": "^2.0.2" } }, "sha512-8LS0JInaQMCRoQ7YUytAo/xUu5W2XnQxV2HI/6uM6U7CITS1RqPElr30V6uIqyMKM9lJGRVFy5/4CuzcixNYSg=="],

    "shebang-command": ["shebang-command@2.0.0", "", { "dependencies": { "shebang-regex": "^3.0.0" } }, "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA=="],

    "shebang-regex": ["shebang-regex@3.0.0", "", {}, "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A=="],

    "signal-exit": ["signal-exit@3.0.7", "", {}, "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="],

    "sisteransi": ["sisteransi@1.0.5", "", {}, "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg=="],

    "slash": ["slash@3.0.0", "", {}, "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="],

    "snake-case": ["snake-case@3.0.4", "", { "dependencies": { "dot-case": "^3.0.4", "tslib": "^2.0.3" } }, "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg=="],

    "source-map": ["source-map@0.6.1", "", {}, "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="],

    "source-map-support": ["source-map-support@0.5.13", "", { "dependencies": { "buffer-from": "^1.0.0", "source-map": "^0.6.0" } }, "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w=="],

    "sparse-array": ["sparse-array@1.3.2", "", {}, "sha512-ZT711fePGn3+kQyLuv1fpd3rNSkNF8vd5Kv2D+qnOANeyKs3fx6bUMGWRPvgTTcYV64QMqZKZwcuaQSP3AZ0tg=="],

    "spdx-correct": ["spdx-correct@3.2.0", "", { "dependencies": { "spdx-expression-parse": "^3.0.0", "spdx-license-ids": "^3.0.0" } }, "sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA=="],

    "spdx-exceptions": ["spdx-exceptions@2.5.0", "", {}, "sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w=="],

    "spdx-expression-parse": ["spdx-expression-parse@3.0.1", "", { "dependencies": { "spdx-exceptions": "^2.1.0", "spdx-license-ids": "^3.0.0" } }, "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q=="],

    "spdx-license-ids": ["spdx-license-ids@3.0.21", "", {}, "sha512-Bvg/8F5XephndSK3JffaRqdT+gyhfqIPwDHpX80tJrF8QQRYMo8sNMeaZ2Dp5+jhwKnUmIOyFFQfHRkjJm5nXg=="],

    "sprintf-js": ["sprintf-js@1.0.3", "", {}, "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g=="],

    "stack-utils": ["stack-utils@2.0.6", "", { "dependencies": { "escape-string-regexp": "^2.0.0" } }, "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ=="],

    "string-length": ["string-length@4.0.2", "", { "dependencies": { "char-regex": "^1.0.2", "strip-ansi": "^6.0.0" } }, "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ=="],

    "string-width": ["string-width@4.2.3", "", { "dependencies": { "emoji-regex": "^8.0.0", "is-fullwidth-code-point": "^3.0.0", "strip-ansi": "^6.0.1" } }, "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g=="],

    "string_decoder": ["string_decoder@1.3.0", "", { "dependencies": { "safe-buffer": "~5.2.0" } }, "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA=="],

    "strip-ansi": ["strip-ansi@6.0.1", "", { "dependencies": { "ansi-regex": "^5.0.1" } }, "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A=="],

    "strip-bom": ["strip-bom@4.0.0", "", {}, "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w=="],

    "strip-final-newline": ["strip-final-newline@2.0.0", "", {}, "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA=="],

    "strip-indent": ["strip-indent@3.0.0", "", { "dependencies": { "min-indent": "^1.0.0" } }, "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ=="],

    "strip-json-comments": ["strip-json-comments@3.1.1", "", {}, "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig=="],

    "supports-color": ["supports-color@7.2.0", "", { "dependencies": { "has-flag": "^4.0.0" } }, "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw=="],

    "supports-preserve-symlinks-flag": ["supports-preserve-symlinks-flag@1.0.0", "", {}, "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="],

    "symbol.inspect": ["symbol.inspect@1.0.1", "", {}, "sha512-YQSL4duoHmLhsTD1Pw8RW6TZ5MaTX5rXJnqacJottr2P2LZBF/Yvrc3ku4NUpMOm8aM0KOCqM+UAkMA5HWQCzQ=="],

    "teslabot": ["teslabot@1.5.0", "", {}, "sha512-e2MmELhCgrgZEGo7PQu/6bmYG36IDH+YrBI1iGm6jovXkeDIGa3pZ2WSqRjzkuw2vt1EqfkZoV5GpXgqL8QJVg=="],

    "test-exclude": ["test-exclude@6.0.0", "", { "dependencies": { "@istanbuljs/schema": "^0.1.2", "glob": "^7.1.4", "minimatch": "^3.0.4" } }, "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w=="],

    "through": ["through@2.3.8", "", {}, "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="],

    "tiny-invariant": ["tiny-invariant@1.3.3", "", {}, "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg=="],

    "tmp": ["tmp@0.0.33", "", { "dependencies": { "os-tmpdir": "~1.0.2" } }, "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw=="],

    "tmpl": ["tmpl@1.0.5", "", {}, "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw=="],

    "to-regex-range": ["to-regex-range@5.0.1", "", { "dependencies": { "is-number": "^7.0.0" } }, "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ=="],

    "toformat": ["toformat@2.0.0", "", {}, "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="],

    "tr46": ["tr46@0.0.3", "", {}, "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="],

    "trim-newlines": ["trim-newlines@3.0.1", "", {}, "sha512-c1PTsA3tYrIsLGkJkzHF+w9F2EyxfXGo4UyJc4pFL++FMjnq0HJS69T3M7d//gKrFKwy429bouPescbjecU+Zw=="],

    "ts-jest": ["ts-jest@29.2.6", "", { "dependencies": { "bs-logger": "^0.2.6", "ejs": "^3.1.10", "fast-json-stable-stringify": "^2.1.0", "jest-util": "^29.0.0", "json5": "^2.2.3", "lodash.memoize": "^4.1.2", "make-error": "^1.3.6", "semver": "^7.7.1", "yargs-parser": "^21.1.1" }, "peerDependencies": { "@babel/core": ">=7.0.0-beta.0 <8", "@jest/transform": "^29.0.0", "@jest/types": "^29.0.0", "babel-jest": "^29.0.0", "jest": "^29.0.0", "typescript": ">=4.3 <6" }, "optionalPeers": ["@babel/core", "@jest/transform", "@jest/types", "babel-jest"], "bin": { "ts-jest": "cli.js" } }, "sha512-yTNZVZqc8lSixm+QGVFcPe6+yj7+TWZwIesuOWvfcn4B9bz5x4NDzVCQQjOs7Hfouu36aEqfEbo9Qpo+gq8dDg=="],

    "ts-node": ["ts-node@10.9.2", "", { "dependencies": { "@cspotcode/source-map-support": "^0.8.0", "@tsconfig/node10": "^1.0.7", "@tsconfig/node12": "^1.0.7", "@tsconfig/node14": "^1.0.0", "@tsconfig/node16": "^1.0.2", "acorn": "^8.4.1", "acorn-walk": "^8.1.1", "arg": "^4.1.0", "create-require": "^1.1.0", "diff": "^4.0.1", "make-error": "^1.1.1", "v8-compile-cache-lib": "^3.0.1", "yn": "3.1.1" }, "peerDependencies": { "@swc/core": ">=1.2.50", "@swc/wasm": ">=1.2.50", "@types/node": "*", "typescript": ">=2.7" }, "optionalPeers": ["@swc/core", "@swc/wasm"], "bin": { "ts-node": "dist/bin.js", "ts-script": "dist/bin-script-deprecated.js", "ts-node-cwd": "dist/bin-cwd.js", "ts-node-esm": "dist/bin-esm.js", "ts-node-script": "dist/bin-script.js", "ts-node-transpile-only": "dist/bin-transpile.js" } }, "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ=="],

    "tslib": ["tslib@2.8.1", "", {}, "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="],

    "tweetnacl": ["tweetnacl@1.0.3", "", {}, "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="],

    "tweetnacl-util": ["tweetnacl-util@0.15.1", "", {}, "sha512-RKJBIj8lySrShN4w6i/BonWp2Z/uxwC3h4y7xsRrpP59ZboCd0GpEVsOnMDYLMmKBpYhb5TgHzZXy7wTfYFBRw=="],

    "type-detect": ["type-detect@4.0.8", "", {}, "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g=="],

    "type-fest": ["type-fest@0.18.1", "", {}, "sha512-OIAYXk8+ISY+qTOwkHtKqzAuxchoMiD9Udx+FSGQDuiRR+PJKJHc2NJAXlbhkGwTt/4/nKZxELY1w3ReWOL8mw=="],

    "typescript": ["typescript@5.8.2", "", { "bin": { "tsc": "bin/tsc", "tsserver": "bin/tsserver" } }, "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ=="],

    "uint8arrays": ["uint8arrays@3.1.1", "", { "dependencies": { "multiformats": "^9.4.2" } }, "sha512-+QJa8QRnbdXVpHYjLoTpJIdCTiw9Ir62nocClWuXIq2JIh4Uta0cQsTSpFL678p2CN8B+XSApwcU+pQEqVpKWg=="],

    "undici-types": ["undici-types@6.19.8", "", {}, "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw=="],

    "update-browserslist-db": ["update-browserslist-db@1.1.3", "", { "dependencies": { "escalade": "^3.2.0", "picocolors": "^1.1.1" }, "peerDependencies": { "browserslist": ">= 4.21.0" }, "bin": { "update-browserslist-db": "cli.js" } }, "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw=="],

    "upper-case": ["upper-case@2.0.2", "", { "dependencies": { "tslib": "^2.0.3" } }, "sha512-KgdgDGJt2TpuwBUIjgG6lzw2GWFRCW9Qkfkiv0DxqHHLYJHmtmdUIKcZd8rHgFSjopVTlw6ggzCm1b8MFQwikg=="],

    "upper-case-first": ["upper-case-first@2.0.2", "", { "dependencies": { "tslib": "^2.0.3" } }, "sha512-514ppYHBaKwfJRK/pNC6c/OxfGa0obSnAl106u97Ed0I625Nin96KAjttZF6ZL3e1XLtphxnqrOi9iWgm+u+bg=="],

    "util-deprecate": ["util-deprecate@1.0.2", "", {}, "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="],

    "v8-compile-cache-lib": ["v8-compile-cache-lib@3.0.1", "", {}, "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg=="],

    "v8-to-istanbul": ["v8-to-istanbul@9.3.0", "", { "dependencies": { "@jridgewell/trace-mapping": "^0.3.12", "@types/istanbul-lib-coverage": "^2.0.1", "convert-source-map": "^2.0.0" } }, "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA=="],

    "validate-npm-package-license": ["validate-npm-package-license@3.0.4", "", { "dependencies": { "spdx-correct": "^3.0.0", "spdx-expression-parse": "^3.0.0" } }, "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew=="],

    "walker": ["walker@1.0.8", "", { "dependencies": { "makeerror": "1.0.12" } }, "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ=="],

    "wcwidth": ["wcwidth@1.0.1", "", { "dependencies": { "defaults": "^1.0.3" } }, "sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg=="],

    "webidl-conversions": ["webidl-conversions@3.0.1", "", {}, "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="],

    "whatwg-fetch": ["whatwg-fetch@3.6.20", "", {}, "sha512-EqhiFU6daOA8kpjOWTL0olhVOF3i7OrFzSYiGsEMB8GcXS+RrzauAERX65xMeNWVqxA6HXH2m69Z9LaKKdisfg=="],

    "whatwg-url": ["whatwg-url@5.0.0", "", { "dependencies": { "tr46": "~0.0.3", "webidl-conversions": "^3.0.0" } }, "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw=="],

    "which": ["which@2.0.2", "", { "dependencies": { "isexe": "^2.0.0" }, "bin": { "node-which": "./bin/node-which" } }, "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA=="],

    "wrap-ansi": ["wrap-ansi@6.2.0", "", { "dependencies": { "ansi-styles": "^4.0.0", "string-width": "^4.1.0", "strip-ansi": "^6.0.0" } }, "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA=="],

    "wrappy": ["wrappy@1.0.2", "", {}, "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="],

    "write-file-atomic": ["write-file-atomic@4.0.2", "", { "dependencies": { "imurmurhash": "^0.1.4", "signal-exit": "^3.0.7" } }, "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg=="],

    "y18n": ["y18n@5.0.8", "", {}, "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA=="],

    "yallist": ["yallist@3.1.1", "", {}, "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g=="],

    "yargs": ["yargs@17.7.2", "", { "dependencies": { "cliui": "^8.0.1", "escalade": "^3.1.1", "get-caller-file": "^2.0.5", "require-directory": "^2.1.1", "string-width": "^4.2.3", "y18n": "^5.0.5", "yargs-parser": "^21.1.1" } }, "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w=="],

    "yargs-parser": ["yargs-parser@21.1.1", "", {}, "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="],

    "yn": ["yn@3.1.1", "", {}, "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="],

    "yocto-queue": ["yocto-queue@0.1.0", "", {}, "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q=="],

    "zod": ["zod@3.24.2", "", {}, "sha512-lY7CDW43ECgW9u1TcT3IoXHflywfVqDYze4waEz812jR/bZ8FHDsl7pFQoSZTz5N+2NqRXs8GBwnAwo3ZNxqhQ=="],

    "@babel/core/semver": ["semver@6.3.1", "", { "bin": { "semver": "bin/semver.js" } }, "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="],

    "@babel/helper-compilation-targets/semver": ["semver@6.3.1", "", { "bin": { "semver": "bin/semver.js" } }, "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="],

    "@cspotcode/source-map-support/@jridgewell/trace-mapping": ["@jridgewell/trace-mapping@0.3.9", "", { "dependencies": { "@jridgewell/resolve-uri": "^3.0.3", "@jridgewell/sourcemap-codec": "^1.4.10" } }, "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ=="],

    "@jest/console/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "@jest/core/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "@jest/reporters/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "@jest/types/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "@tact-lang/compiler/@ton/core": ["@ton/core@0.60.1", "", { "dependencies": { "symbol.inspect": "1.0.1" }, "peerDependencies": { "@ton/crypto": ">=3.2.0" } }, "sha512-8FwybYbfkk57C3l9gvnlRhRBHbLYmeu0LbB1z9N+dhDz0Z+FJW8w0TJlks8CgHrAFxsT3FlR2LsqFnsauMp38w=="],

    "@tact-lang/compiler/ohm-js": ["ohm-js@17.1.0", "", {}, "sha512-xc3B5dgAjTBQGHaH7B58M2Pmv6WvzrJ/3/7LeUzXNg0/sY3jQPdSd/S2SstppaleO77rifR1tyhdfFGNIwxf2Q=="],

    "@tact-lang/opcode/@ton/core": ["@ton/core@0.60.1", "", { "dependencies": { "symbol.inspect": "1.0.1" }, "peerDependencies": { "@ton/crypto": ">=3.2.0" } }, "sha512-8FwybYbfkk57C3l9gvnlRhRBHbLYmeu0LbB1z9N+dhDz0Z+FJW8w0TJlks8CgHrAFxsT3FlR2LsqFnsauMp38w=="],

    "@ton-community/tlb-codegen/@ton/core": ["@ton/core@0.54.0", "", { "dependencies": { "symbol.inspect": "1.0.1" }, "peerDependencies": { "@ton/crypto": ">=3.2.0" } }, "sha512-ry3sCDq3jdjZuo7+egZ827/Y0/ajPbtrozvJryNMefUGfZQ/zYLVCmw9zBtxVsY2EX2zW7QhHQUs76/3y6HCwQ=="],

    "@tonconnect/isomorphic-fetch/node-fetch": ["node-fetch@2.7.0", "", { "dependencies": { "whatwg-url": "^5.0.0" }, "peerDependencies": { "encoding": "^0.1.0" }, "optionalPeers": ["encoding"] }, "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A=="],

    "ansi-escapes/type-fest": ["type-fest@0.21.3", "", {}, "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w=="],

    "babel-plugin-istanbul/istanbul-lib-instrument": ["istanbul-lib-instrument@5.2.1", "", { "dependencies": { "@babel/core": "^7.12.3", "@babel/parser": "^7.14.7", "@istanbuljs/schema": "^0.1.2", "istanbul-lib-coverage": "^3.2.0", "semver": "^6.3.0" } }, "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg=="],

    "cliui/wrap-ansi": ["wrap-ansi@7.0.0", "", { "dependencies": { "ansi-styles": "^4.0.0", "string-width": "^4.1.0", "strip-ansi": "^6.0.0" } }, "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q=="],

    "decamelize-keys/map-obj": ["map-obj@1.0.1", "", {}, "sha512-7N/q3lyZ+LVCp7PzuxrJr4KMbBE2hW7BT7YNia330OFxIf4d3r5zVpicP2650l7CPN6RM9zOJRl3NGpqSiw3Eg=="],

    "encoding/iconv-lite": ["iconv-lite@0.6.3", "", { "dependencies": { "safer-buffer": ">= 2.1.2 < 3.0.0" } }, "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw=="],

    "filelist/minimatch": ["minimatch@5.1.6", "", { "dependencies": { "brace-expansion": "^2.0.1" } }, "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g=="],

    "hosted-git-info/lru-cache": ["lru-cache@6.0.0", "", { "dependencies": { "yallist": "^4.0.0" } }, "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA=="],

    "jest-haste-map/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "jest-runner/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "jest-runtime/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "jest-util/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "jest-validate/camelcase": ["camelcase@6.3.0", "", {}, "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA=="],

    "jest-watcher/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "jest-worker/supports-color": ["supports-color@8.1.1", "", { "dependencies": { "has-flag": "^4.0.0" } }, "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q=="],

    "meow/yargs-parser": ["yargs-parser@20.2.9", "", {}, "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w=="],

    "merge-options/is-plain-obj": ["is-plain-obj@2.1.0", "", {}, "sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA=="],

    "ora/bl": ["bl@4.1.0", "", { "dependencies": { "buffer": "^5.5.0", "inherits": "^2.0.4", "readable-stream": "^3.4.0" } }, "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w=="],

    "p-locate/p-limit": ["p-limit@2.3.0", "", { "dependencies": { "p-try": "^2.0.0" } }, "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w=="],

    "pretty-format/ansi-styles": ["ansi-styles@5.2.0", "", {}, "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA=="],

    "protobufjs/@types/node": ["@types/node@20.17.22", "", { "dependencies": { "undici-types": "~6.19.2" } }, "sha512-9RV2zST+0s3EhfrMZIhrz2bhuhBwxgkbHEwP2gtGWPjBzVQjifMzJ9exw7aDZhR1wbpj8zBrfp3bo8oJcGiUUw=="],

    "rabin-wasm/node-fetch": ["node-fetch@2.7.0", "", { "dependencies": { "whatwg-url": "^5.0.0" }, "peerDependencies": { "encoding": "^0.1.0" }, "optionalPeers": ["encoding"] }, "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A=="],

    "read-pkg/normalize-package-data": ["normalize-package-data@2.5.0", "", { "dependencies": { "hosted-git-info": "^2.1.4", "resolve": "^1.10.0", "semver": "2 || 3 || 4 || 5", "validate-npm-package-license": "^3.0.1" } }, "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA=="],

    "read-pkg/type-fest": ["type-fest@0.6.0", "", {}, "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg=="],

    "read-pkg-up/type-fest": ["type-fest@0.8.1", "", {}, "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA=="],

    "stack-utils/escape-string-regexp": ["escape-string-regexp@2.0.0", "", {}, "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w=="],

    "ts-node/arg": ["arg@4.1.3", "", {}, "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="],

    "babel-plugin-istanbul/istanbul-lib-instrument/semver": ["semver@6.3.1", "", { "bin": { "semver": "bin/semver.js" } }, "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA=="],

    "filelist/minimatch/brace-expansion": ["brace-expansion@2.0.1", "", { "dependencies": { "balanced-match": "^1.0.0" } }, "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA=="],

    "hosted-git-info/lru-cache/yallist": ["yallist@4.0.0", "", {}, "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="],

    "ora/bl/buffer": ["buffer@5.7.1", "", { "dependencies": { "base64-js": "^1.3.1", "ieee754": "^1.1.13" } }, "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ=="],

    "read-pkg/normalize-package-data/hosted-git-info": ["hosted-git-info@2.8.9", "", {}, "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw=="],

    "read-pkg/normalize-package-data/semver": ["semver@5.7.2", "", { "bin": { "semver": "bin/semver" } }, "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g=="],
  }
}

================
File: jest.config.js
================
// jest.config.js
module.exports = {
  transform: {
    '^.+\\.ts?$': ['@swc/jest'],
  },
  testEnvironment: 'node',
  modulePathIgnorePatterns: [
    '<rootDir>/dist/',
    '<rootDir>/packages/contracts-demo/src/ton-rocks-js',
  ],
  collectCoverage: true,
  coverageReporters: ['cobertura', 'html'],
  coveragePathIgnorePatterns: [
    '<rootDir>/packages/contracts-sdk',
    '<rootDir>/packages/contracts-build',
    '<rootDir>/packages/.+/build', // ignore every build/ of every sub directory of packages
    '<rootDir>/packages/.+/dist',
    '<rootDir>/node_modules/',
    '<rootDir>/packages/.+/node_modules/',
    '<rootDir>/packages/.+/tests/',
  ],
};

================
File: lerna.json
================
{
  "$schema": "node_modules/lerna/schemas/lerna-schema.json",
  "npmClient": "yarn",
  "version": "1.3.0",
  "command": {
    "publish": {
      "registry": "https://registry.npmjs.org/"
    }
  }
}

================
File: LICENSE
================
/*
 * Copyright 2024 Oraichain Labs JSC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at

 *      http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

================
File: nx.json
================
{
  "tasksRunnerOptions": {
    "default": {
      "options": {}
    }
  },
  "targetDefaults": {
    "build": {
      "dependsOn": ["^build"],
      "cache": true
    },
    "cli": {
      "packageManager": "yarn"
    },
    "test": {
      "cache": true
    }
  },
  "namedInputs": {
    "default": ["{projectRoot}/**/*", "sharedGlobals"],
    "sharedGlobals": [],
    "production": ["default"]
  },
  "cacheDirectory": "node_modules/.cache"
}

================
File: package.json
================
{
  "name": "@orbiton_labs/v3-contracts-sdk",
  "version": "1.1.20",
  "main": "build/index.js",
  "files": [
    "build"
  ],
  "scripts": {
    "build": "tsc",
    "build:npm": "yarn build:all && rm -rf ./dist && tsc --project tsconfig.build.json",
    "test": "yarn blueprint build --all && jest --verbose"
  },
  "devDependencies": {
    "@orbs-network/ton-access": "^2.3.3",
    "@ton-community/tlb-codegen": "^1.1.0",
    "@ton/blueprint": "^0.24.0",
    "@ton/core": "~0",
    "@ton/crypto": "^3.3.0",
    "@ton/sandbox": "^0.22.0",
    "@ton/test-utils": "^0.4.2",
    "@ton/ton": "^15.0.0",
    "@types/big.js": "^6.2.2",
    "@types/bun": "^1.2.5",
    "@types/jest": "^29.5.13",
    "@types/node": "^22.5.5",
    "jest": "^29.7.0",
    "prettier": "^3.3.3",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.2"
  },
  "packageManager": "yarn@3.4.1",
  "dependencies": {
    "@ton-api/client": "^0.3.1",
    "big.js": "^6.2.2",
    "bignumber.js": "^9.1.2",
    "decimal.js": "^10.4.3",
    "decimal.js-light": "^2.5.1",
    "tiny-invariant": "^1.3.3",
    "toformat": "^2.0.0"
  }
}

================
File: README.md
================
# Orbiton SDK

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "build",
    "declaration": true,
    "downlevelIteration": true,
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true
  }
}



================================================================
End of Codebase
================================================================
